// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/activity)
	PaginateActivity(ctx echo.Context, params PaginateActivityParams) error

	// (GET /api/apps)
	PaginateApps(ctx echo.Context, params PaginateAppsParams) error

	// (POST /api/apps)
	CreateApp(ctx echo.Context, params CreateAppParams) error

	// (DELETE /api/apps/{appId})
	DeleteApp(ctx echo.Context, appId string) error

	// (GET /api/apps/{appId})
	GetApp(ctx echo.Context, appId string) error

	// (PUT /api/apps/{appId})
	UpdateApp(ctx echo.Context, appId string) error

	// (GET /api/apps/{appId}/channels)
	PaginateChannels(ctx echo.Context, appId string, params PaginateChannelsParams) error

	// (POST /api/apps/{appId}/channels)
	CreateChannel(ctx echo.Context, appId string) error

	// (DELETE /api/apps/{appId}/channels/{channelId})
	DeleteChannel(ctx echo.Context, appId string, channelId string) error

	// (GET /api/apps/{appId}/channels/{channelId})
	GetChannel(ctx echo.Context, appId string, channelId string) error

	// (PUT /api/apps/{appId}/channels/{channelId})
	UpdateChannel(ctx echo.Context, appId string, channelId string) error

	// (GET /api/apps/{appId}/groups)
	PaginateGroups(ctx echo.Context, appId string, params PaginateGroupsParams) error

	// (POST /api/apps/{appId}/groups)
	CreateGroup(ctx echo.Context, appId string) error

	// (DELETE /api/apps/{appId}/groups/{groupId})
	DeleteGroup(ctx echo.Context, appId string, groupId string) error

	// (GET /api/apps/{appId}/groups/{groupId})
	GetGroup(ctx echo.Context, appId string, groupId string) error

	// (PUT /api/apps/{appId}/groups/{groupId})
	UpdateGroup(ctx echo.Context, appId string, groupId string) error

	// (GET /api/apps/{appId}/groups/{groupId}/instances)
	GetGroupInstances(ctx echo.Context, appId string, groupId string, params GetGroupInstancesParams) error

	// (GET /api/apps/{appId}/groups/{groupId}/instances/{instanceId})
	GetInstance(ctx echo.Context, appId string, groupId string, instanceId string) error

	// (GET /api/apps/{appId}/groups/{groupId}/instances/{instanceId}/status_history)
	GetInstanceStatusHistory(ctx echo.Context, appId string, groupId string, instanceId string, params GetInstanceStatusHistoryParams) error

	// (GET /api/apps/{appId}/groups/{groupId}/instances_stats)
	GetGroupInstanceStats(ctx echo.Context, appId string, groupId string, params GetGroupInstanceStatsParams) error

	// (GET /api/apps/{appId}/groups/{groupId}/instancescount)
	GetGroupInstancesCount(ctx echo.Context, appId string, groupId string, params GetGroupInstancesCountParams) error

	// (GET /api/apps/{appId}/groups/{groupId}/status_timeline)
	GetGroupStatusTimeline(ctx echo.Context, appId string, groupId string, params GetGroupStatusTimelineParams) error

	// (GET /api/apps/{appId}/groups/{groupId}/version_breakdown)
	GetGroupVersionBreakdown(ctx echo.Context, appId string, groupId string) error

	// (GET /api/apps/{appId}/groups/{groupId}/version_timeline)
	GetGroupVersionTimeline(ctx echo.Context, appId string, groupId string, params GetGroupVersionTimelineParams) error

	// (GET /api/apps/{appId}/packages)
	PaginatePackages(ctx echo.Context, appId string, params PaginatePackagesParams) error

	// (POST /api/apps/{appId}/packages)
	CreatePackage(ctx echo.Context, appId string) error

	// (DELETE /api/apps/{appId}/packages/{packageId})
	DeletePackage(ctx echo.Context, appId string, packageId string) error

	// (GET /api/apps/{appId}/packages/{packageId})
	GetPackage(ctx echo.Context, appId string, packageId string) error

	// (PUT /api/apps/{appId}/packages/{packageId})
	UpdatePackage(ctx echo.Context, appId string, packageId string) error

	// (GET /config)
	GetConfig(ctx echo.Context) error

	// (PUT /instances/{instanceId})
	UpdateInstance(ctx echo.Context, instanceId string) error

	// (GET /login)
	Login(ctx echo.Context) error

	// (GET /login/cb)
	LoginCb(ctx echo.Context) error

	// (GET /login/validate_token)
	ValidateToken(ctx echo.Context) error

	// (GET /login/webhook)
	LoginWebhook(ctx echo.Context) error

	// (POST /v1/update/)
	Omaha(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PaginateActivity converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateActivity(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateActivityParams
	// ------------- Optional query parameter "appId" -------------

	err = runtime.BindQueryParameter("form", true, false, "appId", ctx.QueryParams(), &params.AppId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Optional query parameter "groupId" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupId", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Optional query parameter "channelId" -------------

	err = runtime.BindQueryParameter("form", true, false, "channelId", ctx.QueryParams(), &params.ChannelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", ctx.QueryParams(), &params.Severity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter severity: %s", err))
	}

	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateActivity(ctx, params)
	return err
}

// PaginateApps converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateApps(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateAppsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateApps(ctx, params)
	return err
}

// CreateApp converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApp(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAppParams
	// ------------- Optional query parameter "clone_from" -------------

	err = runtime.BindQueryParameter("form", true, false, "clone_from", ctx.QueryParams(), &params.CloneFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clone_from: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateApp(ctx, params)
	return err
}

// DeleteApp converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApp(ctx, appId)
	return err
}

// GetApp converts echo context to params.
func (w *ServerInterfaceWrapper) GetApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApp(ctx, appId)
	return err
}

// UpdateApp converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApp(ctx, appId)
	return err
}

// PaginateChannels converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateChannels(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateChannelsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateChannels(ctx, appId, params)
	return err
}

// CreateChannel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateChannel(ctx, appId)
	return err
}

// DeleteChannel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "channelId", runtime.ParamLocationPath, ctx.Param("channelId"), &channelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteChannel(ctx, appId, channelId)
	return err
}

// GetChannel converts echo context to params.
func (w *ServerInterfaceWrapper) GetChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "channelId", runtime.ParamLocationPath, ctx.Param("channelId"), &channelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetChannel(ctx, appId, channelId)
	return err
}

// UpdateChannel converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateChannel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "channelId" -------------
	var channelId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "channelId", runtime.ParamLocationPath, ctx.Param("channelId"), &channelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter channelId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateChannel(ctx, appId, channelId)
	return err
}

// PaginateGroups converts echo context to params.
func (w *ServerInterfaceWrapper) PaginateGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginateGroupsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginateGroups(ctx, appId, params)
	return err
}

// CreateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGroup(ctx, appId)
	return err
}

// DeleteGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroup(ctx, appId, groupId)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroup(ctx, appId, groupId)
	return err
}

// UpdateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateGroup(ctx, appId, groupId)
	return err
}

// GetGroupInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupInstancesParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// ------------- Optional query parameter "sortFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortFilter", ctx.QueryParams(), &params.SortFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortFilter: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, false, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupInstances(ctx, appId, groupId, params)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, appId, groupId, instanceId)
	return err
}

// GetInstanceStatusHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatusHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusHistoryParams
	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatusHistory(ctx, appId, groupId, instanceId, params)
	return err
}

// GetGroupInstanceStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupInstanceStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupInstanceStatsParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupInstanceStats(ctx, appId, groupId, params)
	return err
}

// GetGroupInstancesCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupInstancesCount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupInstancesCountParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupInstancesCount(ctx, appId, groupId, params)
	return err
}

// GetGroupStatusTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupStatusTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupStatusTimelineParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupStatusTimeline(ctx, appId, groupId, params)
	return err
}

// GetGroupVersionBreakdown converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupVersionBreakdown(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupVersionBreakdown(ctx, appId, groupId)
	return err
}

// GetGroupVersionTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupVersionTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupVersionTimelineParams
	// ------------- Required query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, true, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroupVersionTimeline(ctx, appId, groupId, params)
	return err
}

// PaginatePackages converts echo context to params.
func (w *ServerInterfaceWrapper) PaginatePackages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PaginatePackagesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perpage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perpage", ctx.QueryParams(), &params.Perpage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perpage: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PaginatePackages(ctx, appId, params)
	return err
}

// CreatePackage converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePackage(ctx, appId)
	return err
}

// DeletePackage converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "packageId" -------------
	var packageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "packageId", runtime.ParamLocationPath, ctx.Param("packageId"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packageId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePackage(ctx, appId, packageId)
	return err
}

// GetPackage converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "packageId" -------------
	var packageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "packageId", runtime.ParamLocationPath, ctx.Param("packageId"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packageId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackage(ctx, appId, packageId)
	return err
}

// UpdatePackage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "appId", runtime.ParamLocationPath, ctx.Param("appId"), &appId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter appId: %s", err))
	}

	// ------------- Path parameter "packageId" -------------
	var packageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "packageId", runtime.ParamLocationPath, ctx.Param("packageId"), &packageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter packageId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePackage(ctx, appId, packageId)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// UpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceId" -------------
	var instanceId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "instanceId", runtime.ParamLocationPath, ctx.Param("instanceId"), &instanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInstance(ctx, instanceId)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// LoginCb converts echo context to params.
func (w *ServerInterfaceWrapper) LoginCb(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginCb(ctx)
	return err
}

// ValidateToken converts echo context to params.
func (w *ServerInterfaceWrapper) ValidateToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ValidateToken(ctx)
	return err
}

// LoginWebhook converts echo context to params.
func (w *ServerInterfaceWrapper) LoginWebhook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginWebhook(ctx)
	return err
}

// Omaha converts echo context to params.
func (w *ServerInterfaceWrapper) Omaha(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Omaha(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/activity", wrapper.PaginateActivity)
	router.GET(baseURL+"/api/apps", wrapper.PaginateApps)
	router.POST(baseURL+"/api/apps", wrapper.CreateApp)
	router.DELETE(baseURL+"/api/apps/:appId", wrapper.DeleteApp)
	router.GET(baseURL+"/api/apps/:appId", wrapper.GetApp)
	router.PUT(baseURL+"/api/apps/:appId", wrapper.UpdateApp)
	router.GET(baseURL+"/api/apps/:appId/channels", wrapper.PaginateChannels)
	router.POST(baseURL+"/api/apps/:appId/channels", wrapper.CreateChannel)
	router.DELETE(baseURL+"/api/apps/:appId/channels/:channelId", wrapper.DeleteChannel)
	router.GET(baseURL+"/api/apps/:appId/channels/:channelId", wrapper.GetChannel)
	router.PUT(baseURL+"/api/apps/:appId/channels/:channelId", wrapper.UpdateChannel)
	router.GET(baseURL+"/api/apps/:appId/groups", wrapper.PaginateGroups)
	router.POST(baseURL+"/api/apps/:appId/groups", wrapper.CreateGroup)
	router.DELETE(baseURL+"/api/apps/:appId/groups/:groupId", wrapper.DeleteGroup)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId", wrapper.GetGroup)
	router.PUT(baseURL+"/api/apps/:appId/groups/:groupId", wrapper.UpdateGroup)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/instances", wrapper.GetGroupInstances)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/instances/:instanceId", wrapper.GetInstance)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/instances/:instanceId/status_history", wrapper.GetInstanceStatusHistory)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/instances_stats", wrapper.GetGroupInstanceStats)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/instancescount", wrapper.GetGroupInstancesCount)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/status_timeline", wrapper.GetGroupStatusTimeline)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/version_breakdown", wrapper.GetGroupVersionBreakdown)
	router.GET(baseURL+"/api/apps/:appId/groups/:groupId/version_timeline", wrapper.GetGroupVersionTimeline)
	router.GET(baseURL+"/api/apps/:appId/packages", wrapper.PaginatePackages)
	router.POST(baseURL+"/api/apps/:appId/packages", wrapper.CreatePackage)
	router.DELETE(baseURL+"/api/apps/:appId/packages/:packageId", wrapper.DeletePackage)
	router.GET(baseURL+"/api/apps/:appId/packages/:packageId", wrapper.GetPackage)
	router.PUT(baseURL+"/api/apps/:appId/packages/:packageId", wrapper.UpdatePackage)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.PUT(baseURL+"/instances/:instanceId", wrapper.UpdateInstance)
	router.GET(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/login/cb", wrapper.LoginCb)
	router.GET(baseURL+"/login/validate_token", wrapper.ValidateToken)
	router.GET(baseURL+"/login/webhook", wrapper.LoginWebhook)
	router.POST(baseURL+"/v1/update/", wrapper.Omaha)

}
