// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1s1u9/8AAAD//40uwdhqgwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
