// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GKEyYoREGaAzl6oXi/8GAAD//7DoS1aviwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
