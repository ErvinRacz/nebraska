// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9xvCgIUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
