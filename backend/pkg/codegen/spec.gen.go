// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
