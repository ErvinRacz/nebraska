// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
