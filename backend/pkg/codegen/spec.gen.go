// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rm52u/8PAAD//16yjLfCggAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
