// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
