// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lAO68ol6s/n/AAAA//9b1xM2bJYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
