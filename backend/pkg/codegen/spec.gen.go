// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7v8BAAD//zxMqNkxgwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
