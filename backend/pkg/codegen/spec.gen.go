// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
