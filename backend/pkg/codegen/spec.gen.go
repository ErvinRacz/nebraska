// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tm52u/8HAAD//84LDqRCgwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
