// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//2TALQSmDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
