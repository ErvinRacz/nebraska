// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
