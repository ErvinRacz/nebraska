// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
