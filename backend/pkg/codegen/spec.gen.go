// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/4BAbA0RiwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
