// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tIVAI4MAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
