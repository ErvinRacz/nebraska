// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
