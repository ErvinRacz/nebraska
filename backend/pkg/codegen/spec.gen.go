// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
