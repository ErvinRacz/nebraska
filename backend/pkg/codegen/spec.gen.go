// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"m9XqfwEAAP//AwzWSe+IAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
