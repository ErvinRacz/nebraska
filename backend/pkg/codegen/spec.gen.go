// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdWXPbtvb/Khz+/4+y5aRJH/R0HbdxfLvEUyftncl4NBAJSahJgAVBL/Hou9/BRoAk",
	"QEG7fJOHTh0RODg453c2LORznJC8IBhiVsaj57hM5jAH4k+QMHSP2BP/u6CkgJQhKJ8UxdVP/A/2VMB4",
	"FJeMIjyLB/HjCQEFOklICmcQn8BHRsEJAzPR6++S4HjEO49RGi8WA/5nhhLAEMG/gxxuQFGTGWNOh9NO",
	"5gBjmG1CV5GwaGagLC1qCDM4gzTmjygEDKafxOMpoTlg8ShOAYMnDOUwHqzGQTrh40uaY1bGg5on8xvn",
	"aEZJtYEuRHetDfGPTeQlqdXSQrhkACdwffY0Bc1hCe8hVYjsquAe0hLxfu3BeFcK/6kQhWk8+qLga4Rn",
	"a08r2RrMUO4i1pZaE3ON+d/W6ieTv2HCOLvavK7BDDpMTD5V/0IM5uKP/6dwGo/i/xsaqx0qkx3W9rqo",
	"RwOUAvHvhFSYucXGCAPZhe95S3RWY010YPPqnGhRXBA8RbPuLFNYJhQVzK22QYydaFwMOJm0ShgHxug5",
	"xlWWgUkG4xGjFRwsUb8g6mFUK7fLqtJtuDpUB6c2tuss3K5hmWwFcMOnI5q7JiNV0CGv0V86RBkINtnO",
	"palluLhK13U5FrAWbX5QGquhm9Jt+g8l14FBjC0Mm0UPBkuPRzDoXMEnWJDeu1uwGXbOlSZzTzRVttMn",
	"hI0ykDpf0JmIYqVXlryNEFpGqBN9e7Frj71pk8jB468Qz9g8Hr09GzgsBCR3Cl99k9XNTI/15a0ILLUp",
	"KdimNTUVbjOjlNYBVlBmpX2zwZovRLXA4hK9B8eckRk5Ub9WCLN+9PidmpFfSG5js6uYM7L1Bj8lBrfv",
	"2Wrw26XPqRl1TtGn4iSBZfkbwGAGc4jZZ5q59Vyx+W8kdStpDkEK6Q17ytzPMzJD2Ec5IzPifVB5GcJw",
	"QkF5B/70Zr6DmCHm5KiNG4cM7OG7gymu9QhNCVjzteTmUoqwzvcoayW6TQ3NQTl3ZxmpG0leWyrRV480",
	"Opw1gBvm6cSP46mYDac5zQBLAD1PfDklJTn8eOPVX2idysmQcqzrlMX+ckyQZgi7RZ2ikifl1+ApIyB9",
	"B5I7Mp1aLSeEZBDgwJEVtXEhyY0nih5nA97Dhsvw4MP6ufwJZgyszQwqx6kgwEfPIQMpYOAGzTBgFYV/",
	"lGBdVWpa41ITG9OyPcxXuAXyX2WRjiFMy/M0R3htYQgSYyBoiCp9Dl6//XG5yxHhSapu0DGFmkyDRaM5",
	"H7w86miJz0KubSmr5hJKAMrKx0Caecfwr03K1bR/Dzr7BLgl/mQ1t7f02srnA7MG9ef6XOjFO83BMZTc",
	"S1L3buJHMpQ8/QYePxec0/Ia0mtIERFkcoRRXuXxyGT5duYZkJYL6uMcPI4rSX9cQMr/4yMs6vE/Tqco",
	"gR9IRcu1fYQaiwhS47mgZUaQk7rCDNJ7kK1dZsgxJP9jpKmZYW7AFLbyt7VmUYIpHOeckKH9CeXwK8Fw",
	"Q+aZJmMoS91z+qRiG5KXehajcGLtQcqfMXep6aYC0nCCipzw/CTLSMWu8DUlMwrL9bGkKI0RHhealnCN",
	"FCR3gWFn6SpOl91uLWp8lEeMHeC5TKqDII9V9LkDN1a0SFxptwgAvprX8p3OxK7p5qwVh9fOJYfgpYle",
	"h+TM811+pYsr07DtHPxe17LyPoLMa/emTcvqlrY0huMcucZ5Q/A/Bi17LxOyV1DdCfum50XblVoEvWGA",
	"OVeF8yKDDLoVnZIHzPM8mPY/5zN3NoCUNtZdrEdidTbLfKQJ/kCytGfFwv2owimcIuyjKqV2SQFmziZh",
	"vlDJfqbILJyLJLHNTHtkLZmBUYAtkYbkm2KuJePVuGcxyb8AtK09ic0XkhQn3qlxEFel6MXdbasIttJz",
	"swKYg+ILN5JT3uGW/wthJv4vLfa2Qpj9+KYeQpVC7ygEd1zuwWK5b3X8GTPq3BW0h9lwKp0p6C0PR5GR",
	"IVC6F9iaG3B9c9Tkz5sbHIdcgUdFYPKBiv6q05Leed+W5M6qtX0IcZsnF7Z/0iADJbuYw+TuPaEq29qq",
	"MDj9ccIHGE8J1ZG4Hvqz7aI/7WDoZtzQOjFDb7giaY9hL0qWwmv2BcQt1Adq3HZ5cL/ZlMw02iZtwNct",
	"EcwRE3OGxC4zlEDcgHNjwaUmh/TWXMtqbBhbplUH07BY3t374lEheH9fj+pOIBpHC4IiYh2MfLlCaJrQ",
	"2Mvv41zmBx9QyQhFa3Bq93fGbnfDroL24ctFBnnh3BkL2Y0V3ceJLJD1Tor5bZnjuIcUlSHnvmpj0z2a",
	"tmhm4VKs2M+6wlPSlXEByvKBUHdWUJWQehb4WuzVLQeGoosTkoM5+AP+U8GSdRO15hb/EZ6eUDu07zKQ",
	"3GVITqE2je725eqbcHqE8aQe4mhWgJu7nX3yslouBvEUZdC7TNzZZeyj22y8GATurS7dQdXic4Z2z/51",
	"8IlNkTaLJnYgrcTuci2a9nJeKXd6xPxaRzw7GOxGbvfhEmNd2z8vYhmHBd1w63h58Ls2h4y8KDwE3LyH",
	"aLrqaYPOQqMCnoKhQq/ErOakB18rr52ofuGphnXEa/vrJzU3rinqZFWnlh5L8qwTtJUlmrmGca+D9KeT",
	"DrlCmkDMlDpM4CDVJLOiBq7yyYrn0I0nq/PTxnDdOYkz8ElFEXu64VqUPM8Qm1eTC0LuEDyv2FxOigcn",
	"8ZPe7hiphoZnUKBfoFA4QWnyDgIKqSYwEf96r6f7778+cSyLQXlFJp4aSnPGCk0ngBHerMuGrDdkhpUQ",
	"zEAi4AdzgDI+Bswy8q87hO9JdneKiCH3i/xNmZfkZjQcWk3bvjH+XZ1milAZARxJREa5OP9ET+tTTaah",
	"ZbWj+Oz07PSVmG8BMShQPIp/OD07PRPAZ3OhlSEo0NC+QzODrHPmPS7ADGE+dN1SEKUyEKXxKL5WLc5N",
	"gwJQkEMGaRmPvigR/1NB+mREou84SGN3YtHd0VSsK3e198NW7twoo1fubUxp5a7WPY9OX8vleTozQLm7",
	"M2YtbyAYSrXDqNPKQL4gTndDuOC+xabUc5LATwRSP51XLkK3fDJlQXApvdbrszNt6Or0lhV2h3+ris5Q",
	"D7n6IoLmopOIx7+iktUWFpWVOOwYaXa4Ib85e9M1Tm1yESYsmpIKp40+b+UM+oYSNaXVyXLgwnTbfvfL",
	"LRd424vKX7tu/svt4paTlK6mkDsnTjczgyw6L8S1BI93kQ8DPMv/Inz0pQsHdC6l5DygcQDgHeAoEdV5",
	"AMKKonSiawdAGcQFKR3YkJVRBIqig44L8ehcPAmARpIRDMdTSvJeR3wr3Ros2TuSPm1TiyqVdKhRHRuN",
	"poRGjQk3HexityizllY7HEpZbwdrTs9kDbBntzR8FunIQvKkN/mb3MnfnSj8STzyo5CnXN3Mxx85nXjs",
	"Kr3Jn2TCq563S/rsQeIDv+t3SfUSsr2LdB92dCnnu0KUL4pVArwOCHvRaFE5NKqKFZdS5bbQjvV6QNfd",
	"mPrRuG4p9R267s/1tA/luof2FbD+Sla3jMiUl9YumOqs88Jckd0FWr+dAsi+vefxibVagh2j0s6qzrEe",
	"aD8esi+n1RcK3HntRf30BbnK5nXVsEzXiGF/LtNcsfVluqrFbrNdPcih3ebwuV4dC0mDNduTp0hsQLgS",
	"4t3Cd+CkYy/x7SbB7kPF24B+h020+/V2CdmLV9qunYMVQfYVqQ6fyvfDRmZ/Lww53yOfv1DYWuTbljG0",
	"+DpUsDTH//srDNkuoL641O/i+V5dbIJoc5nDgWke9qScw/21ar8CQq1RDl9WCHlECPesmQteX1ZlYV8J",
	"DPOuMzXJ/flWdePHW1MIse+2opBDHNZFDp/VNn1ILSHROkP3EEeIlZHqGgGcRhp8rvpilxB2pxvm7MFu",
	"aos+dPi81CpOqjHMYQuR1ZV+CdmL1vhu/culjj87hI8Z4+AFyerw0ddUXgyCDhpAbTEfRwBVJcCKAbTR",
	"a6UqZWXraAx1LOF32Dg86vXGdStRs2zgnK/sF4ketY35D8zJOzhLKS2vkQ5TaPkmRih7jzImTsWuLhZC",
	"2UeartkZAprMNxhc9P8TZBVcp3taSaBuAx4h5zh3Gf8bFw89acBV05j9HtMb5J0Ujs+lDZ/NodxFkH/b",
	"wL1dWUfgX4Rja1JqHF8+jlzWXHp147hWWnBGq3W0alJbj3TkGB/K6DSem9u0yyHf7HPah+3mXd1vCuge",
	"f5+hHLHwIL4Pc2nf3F5qPaJ9pPS/R2NqDXx8tjUu9Zuewqxoa9mxfMPUC82Q10qndr4m0hStwyZqON9o",
	"Tc52vFziG/H4DKG+tbncDkTTrVWJF/VtzO+GsL0IIaW6pDqwNblBidAlczTwVokPs94Z5sW3ilW67aYA",
	"lzG6flvZd4Bv0dO73mznwLpsFn2yNLprh+8d8mhMQi1fjCf2O/u8RqFaR3XrTc2i88bAb34rpyMRB5JV",
	"m+idrYZdY7ln0KNDc5CH12DelotXAvru43doFkudvEbpPr28f8xDGYb9ZpX+g2m6ZcDRtGtN9Fs4nNa/",
	"8XDgNX/7hTue821aWeGwr3scx+Vu/a4f92G16/rpCzqu1nwPV9iBNSOG/e24169Z8h5aU+IP33Vv9Zus",
	"cYpNcXVwnzp8rr/oF3KWTbNtMoq6+9LzbLtFuTuTsD9XuJszbf3g8XumNc617REzPSfb1oPAJWQvXv+7",
	"dkeXJtLtFE72OAc/6bYenORhpBeGqAPH4KbAjyUGq2Nl+8D95ybi9hh6/Uc6+kzDeiuhC/0rndjY5HzE",
	"9nHrfAFlGHwtoewPv31HOT43+QrfZmh33BMezVd4+15XE6lmriu0+snubvB5ASHu+IqnPYLqmfwcgky+",
	"F9M5efk4gjgtCBI7d83Zf5DdQ9JDRcrHpWRHvNTcy414Gk0oeSghjaYZeegw9KsgEPRyMEFtTGGKKEzY",
	"WL4Id/2c6Iez1z6Ol9ZPVsHktQ7x5SsMsqiE9B5SaR2y9atuax4FUF5k4tvJUDoMTHDErSMCFZtHOUnV",
	"Bz7cWhgmkyWKSECWTUBy51bCxSQIForUJLzYbAnrjWv6FeZzJBR9hemqEvVLhJE7KD9741zakFMRjXrA",
	"+UkQCQ0jjycPDw8nU0Lzk4pmECdEfXEszHGYjwQsCSYW76GBxD/5pZ5+71i+BxmSH4XTKnTiWjerBdHU",
	"35/qsVHhMqk0CYY4v+EDnMwJuVsGswc4iUQ7J8j+UkTcjlB+GN14wv+cfKgmJ/X3idcqCro0L0XUOflZ",
	"fVB5y6sNtRT4PJcI9v6VSrD8QhXfsPDHuY/8ca/RMvjIho95Fm6bjc9mLDHPDntrWKiYQ/RHyBVUxVWE",
	"pvU6Xom+wgiVESMkygCduUS9WPw3AAD//4ksx1G+jQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
