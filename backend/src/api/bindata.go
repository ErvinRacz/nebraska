// Code generated by go-bindata.
// sources:
// db/drop_all_tables.sql
// db/migrations/0001_initial.sql
// DO NOT EDIT!

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x8e\x85\x30\x0c\x43\xf7\x9c\xa2\xf7\xe0\x30\x91\x09\x19\x88\x28\x6d\xd5\x04\x34\xdc\x7e\x24\xc4\x6c\xbe\xbe\x14\xf6\x2f\xb6\x63\xcf\xbd\xb6\xe4\x98\xb2\x24\xfd\x49\xf2\xab\xe6\x96\x5c\xb0\x27\x86\x31\x66\x19\x87\xaf\xc8\x61\xd2\x2d\x60\xd0\x5a\x56\x86\x6b\x2d\x01\xd9\xc0\x1b\x16\x09\x28\xae\x5d\xaa\x11\xf8\x85\x22\xaf\x28\x45\x72\x40\x2d\xbd\x1e\x2d\x7a\x43\x8b\x39\x0a\x47\xe9\xfe\x31\x32\x87\x1f\x6f\x45\xe9\x7d\x49\x1f\x06\xb4\xaa\x79\xed\x57\x70\x25\xa7\x14\x27\xbf\x5a\x94\xff\x06\xa3\x45\xd9\xf5\x54\x8f\x3c\x9f\x39\xe9\x19\x81\xa6\x0c\xde\xb2\x5a\x24\x3f\xc3\x31\xc1\x84\x76\x5d\xfa\x5d\x89\x8d\xc3\x5f\x00\x00\x00\xff\xff\xda\x81\x6e\xb2\xa2\x02\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 674, mode: os.FileMode(420), modTime: time.Unix(1494051742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\x5d\x73\xdb\xb6\xd2\xbe\x8e\x7f\x05\x66\xce\x85\xe2\x89\x60\x03\x20\x40\x02\xee\xdb\x33\x93\x38\xcd\x47\x9b\xa4\x49\x93\x34\x93\xde\x68\x40\x60\x29\x31\xa6\x48\x95\xa4\xe4\xd8\xbf\xfe\x1d\x52\x24\x45\x7d\x9a\x92\x9d\xc4\x27\xd3\xa9\x47\x11\xb0\xc0\xee\xb3\xcf\x2e\x16\x20\x28\x8c\xd1\xa3\x71\x38\x4c\x75\x0e\xe8\xe3\xe4\xe8\x08\x63\x74\x9e\xa4\xf0\x57\x12\x45\x90\xa2\xcc\x8c\x60\xac\x8f\x8e\x74\x94\x43\x8a\xac\xce\xb5\xaf\x33\x40\x26\x49\x21\xad\x7a\x40\x8e\xf2\x70\x0c\xd7\x49\x0c\xe8\x57\xd4\x9b\xe6\xa6\xf7\xcb\xd1\x91\x49\xa1\x18\x31\xd7\x7e\x04\x28\x07\x3d\x46\x0f\x8f\x1e\x84\x16\x4d\xa7\xa1\x45\x93\x34\x1c\xeb\xf4\x0a\x5d\xc0\x15\xb2\x10\xe8\x69\x94\x97\x0d\x83\x21\xc4\x50\x68\x32\x98\xf1\x87\xc7\xfd\xa3\x07\xb1\x1e\x03\x9a\xe9\xd4\x8c\x74\xfa\x90\x89\x63\x14\x27\x39\x8a\xa7\x51\x84\xcc\x08\xcc\x05\x7a\x58\x76\xf8\xbf\xff\xa2\x5e\xef\x18\x4d\xe3\xf0\xdf\x29\xf4\x8f\x1e\xcc\xe7\xb6\x83\x3c\x2b\x35\xcb\x72\x3d\x9e\xe4\xd7\xcd\x4c\x66\x9a\xa6\x10\xe7\x83\xa6\xad\x19\xf5\xe8\x78\x55\xf3\x69\x06\x69\x76\x90\xea\x85\xe4\x8d\xea\x37\x9d\x56\x4d\xc8\xc0\xa4\x90\x37\xb2\x82\xac\xcb\x56\x5d\xe6\x92\xb7\xb1\xba\x7f\xf4\xa0\x70\xd0\xa0\x36\xb1\x99\x28\x85\x00\x52\x88\x0d\x64\x95\x07\x43\x7b\x8c\x92\x18\x59\x88\x20\x07\x64\x74\x66\xb4\x85\x36\x68\x61\x6c\xe1\x6b\xd1\xa5\xc2\xad\x1a\x77\x0d\x56\x3d\x99\x44\xa1\xd1\x79\x98\xc4\xb7\xe7\xc5\x26\x70\x5a\xa0\xf6\x8f\x1e\x58\xc8\x4c\x1a\x4e\xca\xe9\x72\xf8\x9a\xff\x40\xb4\x0a\x66\x94\x4e\x6e\xc0\xe9\xa3\x42\xd9\xe3\x75\xee\x4d\xb4\xb9\xd0\x43\x38\x08\xa0\xfc\x6a\x52\x78\x23\x5f\x03\xa6\x6c\xf8\x2f\x22\x45\xa7\x19\xa4\x59\x01\xc9\x82\xa1\x1b\x28\x5a\x77\x6a\xc0\x9c\xa6\x51\x4b\xc2\xdd\x40\xea\x34\x5a\xf4\x0e\xc2\x08\x96\xbc\x45\x09\xd9\xe2\x92\x2c\xbc\x6e\x45\x4b\xd9\x6b\xa4\xb3\x51\xf3\x95\xcb\x6f\x4b\xf3\x16\xed\x76\xfa\x6f\x89\x9e\xbb\xdd\xf8\x70\x79\xcc\x3e\xaa\xf0\xda\xe0\xcf\x22\x69\x26\xd9\x40\x9b\x83\x69\x0f\x33\x88\xf3\x36\x44\x4d\xf7\xde\x24\xc9\xf2\x30\xce\x72\x1d\x45\xbd\x3e\x3a\x7a\x60\x46\x69\x32\x2e\xa6\xdb\xe8\xe4\x46\xac\xec\x9b\x8d\x34\x13\xee\x0a\xce\x31\x80\xcd\x06\xda\x8e\xc3\x18\xf9\x49\x12\x81\x8e\x1b\xb1\x40\x47\x59\x01\x41\x98\x0d\x2c\x44\xb9\xde\xda\xc1\x86\x59\x61\xfa\x60\xa2\xaf\xa2\x44\xdb\x81\xaf\xcd\x45\x12\x04\x6b\xfd\xf3\xb4\xcc\x7a\x63\xc8\x75\xb1\xc6\x0c\xb2\x70\x18\xeb\x7c\x9a\xc2\x20\xcd\xf4\x32\xdb\x5a\xaa\x2f\x09\x5c\x2f\x53\x6c\xb9\x9f\x05\x6d\xa3\x30\xde\xd5\xe5\x36\xbc\xaa\x22\x75\x27\xa7\x9a\x68\xee\x9e\x44\x57\x08\xb3\x98\x65\x9d\x5a\x23\x1d\xc7\x10\x7d\xf3\x35\xb6\xc0\x29\x89\x92\x74\x63\xff\xfb\x14\x9c\xab\x1e\xb9\xd9\x11\x45\x1d\x53\x69\x52\x27\xe8\xd5\xd0\x5e\xcb\xd3\x0b\x4f\xd5\xf8\xef\xf0\xd1\x30\x4d\xa6\x93\xc3\x6a\x89\x5b\x2e\x77\x6d\x94\x8b\xaa\x2d\x99\xe6\x83\x30\x1e\x4c\xd2\x64\x98\x42\x96\x6d\x8e\xde\x25\x7e\x27\x51\x68\xae\x06\xd3\x89\xd5\x39\x64\x03\x88\x0b\x83\xec\xc6\x28\xde\x20\x96\xe9\x00\x06\xe3\xc4\x42\x57\x81\x24\x08\x42\x03\x83\x51\x32\x4d\xbb\x2b\xd7\xd4\xa0\x35\x4e\xbc\x5c\x41\xaa\xd6\x09\xa4\x61\x62\x07\x61\x9c\x43\x3a\xd3\xd1\x52\x0e\x5d\x05\x73\x8b\x48\x03\x6f\xd5\x3e\xd6\x5f\x1b\x44\x26\x90\x56\xfd\x8b\x45\x17\x86\x90\x6e\x1b\x75\x8b\x54\xb5\x22\x2f\x01\x5d\x9a\x94\x4c\xf3\x2e\xca\xae\x48\xdc\x49\x51\x78\xa7\x01\x59\x45\xc8\xa6\x80\x6c\x82\xe7\x0e\x03\xb2\x0e\xb6\xc5\xb4\x6b\xf1\x58\xae\x96\xb1\xa9\xeb\xab\x76\x78\xb5\x03\xb3\xc2\x39\xb4\x0b\x50\xc3\x09\x0a\x63\xc8\xef\x24\xf1\xad\x97\x09\xb5\x5e\x83\x2c\xd7\xf9\xb4\x4e\x18\x19\xa4\xa1\x8e\xda\x9a\xad\xa5\x6e\xb2\x9c\x8a\x77\xe5\xe9\xd0\xb4\x2b\x82\x96\xe0\x0e\x75\x56\x6a\xf6\xc3\x8a\xc7\xdb\xf0\xb1\xc2\xa3\x0a\xb0\xfe\xd1\x83\x48\x67\xf9\xa0\x9c\x69\x10\x24\x69\x1d\x56\xfb\x0f\x5c\x8e\x53\x45\xd0\x30\xd5\xf1\xba\x82\x2b\x9d\x36\xda\x5e\x99\xbc\xa9\xdf\xa2\x76\x9e\x7f\xbf\x57\xf2\x6d\x1c\xb0\x42\xd2\x4d\xa1\xb8\xe0\xf4\xb6\x38\xbc\xd3\xa0\x2e\xa3\x6c\x53\x48\xd7\xe1\xb7\x35\xa2\xdb\x11\xf6\xb0\x65\x61\x1f\x2d\x2b\xb8\x39\xba\x37\x73\xb2\x35\xcc\xf1\x2f\x1d\x65\x56\x66\xeb\x2a\x56\x1b\x7e\x53\xf0\x0e\x46\x61\x96\x27\xe9\xd5\xae\x20\x5e\xa3\xf5\x2e\x76\xdd\x69\x40\xfd\x3c\xcc\xda\x55\x45\x6f\x75\x49\x47\xbe\xac\x8a\x75\xa7\xcc\xaa\xe4\x56\xd6\x94\xfb\xba\x41\xb9\x35\xdf\x41\x94\x7a\x4f\xbf\x54\x5e\x14\x25\x1d\x64\x85\xab\x37\xb4\xb4\x0b\xc1\xa5\x9d\xcf\xf6\x74\x3f\xdf\x62\xee\xd0\xe2\x56\xfb\xa4\x14\x66\x61\x32\xdd\xbc\x29\x2d\xf6\xb7\x69\x9a\xa4\x03\x53\x94\x8a\x2b\xc7\x05\xf7\x98\xaa\x0b\xe7\x15\x63\xad\x95\x7f\xad\xe1\xda\x6e\x2e\x46\xdb\x48\xd7\xca\x01\xbb\xc9\x59\x75\xba\x91\x8a\x55\xbf\x25\x15\xd7\x0f\xe3\x4c\x1e\xce\xc2\x7c\x67\x92\xba\x8d\xd7\x4d\xa4\xb3\x6c\x13\x3d\x33\x98\x41\x5a\x4c\xbc\xa1\xed\xb0\xf2\xe2\x1e\xe4\xa0\x83\x6a\xdd\x85\xec\x36\xa2\x77\xe7\xf7\x46\x56\x2d\x7c\x7c\x23\x67\x16\x5d\x5b\xf9\x6a\x7b\xa7\xa5\x0a\x7b\x7b\xb7\x65\x3e\x6f\x3c\xe8\x1c\xd4\x43\xf9\x91\x36\x17\x51\x98\x95\x79\xe8\xf6\x67\x2b\x1b\x3c\xb2\x69\x90\x1b\x5d\xb3\x54\xb3\x2c\xd4\xea\xa3\x16\x04\x25\xf8\x18\xa3\x97\x71\x98\x17\x51\x64\x75\xae\xcb\x2f\x9e\xd6\x5b\x5e\xd0\x63\xa4\x63\x5b\x9e\x90\xa3\x87\xe5\xf9\xda\x69\xf9\xf7\xf8\x28\x8c\x33\x48\xcb\x44\x9e\x34\x47\xc8\xd5\x26\x07\xcd\x74\x34\x85\x0c\x3d\xec\x59\xa9\x1c\xce\xac\xc1\x8a\x51\x8e\x39\xa7\x16\x6b\xae\x03\xec\x5b\x2b\x1d\x4f\x3b\x3e\x73\x54\xaf\x8f\x7a\x55\x68\xf6\x8e\x7f\x59\x1a\xb7\x3a\x98\xaf\x1f\x3c\xf4\xd1\xfc\x31\x42\x1f\xd5\x47\xf5\x8b\x99\x4a\xad\x8a\xa1\xa4\xef\x50\xa6\x98\xe5\x9e\x27\x85\x64\x86\x80\x08\xb4\x72\x35\x80\x10\xd4\x09\x68\x39\x5d\x17\xb5\x2a\x70\x7e\x2b\xb3\x52\x91\x8e\xb2\x25\xdd\xda\xf9\xb1\xf8\xdb\x47\xf3\xa5\xad\x8f\x5a\x0b\xd9\x42\x41\xa7\x8f\x48\x1f\xf5\x5e\xd6\xe1\x90\xc2\x24\x49\x73\xb0\x48\xc7\xa8\x5c\x49\x90\x9d\xa6\x61\x3c\x2c\xfe\x3d\x2f\xbc\x51\x96\xc3\xe4\x64\x15\x92\xfd\xa7\xa5\x7d\xd4\xfb\x58\x8e\x98\xa2\x91\xce\xd0\x24\x4d\x0c\x64\x59\x39\xb5\x9d\x27\x17\xb0\x35\x2b\xef\x60\x3e\xd6\x32\x33\x43\xd3\xc9\x30\xd5\x16\x2c\xca\x93\x3a\xf1\x36\xe4\xad\x32\xe2\x6d\xe7\xa4\x95\x91\x4f\x93\xcb\x38\x4a\xb4\x2d\x50\x8c\x8a\xcd\x55\x7e\x67\x33\xf0\x36\x8c\x4d\x04\xeb\x34\x0d\x67\x60\x51\x36\x35\x05\xa2\xc1\x34\x8a\xae\x6e\x3b\x95\x24\x64\x3e\xd7\xcb\xf9\xf9\x78\x3d\xf8\x09\xaa\x26\x37\xc9\x78\x12\x41\xb9\x18\x14\x15\x0a\x14\x1b\x40\xe4\x5f\x35\x89\xf6\xa4\x26\xee\x79\x92\xc2\x9f\xef\xdb\xab\xc7\x92\x5e\x2b\xab\xca\x3c\x74\x97\x94\xda\x14\x66\xa0\x5c\x26\xa9\x76\xb1\xa5\x3a\xc0\xdc\xb7\x80\x95\x26\x1a\x2b\xcf\xf7\x5c\x10\xae\x35\xc2\x2b\x22\x6c\x3e\x79\xf1\xe9\x55\x18\x4f\xbf\xa2\x20\x49\xd1\x58\x67\x59\x38\x2b\x76\x56\xe9\x0c\x52\x64\x61\x12\x25\x57\x63\x88\xf3\x6c\x9f\x98\x6c\xdb\x50\x3b\xa2\x51\x8f\xf9\x9a\x1b\x25\x39\x16\xa0\x7c\xcc\x29\x05\xec\x7b\xc6\xc1\xbe\x03\x3e\xe5\x81\xa7\x99\x5b\x24\x80\x02\x5f\xcf\x75\x4f\x9c\x13\x52\x4c\x3d\xca\xf3\x49\x76\x76\x7a\x6a\x92\xf1\x38\x89\x8b\x2c\x58\xd4\xc0\x45\x34\x0c\x93\x64\x18\x81\x9e\x84\xd9\x89\x49\xc6\xa7\xf3\xc0\xc4\x75\xab\x49\x52\xc0\x49\x76\x12\x43\x7e\xaa\xc7\xd6\xe5\x78\x9a\xa5\xa7\xd5\xc0\xa7\xc5\xc8\x73\x81\x93\xe1\x75\xaf\x8f\xde\x7c\x7c\xf5\xaa\x8f\x7a\x54\x70\xe5\x7a\x5c\xc8\xa2\x3d\xe2\x7f\x5c\x7a\x8f\xe1\xc9\xab\xf4\xef\x97\x4f\xd5\xef\x7e\x70\xf5\x3a\xf9\x1d\x9e\x88\xab\x3f\x86\xbf\x16\xed\x8c\x50\x81\x89\xc2\x8c\x20\x42\xce\x28\x3b\x73\xbc\x13\xc1\x1c\xe5\x94\xd2\x9d\x9c\x71\x13\x64\x8e\xe3\xf9\x4e\xe0\x01\x0e\x02\xa6\x30\xf7\x40\x62\x4d\x04\xc3\x01\x91\x0e\xb7\x4c\xf8\xd6\x17\x2d\xc8\xf8\xb7\x82\x8c\xef\x82\x4c\x10\x2a\x15\x65\x45\x7b\x90\x5e\x5c\xe8\x47\x4f\x4e\xaf\x3f\xcc\xbc\x3f\xdf\x7e\x1a\x86\xf6\xf3\xa3\x0b\xfe\x3e\x7e\xfa\x7e\x1d\x32\xf7\x8c\x8a\x33\xa6\x4e\x28\x91\xcc\x75\xef\x0c\x32\xc3\xb4\xe3\x3a\x94\x61\x5f\x49\x85\x39\x71\x00\x6b\x5f\x78\x98\xb8\x86\x08\xa1\x3d\xd0\x86\x55\x90\x49\x22\x4f\xc8\xb7\x80\xac\x1a\x78\x2b\x64\x9e\xe7\x51\x8f\x53\x5e\xb4\xfb\xff\x3a\xc1\xbb\xbf\x5e\xbc\x95\x5f\x9f\x38\x7f\x3d\xfb\xf8\xe5\xdc\x3e\x0e\x9c\xcb\x77\x9f\xcf\xd9\x6f\x1b\x58\x46\xd4\x19\x71\x4f\xa4\xa3\x94\x54\x77\x06\x19\x77\x84\x24\x52\x31\x6c\xb4\x95\x98\xbb\x52\x63\x4d\x7c\x1f\x83\xaf\x2c\x01\xa2\xc0\x68\x5e\x43\x46\xc5\x37\x82\x6c\x3e\xf0\x76\xc8\xa4\xcb\x1d\xe1\x95\x46\x5f\xbc\xe1\x7a\x9c\xfc\xf1\xf9\xef\x7f\x3e\x3e\x67\x9f\x92\xf7\xf6\xdd\x0b\xfa\xf6\xc5\xdb\xeb\x54\x3c\x5e\x86\x4c\x20\xea\x9c\x09\x71\xc6\xc8\x49\x01\x37\xbd\x3b\xc8\x98\xe4\x96\x29\xe1\x63\x41\x65\x80\xb9\x75\x3d\xac\x94\x02\xac\xb8\x72\xa5\x25\x00\x56\x91\x1a\x32\xa6\xbe\x11\x64\xf3\x81\xb7\x42\x26\x5d\xc6\x85\x98\xb3\x8c\x45\xa3\xe4\xe3\x6c\x16\x27\x9f\x1d\xa1\x26\x21\x7b\x16\xeb\xf7\xa7\x5f\xb3\x61\x1e\xb6\x02\x93\x12\x4c\x09\x62\xce\x19\xa5\x67\x94\x9c\x48\x26\x94\x14\x87\x42\xd6\xd4\x11\xcd\xea\x44\x5c\xe2\x72\x6d\x8b\xe5\x83\x63\xae\x08\xc7\x4a\xbb\x80\x03\xcb\x5d\x21\x94\x63\xa9\x5f\xe6\x90\xac\x2c\xe5\x8b\x4f\xff\xa1\xdc\x57\xd6\x6d\xbb\x94\x2a\x44\x44\x11\x05\x0e\x3f\x61\x2e\x65\x9c\x76\xd6\xaf\x8f\xba\xa5\xd3\x9b\xec\xa0\x4c\xfa\xd2\x30\x85\x05\x11\x45\xb4\x70\x07\x4b\x70\x3d\xac\xa9\x26\xe0\x18\x97\x53\x53\xf2\xcc\x87\x5c\x97\x56\x04\xc6\x0b\x1c\x67\xbb\x15\xdc\x71\xf8\x77\xb7\x42\x4b\x4f\x13\xa7\xf0\x46\xb1\x22\x73\x4f\x53\x2c\xad\xe1\xd8\x11\xc4\xf3\x35\x28\x0a\x50\x42\xab\xa3\xc9\x68\x6e\x06\x0d\x7c\x5f\xee\x70\x86\xf0\xc4\x5e\x66\x74\x0a\xa1\x15\x33\xaa\xfd\x72\x63\x85\xd2\xcc\x82\xef\x11\xec\x78\x3e\x60\x4e\x98\x8b\xa5\x70\x02\xec\x07\xd6\xba\xbe\xc3\x3d\xdf\x2f\x99\xf4\xbe\xe1\xd4\xb3\x24\x2d\x8a\x6c\x3b\x9d\x3f\x0a\x37\xd1\x34\xcb\x21\x2d\x8a\x9c\xf9\x4d\x83\xf9\x05\x82\xea\x6f\xf5\x55\xef\xf1\x34\xcb\x53\x1d\x85\xfa\xf4\xfd\x95\x8d\xe1\xaa\x57\xae\x7b\x68\x1c\xc6\xd3\x1c\x0a\xd9\xa2\xac\x76\x49\xeb\x8b\x2d\x18\x29\xe2\xb2\x7d\x30\xea\x14\x33\x37\x60\xe4\x04\x40\x09\x57\x04\x5b\xeb\x39\x98\xfb\x5c\x61\xdf\x63\x1a\x33\xa9\x0d\x55\xda\x04\xc6\x9a\x62\xae\x27\x15\x5f\xdf\xa6\xc9\x38\x29\x37\x3f\x85\xeb\x51\x0a\x11\xe8\x0c\xb2\x7e\xb9\x49\xd0\xb9\x19\x21\x7f\x3a\xcc\x50\x36\x01\x13\x06\xa1\x29\xbe\xbe\x4a\xa6\x29\x32\x49\x1c\x84\xc3\x69\x5a\x56\xad\xbd\x65\x20\xbf\x0d\x9c\x9e\xc3\xf8\x5e\x94\xeb\x14\xba\x37\xc0\x29\x7c\x49\x89\x2b\x09\x06\xc7\xd5\x98\x4b\x4f\x15\x95\x86\xc6\x3c\x50\x52\x81\x24\xbe\x54\x65\xf8\x3f\xae\x03\xe7\x43\xaa\xcd\x45\xd6\xec\xaf\x2c\xcc\x20\x4a\x26\x45\x69\x8d\x2e\x93\xf4\xa2\xdc\xe8\x85\x59\x8d\xb3\x45\x41\x0a\xff\x4e\x21\xce\xa3\xab\x5b\x92\xb2\x58\x7c\x9c\x0e\x28\x72\x45\xf7\xca\xa2\x9d\x52\xc7\x6a\xfe\x59\xba\x80\xd2\x80\xe9\x33\x9f\xba\xc0\x00\x0b\x2f\x90\x98\x7b\x9e\xc0\x92\x79\x01\x96\x01\xf1\x29\xd5\xa0\x7c\x5b\xc6\xcb\xf2\x9d\xa4\x5e\x59\x04\xc8\xf3\x27\x32\x7f\x0d\xe4\xb5\x7c\x7a\xf5\x8f\xf8\xeb\x9f\xcb\xeb\xa7\xaf\xae\x3e\xd8\x8b\x17\x5f\xfe\x3c\xfd\x3c\x0c\xfe\xf8\x3b\x66\x7f\x0d\x3f\xbe\x4e\x2e\xcc\xaf\x0b\x20\x97\xf0\xec\xf5\x5a\xff\x6f\xac\xe6\x1d\xc6\x64\x89\x4d\xa7\xbd\x4b\x37\x9b\xad\xd0\xcc\xf8\x81\x83\x0b\x22\x61\x0e\xd2\x60\x29\x41\x62\xd7\x06\x8a\x06\x86\xb9\xdc\xb8\x5b\x6c\x7e\xf7\xf1\x79\x3c\x7e\x2b\xe8\x68\xe2\x5d\x5f\x3d\x7a\xf4\x28\x11\xc1\x93\x97\x97\xbf\x45\x2f\xe3\x0f\x8f\xc7\x99\x77\x1a\x7f\x89\x2f\xbe\x4e\xf3\xf8\xf4\xdd\xcb\xbd\x6d\x6e\xca\x71\xea\xce\x17\xfd\x83\x96\x99\xcd\x26\x33\xa5\x8c\xe0\x96\x62\xc7\xe1\x1c\x73\x0d\x0a\x4b\x6d\x19\x16\xc6\x75\xac\x70\xad\x6b\xe6\x55\xca\x06\x93\xdf\x9f\xcf\xa4\x7a\xfe\xf9\xfa\xab\xf7\xf2\xeb\xa3\x0f\xd1\x97\x7f\xfd\x37\x99\xf5\x92\xd8\x15\x49\xf2\xe9\xdf\x27\xd7\xe6\x3c\x7d\xf5\xec\x15\xbf\x3c\x1f\xbd\x3b\xc0\xcd\xf3\x72\x5a\x31\x8f\x97\x5b\xcf\x6e\x9b\x87\x6e\x36\x7b\x5c\xda\x40\x04\x06\x53\xa6\x05\xe6\x56\x5b\xac\x3d\x0a\x98\xbb\xc2\x18\xea\xba\x92\x70\xb9\xc5\x66\xf5\xe2\x63\xc6\x2f\x47\xe1\x75\x70\x35\xf3\xf9\x78\x18\x3d\xfa\xa4\xdf\xe8\x4f\xce\xdf\xaf\xde\x7d\xbe\xcc\x3e\xd1\xe7\x2f\xde\xbc\xf8\xfd\xcd\xc4\x3c\x1b\xf2\xfd\x6c\x6e\xd5\xc3\x92\x09\xc6\xcb\xd8\xea\x54\xfd\x77\xb3\x59\x19\xcb\x3d\x6e\x04\x86\x40\x3b\x45\x7a\x50\xc5\x92\xce\xb0\x90\xd6\xfa\x52\x30\xb0\x72\x9b\x9f\xe9\x7b\x75\xfd\xee\xfc\xd5\xf3\x2f\x63\x08\x3e\xc7\xbf\x9d\xea\x67\x66\x72\xfe\xe5\x15\x7d\x93\x0d\xa7\x2f\x46\xef\x9e\x7f\x21\x1f\xcf\xc7\x22\x20\xaf\x95\xec\x6e\xf3\x4a\x41\xab\xa8\xe3\x79\x72\x9f\xda\xe3\x08\x63\xf4\x5e\x8f\x27\x2b\x17\x8d\xe9\x1d\x1c\xd6\xf8\x2e\x17\x92\x10\x81\x65\xc0\x09\xe6\x2e\xf3\xb0\xef\x38\x3e\xf6\xc1\x23\xda\xa3\xd2\x70\x39\x2f\x5d\xd6\xa6\x2f\xbe\xfd\x7d\x9a\xe5\x48\xc7\x4b\x73\xe7\x09\xca\x46\xc9\x25\x2a\xfe\x37\x49\x12\xb5\x6f\xdf\x87\x19\x3a\x3b\xbe\xed\x49\x4e\x69\xdc\xfc\x98\x6c\x9a\x46\x7d\x54\xdf\xc8\x6d\xae\xaa\xae\x3d\x73\x6f\x2d\x9b\x54\x89\x22\xf3\x61\x11\x48\x86\x29\x05\x81\x95\xf5\x08\x0e\x20\x08\x24\x55\xc6\x1a\x15\xf4\xfa\x88\x2f\xed\x92\xea\x57\x03\x4e\x92\x74\x58\x6e\x73\x72\xc8\xf2\x01\x3d\x21\x27\x25\x73\x9b\x0f\x9d\xb0\xfc\x06\x46\x51\xe6\x2a\x2f\xd0\xbc\x30\xca\xb9\xbd\x51\x4e\x6d\x94\xf3\x23\x8d\x92\x84\x70\xbf\x48\x05\x22\x50\xde\xed\x8d\xe2\xb5\x51\xfc\x50\xa3\x5a\x8f\x53\xea\xd8\x2a\xaf\x24\xad\xda\xd0\x47\xad\x3b\x93\xad\x40\x0b\xc0\x61\x3e\xd7\x85\x93\xcc\x76\x7b\x7a\xaf\x75\xb1\x13\x28\xb7\x3a\x84\x9c\x9f\x13\xd2\x59\xdf\xf2\x28\xa9\x03\x68\x77\x6b\x97\xf1\x99\x05\xd0\xf2\x06\xf2\xb5\xf6\x3e\xff\x21\x44\xa9\x67\xcf\xf6\xb1\xab\x13\xc3\x6f\xa8\x98\x7d\xa3\xb5\x2b\x7d\x73\x43\xe8\x17\x1b\x0f\x8b\x7e\x3b\x67\x68\x9a\xe1\x4b\xc8\x72\xcc\xea\x6f\xab\xcd\xda\xfc\x6c\x3a\xeb\xa3\xa2\x15\x99\x44\x67\xf9\x77\xde\xb7\x75\x85\xad\x93\x6f\x6e\x80\xcd\x23\x1e\x67\x2e\xd7\x98\x11\x8f\x60\xee\x4b\x8e\x95\x0b\x16\x4b\xcd\x5c\x65\x7d\x2d\x08\xa3\xab\xb0\x81\xce\x72\x4c\xb7\xc1\x56\xb4\xfe\xf4\xb0\xf9\x94\x12\x49\x1d\x7d\x13\xdb\xde\x69\xfc\x14\x66\xe5\xa7\xc7\xe5\x1e\xac\xbd\x31\x6b\x20\x6b\x00\xb8\x8f\x70\x75\xca\x6c\x2b\x70\xb5\x1f\xf9\xf7\x51\x38\x69\x25\x94\xba\xa9\xe4\x0f\x25\x27\xc5\x7f\x6b\x9b\x9a\x0e\xf2\xac\x25\xbf\x56\x2d\x77\x90\x77\x5a\xf2\xce\x01\xf2\xbc\x25\xbf\x56\xb9\x76\x90\x17\x2d\xf9\xb5\x1d\x4e\x07\x79\xb7\x25\xef\x1e\x20\xef\xb5\xe4\xd7\x8e\x55\x3b\xc8\xcb\x96\xbc\x3c\x40\x5e\xb5\xe4\xd7\x6a\xc1\x2e\xfc\x21\x6d\x02\xad\x9d\xe1\x75\x19\x61\x89\x82\x5b\x39\xb8\x74\x93\x72\x51\x94\x55\x05\x54\x75\x6d\xa1\xac\x54\x9a\xcf\xcd\x87\xf9\x21\x79\xf3\xcf\x65\xf2\x77\x0e\xc0\x2e\x2b\xdb\x77\x54\x7e\xbf\xec\xf1\x4d\x94\x67\x07\x2b\xdf\xbd\xe8\xbd\x87\xc8\x77\x2f\x6e\xfb\xa8\xdb\xca\xfe\x1d\x95\x17\x3f\x5e\xf9\xc3\x69\xe3\xfe\x78\xe5\x69\x5b\x79\x67\x1f\xe5\xbd\x1f\xaf\x3c\x3f\x18\x79\xb9\x57\xc0\x76\x29\xcb\x6e\xc7\x79\x6f\x1f\xe5\xd5\x8f\x57\x7e\x89\xf3\x6c\xaf\x45\x6a\xaf\xbd\xe9\xb7\xd1\xfe\x70\xd2\xd3\xfd\xd6\xd8\x03\xb4\x6f\x2e\x8b\xd6\x1a\x37\x4a\xc4\xc9\xe5\xc3\x63\xa4\xe7\x3f\x34\x81\xca\xb7\xfc\xca\xdf\x99\x40\x18\x35\xaf\xe7\xf5\x1c\x54\xbe\x30\x38\x7f\x84\xc2\xf7\x3e\x93\xe9\x1a\xaa\x5d\x37\x3c\x4b\xd5\xc9\xdd\x5a\xea\x36\x96\x8a\xd2\x89\x3f\xaf\xa5\x94\x35\xa6\x56\x37\x12\x7f\x5e\x53\x65\x63\x2a\xff\xc9\xf9\xcb\x78\x63\x2a\x9b\xef\xb3\xef\xaf\xa9\xdb\x5e\xe6\x59\xb3\xbc\xed\xb1\x4e\x28\x2c\xfc\xfd\x03\x4a\xba\x9b\xac\x11\x07\x5a\x83\xda\x27\x28\xf7\xd0\x2e\x77\x5f\xbb\xd4\x7d\xf6\x92\x77\xa0\x35\x88\xdf\x73\x37\xb1\xdb\x1b\x86\x28\x41\x19\x98\x24\xb6\xf7\xd4\x46\xde\x7a\x16\xd6\xad\xc0\x71\xef\x33\x17\xc5\xa1\xe6\xfc\xaf\xa4\x8c\xee\x86\x79\xf7\xd9\x4f\xde\xa1\xe6\xfc\xcf\x24\x8d\xdb\x58\xf6\x3d\xb3\xc6\x96\x6b\x0a\xec\x0e\xae\x29\x78\x92\x58\x57\x71\x82\x95\xe6\x72\x7e\x0d\x51\x4a\x1b\x60\x25\x7c\xed\x3a\xbe\x0f\xca\xf8\x9b\xaf\x29\xa0\xf2\x34\xf2\x71\x9c\xe4\x23\x48\x51\xb6\xd6\xde\x47\x01\x40\x84\x82\x14\x00\xe5\x09\x4a\x61\x9c\xcc\x00\x8d\xe1\x47\xde\x52\x80\xc0\xa7\xd2\x35\x0a\x5b\x61\x7c\xcc\x6d\xc0\xb0\x72\x24\xc3\x86\x4b\x46\x81\x5b\x63\xb8\xdf\x7a\xf6\x7d\x76\x7a\x1a\x25\x46\x47\xa3\x24\xcb\xcf\x24\x21\xf3\xbb\xd8\x16\xc6\xc9\x60\x46\xeb\x4b\xdf\xcd\x87\x4e\x50\x7e\x03\xa3\x7c\xcd\xa4\x0e\xb8\xc4\xbe\xf0\x15\xe6\x2e\x01\xac\xb8\xab\x31\xf8\x5a\x11\xd7\x80\x67\x75\xb0\x87\x51\xb4\x36\x8a\x1e\x6a\xd4\x2d\x1f\x7c\x6b\xcf\x48\xa3\x34\xc7\x96\x69\x07\x73\x4f\x58\xec\x83\xcb\xb1\xa2\x34\x08\xa4\x75\x41\x29\x6f\xe5\x81\xfe\xe2\x22\x79\x57\x3e\x77\x62\xc2\x4d\x57\x45\xa9\x76\x98\xd6\x0a\x3b\x42\x30\xcc\x55\x60\xb0\x66\xd2\x60\x57\x70\xc7\x37\x26\x20\xc4\x55\x0b\x45\x11\x46\x76\xfe\x40\xf2\xc3\x08\xea\x77\xe4\xb2\x7c\x1a\x04\xe8\x32\x8c\x22\xe4\x03\xd2\xd1\xa5\xbe\xca\xd0\x08\x52\xf8\xce\x8f\x24\xbb\xc2\xd6\xc9\x37\x55\xc6\x6a\x7e\x2c\xf4\x69\x72\x19\x1f\x1d\xd9\x34\x99\xd4\xbf\x7d\x11\x20\xf8\x1a\x66\x79\xf5\xfb\x87\xd5\x8b\xb3\xbf\x6c\xee\x32\x7f\x0f\x75\x77\x9f\x76\x5a\xda\xdd\xb3\x0e\xb8\xdd\xbd\x96\xef\xbf\xdd\xd0\xb7\x62\xfb\xee\x5e\x15\x77\x76\x77\x6a\x1e\x9d\x75\xeb\x56\xff\xee\x4f\xc7\xde\xdd\x41\xda\xb6\x90\xee\x96\x6a\xbd\x6c\xd9\xa1\xe3\x4d\x1e\xad\x0f\x0e\x3a\xb9\x73\xc3\x0b\xe1\x8d\xdc\xff\x07\x00\x00\xff\xff\xbe\x0a\x14\xf9\xb7\x56\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 22199, mode: os.FileMode(420), modTime: time.Unix(1494051742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql": dbDrop_all_tablesSql,
	"db/migrations/0001_initial.sql": dbMigrations0001_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"drop_all_tables.sql": &bintree{dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_initial.sql": &bintree{dbMigrations0001_initialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

