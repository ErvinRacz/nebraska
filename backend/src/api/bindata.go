// Code generated by go-bindata.
// sources:
// db/drop_all_tables.sql
// db/migrations/0001_initial.sql
// DO NOT EDIT!

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x41\x8e\x85\x30\x0c\x43\xf7\x9c\xa2\xf7\xe0\x30\x91\x09\x19\x88\x28\x6d\xd5\x04\x34\xdc\x7e\x24\xc4\x6c\xbe\xbe\x14\xf6\x2f\xb6\x63\xcf\xbd\xb6\xe4\x98\xb2\x24\xfd\x49\xf2\xab\xe6\x96\x5c\xb0\x27\x86\x31\x66\x19\x87\xaf\xc8\x61\xd2\x2d\x60\xd0\x5a\x56\x86\x6b\x2d\x01\xd9\xc0\x1b\x16\x09\x28\xae\x5d\xaa\x11\xf8\x85\x22\xaf\x28\x45\x72\x40\x2d\xbd\x1e\x2d\x7a\x43\x8b\x39\x0a\x47\xe9\xfe\x31\x32\x87\x1f\x6f\x45\xe9\x7d\x49\x1f\x06\xb4\xaa\x79\xed\x57\x70\x25\xa7\x14\x27\xbf\x5a\x94\xff\x06\xa3\x45\xd9\xf5\x54\x8f\x3c\x9f\x39\xe9\x19\x81\xa6\x0c\xde\xb2\x5a\x24\x3f\xc3\x31\xc1\x84\x76\x5d\xfa\x5d\x89\x8d\xc3\x5f\x00\x00\x00\xff\xff\xda\x81\x6e\xb2\xa2\x02\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 674, mode: os.FileMode(420), modTime: time.Unix(1521624985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5c\x5d\x93\xd3\xb8\xd2\xbe\x66\x7e\x85\xea\x9c\x8b\x40\x11\xcd\x48\xb2\x6c\x4b\x73\xde\x3d\x55\x30\x2c\x1f\xbb\xc0\xc2\x02\x4b\xb1\x37\x29\x59\x6a\x27\x66\x1c\x3b\x6b\x39\x99\x8f\x5f\xff\x96\x1d\xdb\x71\x3e\xc7\x93\x0c\x30\x87\xda\xda\xa9\x10\xab\xa5\xee\xa7\x9f\x6e\x75\xdb\x72\x30\x46\x8f\xc7\xd1\x30\x53\x39\xa0\x4f\x93\xa3\x23\x8c\xd1\x59\x9a\xc1\x9f\x69\x1c\x43\x86\xac\x1e\xc1\x58\x1d\x1d\xa9\x38\x87\x0c\x19\x95\xab\x40\x59\x40\x3a\xcd\x20\xab\x46\x40\x8e\xf2\x68\x0c\xd7\x69\x02\xe8\x17\xd4\x9b\xe6\xba\xf7\x9f\xa3\x23\x9d\x41\x31\x23\x5c\xe6\x90\xd8\x28\x4d\x50\x14\xa2\x24\xcd\x11\x5c\x46\x36\xb7\xe8\x5f\xd3\x69\x64\x70\x6a\xed\xe4\x5f\x8b\xc1\xb9\x0a\x62\x40\x39\xa8\x31\x7a\x78\xf4\x20\x32\xa8\x18\x84\x26\x59\x34\x56\xd9\x15\x3a\x87\x2b\x64\x20\x54\xd3\x38\x2f\x2f\x0c\x86\x90\x40\xa1\xf6\x60\xc6\x1f\x3e\xea\x1f\x3d\x48\xd4\x18\xd0\x4c\x65\x7a\xa4\xb2\x87\xcc\x7d\x54\xae\x97\x4c\xe3\x18\xe9\x11\xe8\x73\xf4\xb0\x1c\xf0\x7f\xff\x45\xbd\xde\x23\x34\x4d\xa2\x7f\xa6\xd0\x3f\x7a\x30\x5f\xdb\x0c\x72\x5b\x9a\x61\x73\x35\x9e\xe4\xd7\xcd\x4a\x7a\x9a\x65\x90\xe4\x83\xe6\x5a\x33\xeb\xd1\xa3\x55\xcd\xa7\x16\x32\xbb\x97\xea\x85\xe4\x8d\xea\x37\x83\x56\x4d\xb0\xa0\x33\xc8\x1b\x59\x97\xac\xcb\x56\x43\xe6\x92\x87\x58\xdd\x3f\x7a\x50\x38\x68\x50\x9b\xd8\x2c\x94\x41\x08\x19\x24\x1a\x6c\xe5\xc1\xc8\x3c\x42\x69\x82\x0c\xc4\x90\x03\xd2\xca\x6a\x65\xa0\x0d\x5a\x94\x18\xb8\x2c\x86\x54\xb8\x55\xf3\xae\xc1\xaa\x26\x93\x38\xd2\x2a\x2f\x58\x74\x30\x2f\x36\x81\xd3\x02\xb5\x7f\xf4\xc0\x80\xd5\x59\x34\x29\x97\xcb\xe1\x32\xff\x81\x68\x15\xcc\x28\x9d\xdc\x80\xd3\x47\x85\xb2\x8f\xd6\xb9\x37\x51\xfa\x5c\x0d\x61\x2f\x80\xf2\xab\x49\xe1\x8d\x7c\x0d\x98\xf2\xc2\x7f\x11\x29\x06\xcd\x20\x2b\xe3\x78\xc1\xd0\x0d\x14\xad\x07\x35\x60\x4e\xb3\xb8\x25\xe1\x6d\x20\x75\x16\x2f\x46\x87\x51\x0c\x4b\xde\xa2\x84\x6c\x71\x89\x8d\xae\x5b\xd1\x52\x8e\x1a\x29\x3b\x6a\xbe\xf2\xf8\xa1\x34\x6f\xd1\x6e\xa7\xff\x96\xe8\xb9\xdb\x8d\x0f\x97\xe7\xec\xa3\x0a\xaf\x0d\xfe\x2c\x32\x6c\x6a\x07\x4a\xef\x4d\x7b\x98\x41\x92\xb7\x21\x6a\x86\xf7\x26\xa9\xcd\xa3\xc4\xe6\x2a\x8e\x7b\x7d\x74\xf4\x40\x8f\xb2\x74\x5c\x2c\xb7\xd1\xc9\x8d\x58\x39\xd6\x8e\x14\x73\xbd\x15\x9c\x13\x00\x63\x07\xca\x8c\xa3\x04\x05\x69\x1a\x83\x4a\x1a\xb1\x50\xc5\xb6\x80\x20\xb2\x03\x03\x71\xae\xb6\x0e\x30\x91\x2d\x4c\x1f\x4c\xd4\x55\x9c\x2a\x33\x08\x94\x3e\x4f\xc3\x70\x6d\x7c\x9e\x95\x59\x6f\x0c\xb9\x2a\x36\xa4\x81\x8d\x86\x89\xca\xa7\x19\x0c\x32\xab\x96\xd9\xd6\x52\x7d\x49\xe0\x7a\x99\x62\xcb\xe3\x0c\x28\x13\x47\xc9\xae\x21\x87\xf0\xaa\x8a\xd4\x9d\x9c\x6a\xa2\xb9\x7b\x12\x5d\x21\xcc\x62\x95\x75\x6a\x8d\x54\x92\x40\xfc\xcd\xf7\xd8\x02\xa7\x34\x4e\xb3\x8d\xe3\xef\x53\x70\xae\x7a\xe4\x66\x47\x14\x45\x4f\xa5\x49\x9d\xa0\x57\x43\x7b\x2d\x4f\x2f\x3c\x55\xe3\xbf\xc3\x47\xc3\x2c\x9d\x4e\xf6\xab\x25\x0e\xdc\xee\xda\x28\x17\x25\x5e\x3a\xcd\x07\x51\x32\x98\x64\xe9\x30\x03\x6b\x37\x47\xef\x12\xbf\xd3\x38\xd2\x57\x83\xe9\xc4\xa8\x1c\xec\x00\x92\xc2\x20\xb3\x31\x8a\x37\x88\x59\x15\xc2\x60\x9c\x1a\xe8\x2a\x90\x86\x61\xa4\x61\x30\x4a\xa7\x59\x77\xe5\x9a\x82\xb5\xc6\x89\x97\x3b\x48\x75\x75\x02\x59\x94\x9a\x41\x94\xe4\x90\xcd\x54\xbc\x94\x43\x57\xc1\xdc\x22\xd2\xc0\x5b\x5d\x1f\xab\xcb\x06\x91\x09\x64\xd5\xf8\x62\xd3\x85\x21\x64\xdb\x66\xdd\x22\x55\xed\xc8\x4b\x40\x97\x26\xa5\xd3\xbc\x8b\xb2\x2b\x12\x77\x52\x14\xde\x69\x40\x56\x11\xb2\x29\x20\x9b\xe0\xb9\xc3\x80\xac\x83\x6d\xb1\xec\x5a\x3c\x96\xbb\x65\xa2\xeb\xfa\xaa\x1d\x5e\xed\xc0\xac\x70\x8e\xcc\x02\xd4\x68\x82\xa2\x04\xf2\x3b\x49\x7c\xeb\x65\x42\xad\xd7\xc0\xe6\x2a\x9f\xd6\x09\xc3\x42\x16\xa9\xb8\xad\xd9\x5a\xea\x26\xcb\xa9\x78\x57\x9e\x8e\x74\xbb\x22\x68\x09\xee\x50\x67\xa5\x66\xdf\xaf\x78\x3c\x84\x8f\x15\x1e\x55\x80\xf5\x8f\x1e\xc4\xca\xe6\x83\x72\xa5\x41\x98\x66\x75\x58\xdd\x7e\xe2\x72\x9e\x2a\x82\x86\x99\x4a\xd6\x15\x5c\x19\xb4\xd1\xf6\xca\xe4\x4d\xe3\x16\xb5\xf3\xfc\xfb\x5b\x25\xdf\xc6\x01\x2b\x24\xdd\x14\x8a\x0b\x4e\x6f\x8b\xc3\x3b\x0d\xea\x32\xca\x36\x85\x74\x1d\x7e\x5b\x23\xba\x1d\x61\x0f\x5b\x16\xf6\xd1\xb2\x82\x9b\xa3\x7b\x33\x27\x5b\xd3\x3c\xfa\x4f\x47\x99\x95\xd5\xba\x8a\xd5\x86\xdf\x14\xbc\x83\x51\x64\xf3\x34\xbb\xda\x15\xc4\x6b\xb4\xde\xc5\xae\x3b\x0d\xa8\x9f\x87\x59\xbb\xaa\xe8\xad\x2e\xe9\xc8\x97\x55\xb1\xee\x94\x59\x95\xdc\xca\x9a\xb2\xaf\x1b\x94\xad\xf9\x0e\xa2\xd4\x3d\xfd\x52\x79\x51\x94\x74\x60\x0b\x57\x6f\xb8\xd2\x2e\x04\x97\x3a\x9f\xed\xe9\x7e\xde\x62\xee\xd0\xe2\xa0\x3e\x29\x83\x59\x94\x4e\x37\x37\xa5\x45\x7f\x9b\x65\x69\x36\xd0\x45\xa9\xb8\x72\xbb\xe0\x1e\x53\x75\xe1\xbc\x62\xae\xb5\xf2\xaf\x35\x5d\xdb\xcd\xc5\x6c\x1b\xe9\x5a\x39\x60\x37\x39\xab\x41\x37\x52\xb1\x1a\xb7\xa4\xe2\xfa\xcd\x38\x9d\x47\xb3\x28\xdf\x99\xa4\x0e\xf1\xba\x8e\x95\xb5\x9b\xe8\x69\x61\x06\x59\xb1\xf0\x86\x6b\xfb\x95\x17\xf7\x20\x07\xed\x55\xeb\x2e\x64\xb7\x11\xbd\x3b\xbf\x37\xb2\x6a\xe1\xe3\x1b\x39\xb3\x18\xda\xca\x57\xdb\x07\x2d\x55\xd8\xdb\x87\x2d\xf3\x79\xe3\x8d\xce\x41\x3d\x55\x10\x2b\x7d\x1e\x47\xb6\xcc\x43\x87\xdf\x5b\xd9\xe0\x91\x4d\x93\xdc\xe8\x9a\xa5\x9a\x65\xa1\x56\x1f\xb5\x20\x28\xc1\xc7\x18\xbd\x4a\xa2\xbc\x88\x22\xa3\x72\x55\x7e\xf1\xac\x6e\x79\x41\x8d\x91\x4a\x4c\x79\x87\x1c\x3d\x2c\xef\xaf\x9d\x94\x7f\x1f\x1d\x45\x89\x85\xac\x4c\xe4\x69\x73\x0b\xb9\x6a\x72\xd0\x4c\xc5\x53\xb0\xe8\x61\xcf\x08\xe9\x70\x66\x34\x96\x8c\x72\xcc\x39\x35\x58\x71\x15\xe2\xc0\x18\xe1\xf8\xca\x09\x98\x23\x7b\x7d\xd4\xab\x42\xb3\x57\x29\xf4\x6b\x99\x09\x8a\x14\x60\x97\xd6\x69\xe7\xa4\xe2\x6f\x1f\xcd\xb7\x93\x3e\x6a\x6d\x1e\x8b\xe5\x9d\x3e\x22\x7d\xd4\x7b\x55\x53\x30\x83\x49\x9a\xe5\x60\x90\x4a\x50\x99\xbd\x91\x99\x66\x51\x32\x2c\xfe\x3d\x2f\x76\x91\xcd\x61\x72\x5c\xa8\x71\xd8\xb2\xb4\x8f\x7a\x9f\xca\x19\x33\x34\x52\x16\x4d\xb2\x54\x83\xb5\xe5\xd2\x66\x1e\xd0\x60\x6a\x26\xdc\xc1\x7a\xac\x65\xa6\x45\xd3\xc9\x30\x53\x06\x0c\xca\xd3\x3a\xd9\x35\x84\xa9\xb2\xd0\xa1\x6b\xd2\xca\xc8\x67\xe9\x45\x12\xa7\xca\x14\x28\xc6\x45\x43\x93\xdf\xd9\x0a\xbc\x0d\x63\x13\x35\x2a\xcb\xa2\x19\x18\x64\xa7\xba\x40\x34\x9c\xc6\xf1\xd5\xa1\x4b\x09\x42\xe6\x6b\xbd\x9a\xdf\x93\xae\x27\x3f\x46\xd5\xe2\x3a\x1d\x4f\x62\x28\x13\x70\x51\x15\x40\xd1\x74\xa1\xe0\xaa\x49\x6e\xc7\x35\x71\xcf\xd2\x0c\xfe\xf8\xd0\xce\xd8\x4b\x7a\xad\x64\xf2\x79\xb8\x2c\x29\xd5\x47\xf5\x53\xa8\x45\x10\x81\xf4\x98\xa0\xca\xc3\x86\xaa\x10\xf3\xc0\x00\x96\x8a\x28\x2c\xfd\xc0\xf7\xc0\xf5\x8c\x76\xfd\x22\x88\xe6\x8b\x17\x9f\x5e\x47\xc9\xf4\x12\x85\x69\x86\xc6\xca\xda\x68\x56\x74\x33\xd9\x0c\x32\x64\x60\x12\xa7\x57\x63\x48\x72\x5b\x86\x5d\x97\xf0\x5c\xc1\xb6\x76\x44\xa3\x1e\x0b\x14\xd7\x52\x70\xec\x82\x0c\x30\xa7\x14\x70\xe0\x6b\x07\x07\x0e\x04\x94\x87\xbe\x62\x1e\xed\xcd\xf1\xf5\x3d\xef\xd8\x39\x26\xc5\xd2\xa3\x3c\x9f\xd8\xd3\x93\x13\x9d\x8e\xc7\x69\x52\x64\x9e\xa2\xee\x2c\xa2\x61\x98\xa6\xc3\x18\xd4\x24\xb2\xc7\x3a\x1d\x9f\xcc\x03\x13\xd7\x57\x75\x9a\x01\x4e\xed\x71\x02\xf9\x89\x1a\x1b\x8f\xe3\xa9\xcd\x4e\xaa\x89\x4f\x8a\x99\xe7\x02\xc7\xc3\xeb\x5e\x1f\xbd\xfd\xf4\xfa\x75\x1f\xf5\xa8\xcb\xa5\xe7\x73\x57\x14\xd7\x63\xfe\xfb\x85\xff\x04\x9e\xbe\xce\xfe\x7a\xf5\x4c\xfe\x16\x84\x57\x6f\xd2\xdf\xe0\xa9\x7b\xf5\xfb\xf0\x97\xe2\x3a\x23\xd4\xc5\x44\x62\x46\x10\x21\xa7\x94\x9d\x3a\xfe\xb1\xcb\x1c\xe9\x94\xd2\x9d\x9c\x71\x13\x64\x8e\xe3\x07\x4e\xe8\x03\x0e\x43\x26\x31\xf7\x41\x60\x45\x5c\x86\x43\x22\x1c\x6e\x98\x1b\x98\xc0\x6d\x41\xc6\xbf\x15\x64\x7c\x17\x64\x2e\xa1\x42\x52\x56\x5c\x0f\xb3\xf3\x73\xf5\xf8\xe9\xc9\xf5\xc7\x99\xff\xc7\xbb\xcf\xc3\xc8\x7c\x79\x7c\xce\x3f\x24\xcf\x3e\xac\x43\xe6\x9d\x52\xf7\x94\xc9\x63\x4a\x04\xf3\xbc\x3b\x83\x4c\x33\xe5\x78\x0e\x65\x38\x90\x42\x62\x4e\x1c\xc0\x2a\x70\x7d\x4c\x3c\x4d\x5c\x57\xf9\xa0\x34\xab\x20\x13\x44\x1c\x93\x6f\x01\x59\x35\xf1\x56\xc8\x7c\xdf\xa7\x3e\xa7\xbc\xb8\x1e\xfc\xe3\x84\xef\xff\x7c\xf9\x4e\x5c\x3e\x75\xfe\x7c\xfe\xe9\xeb\x99\x79\x12\x3a\x17\xef\xbf\x9c\xb1\x5f\x37\xb0\x8c\xc8\x53\xe2\x1d\x0b\x47\x4a\x21\xef\x0c\x32\xee\xb8\x82\x08\xc9\xb0\x56\x46\x60\xee\x09\x85\x15\x09\x02\x0c\x81\x34\x04\x88\x04\xad\x78\x0d\x19\x75\xbf\x11\x64\xf3\x89\xb7\x43\x26\x3c\xee\xb8\x7e\x69\xf4\xf9\x5b\xae\xc6\xe9\xef\x5f\xfe\xfa\xfb\xd3\x0b\xf6\x39\xfd\x60\xde\xbf\xa4\xef\x5e\xbe\xbb\xce\xdc\x27\xcb\x90\xb9\x88\x3a\xa7\xae\x7b\xca\xc8\x71\x01\x37\xbd\x3b\xc8\x98\xe0\x86\x49\x37\xc0\x2e\x15\x21\xe6\xc6\xf3\xb1\x94\x12\xb0\xe4\xd2\x13\x86\x00\x18\x49\x6a\xc8\x98\xfc\x46\x90\xcd\x27\xde\x0a\x99\xf0\x18\x77\xdd\x39\xcb\x58\x3c\x4a\x3f\xcd\x66\x49\xfa\xc5\x71\xe5\x24\x62\xcf\x13\xf5\xe1\xe4\xd2\x0e\xf3\xa8\x15\x98\x94\x60\x4a\x10\x73\x4e\x29\x3d\xa5\xe4\x58\x30\x57\x0a\x77\x5f\xc8\x9a\x3a\xa2\xd9\x9d\x88\x47\x3c\xae\x4c\xb1\x7d\x70\xcc\x25\xe1\x58\x2a\x0f\x70\x68\xb8\xe7\xba\xd2\x31\x34\x28\x73\x88\x2d\xcb\xe7\xe2\xd3\xbf\x29\x0f\xa4\xf1\xda\x2e\xa5\x12\x11\xb7\x88\x02\x87\x1f\x33\x8f\x32\x4e\x3b\xeb\xd7\x47\xdd\xd2\xe9\x4d\x76\x50\x26\x02\xa1\x99\xc4\x2e\x71\x8b\x68\xe1\x0e\x16\xe0\xf9\x58\x51\x45\xc0\xd1\x1e\xa7\xba\xe4\x59\x00\xb9\x2a\xad\x08\xb5\x1f\x3a\xce\x76\x2b\xb8\xe3\xf0\xef\x6e\x85\x12\xbe\x22\x4e\xe1\x8d\x62\x47\xe6\xbe\xa2\x58\x18\xcd\xb1\xe3\x12\x3f\x50\x20\x29\x40\x09\xad\x8a\x27\xa3\xb9\x19\x34\x0c\x02\xb1\xc3\x19\xae\xef\xde\xca\x8c\x4e\x21\xb4\x62\x46\xd5\xa3\x36\x56\x48\xc5\x0c\x04\x3e\xc1\x8e\x1f\x00\xe6\x84\x79\x58\xb8\x4e\x88\x83\xd0\x18\x2f\x70\xb8\x1f\x04\x25\x93\x3e\x34\x9c\x7a\x9e\x66\x45\x91\x6d\xa6\xf3\xc7\xcf\x3a\x9e\xda\x1c\xb2\xa2\xc8\x99\x3f\xdd\x9f\x3f\xb4\xaf\xfe\x56\x5f\xf5\x9e\x4c\x6d\x9e\xa9\x38\x52\x27\x1f\xae\x4c\x02\x57\xbd\x72\xdf\x43\xe3\x28\x99\xe6\x50\xc8\x16\x65\xb5\x47\x5a\x5f\x6c\xc1\x48\x12\x8f\xdd\x06\xa3\x4e\x31\x73\x03\x46\x4e\x08\x94\x70\x49\xb0\x31\xbe\x83\x79\xc0\x25\x0e\x7c\xa6\x30\x13\x4a\x53\xa9\x74\xa8\x8d\x2e\xd6\x7a\x5a\xf1\xf5\x5d\x96\x8e\xd3\xb2\xf9\x29\x5c\x8f\x32\x88\x41\x59\xb0\xfd\xb2\x49\x50\xb9\x1e\xa1\x60\x3a\xb4\xc8\x4e\x40\x47\x61\xa4\x8b\xaf\xaf\xd2\x69\x86\x74\x9a\x84\xd1\x70\x9a\x95\x55\x6b\x6f\x19\xc8\x6f\x03\xa7\xef\x30\x7e\x2b\xca\x75\x0a\xdd\x1b\xe0\x74\x03\x41\x89\x27\x08\x06\xc7\x53\x98\x0b\x5f\x16\x95\x86\xc2\x3c\x94\x42\x82\x20\x81\x90\x65\xf8\x3f\xa9\x03\xe7\x63\xa6\xf4\xb9\x6d\xfa\x2b\x03\x33\x88\xd3\x49\x51\x5a\xa3\x8b\x34\x3b\x2f\x1b\xbd\xc8\xd6\x38\x1b\x14\x66\xf0\xcf\x14\x92\x3c\xbe\x3a\x90\x94\xc5\xe6\xe3\x74\x40\x91\x4b\x7a\xab\x2c\xda\x29\x75\xac\xe6\x9f\xa5\x43\x1f\x0d\x98\x01\x0b\xa8\x07\x0c\xb0\xeb\x87\x02\x73\xdf\x77\xb1\x60\x7e\x88\x45\x48\x02\x4a\x15\xc8\xc0\x94\xf1\xb2\x7c\x0e\xa8\x57\x16\x01\xe2\xec\xa9\xc8\xdf\x00\x79\x23\x9e\x5d\xfd\xed\xfe\xf9\xf7\xc5\xf5\xb3\xd7\x57\x1f\xcd\xf9\xcb\xaf\x7f\x9c\x7c\x19\x86\xbf\xff\x95\xb0\x3f\x87\x9f\xde\xa4\xe7\xfa\x97\x05\x90\x4b\x78\xf6\x7a\xad\xff\x37\x56\xf3\x0e\x63\xa2\xc4\xa6\x53\xef\xd2\xcd\x66\xe3\x2a\xa6\x83\xd0\xc1\x05\x91\x30\x07\xa1\xb1\x10\x20\xb0\x67\x42\x49\x43\xcd\x3c\xae\xbd\x2d\x36\xbf\xff\xf4\x22\x19\xbf\x73\xe9\x68\xe2\x5f\x5f\x3d\x7e\xfc\x38\x75\xc3\xa7\xaf\x2e\x7e\x8d\x5f\x25\x1f\x9f\x8c\xad\x7f\x92\x7c\x4d\xce\x2f\xa7\x79\x72\xf2\xfe\xd5\xad\x6d\x6e\xca\x71\xea\xcd\x37\xfd\xbd\xb6\x99\xcd\x26\x33\x29\xb5\xcb\x0d\xc5\x8e\xc3\x39\xe6\x0a\x24\x16\xca\x30\xec\x6a\xcf\x31\xae\x67\x3c\x3d\xaf\x52\x36\x98\xfc\xe1\x6c\x26\xe4\x8b\x2f\xd7\x97\xfe\xab\xcb\xc7\x1f\xe3\xaf\xff\x04\x6f\xad\xf1\xd3\xc4\x73\xd3\xf4\xf3\x3f\x4f\xaf\xf5\x59\xf6\xfa\xf9\x6b\x7e\x71\x36\x7a\xbf\x87\x9b\xe7\xe5\xb4\x64\x3e\x2f\x5b\xcf\x6e\xcd\x43\x37\x9b\x7d\x2e\x4c\xe8\x86\x1a\x53\xa6\x5c\xcc\x8d\x32\x58\xf9\x14\x30\xf7\x5c\xad\xa9\xe7\x09\xc2\xc5\x16\x9b\xe5\xcb\x4f\x96\x5f\x8c\xa2\xeb\xf0\x6a\x16\xf0\xf1\x30\x7e\xfc\x59\xbd\x55\x9f\x9d\xbf\x5e\xbf\xff\x72\x61\x3f\xd3\x17\x2f\xdf\xbe\xfc\xed\xed\x44\x3f\x1f\xf2\xdb\xd9\xdc\xaa\x87\x05\x73\x19\x2f\x63\xab\x53\xf5\xdf\xcd\x66\xa9\x0d\xf7\xb9\x76\x31\x84\xca\x29\xd2\x83\x2c\xb6\x74\x86\x5d\x61\x4c\x20\x5c\x06\x46\x6c\xf3\x33\xfd\x20\xaf\xdf\x9f\xbd\x7e\xf1\x75\x0c\xe1\x97\xe4\xd7\x13\xf5\x5c\x4f\xce\xbe\xbe\xa6\x6f\xed\x70\xfa\x72\xf4\xfe\xc5\x57\xf2\xe9\x6c\xec\x86\xe4\x8d\x14\xdd\x6d\x5e\x29\x68\x25\x75\x7c\x5f\xdc\xa6\xf6\x38\xc2\x18\x7d\x50\xe3\xc9\xca\xe1\x5e\x7a\x07\x37\x6b\x02\x8f\xbb\x82\x10\x17\x8b\x90\x13\xcc\x3d\xe6\xe3\xc0\x71\x02\x1c\x80\x4f\x94\x4f\x85\xe6\x62\x5e\xba\xac\x2d\x5f\x7c\xfb\xdb\xd4\xe6\x48\x25\x4b\x6b\xe7\x29\xb2\xa3\xf4\x02\x15\xff\xeb\x34\x8d\xdb\xc7\xe3\x23\x8b\x4e\x1f\x1d\x7a\x27\xa7\x34\x6e\x7e\x9b\x6c\x9a\xc5\x7d\x54\x9f\x82\x6d\x8e\x87\xae\x3d\xe7\x6e\x6d\x9b\x54\xba\x45\xe6\xc3\x6e\x28\x18\xa6\x14\x5c\x2c\x8d\x4f\x70\x08\x61\x28\xa8\xd4\x46\xcb\xb0\xd7\x47\x7c\xa9\x4b\xaa\xcf\xee\x1f\xa7\xd9\xb0\x6c\x73\x72\xb0\xf9\x80\x1e\x93\xe3\x92\xb9\xcd\x87\x4e\x58\x7e\x03\xa3\x28\xf3\xa4\x1f\x2a\x5e\x18\xe5\x1c\x6e\x94\x53\x1b\xe5\xfc\x48\xa3\x04\x21\x3c\x28\x52\x81\x1b\x4a\xff\x70\xa3\x78\x6d\x14\xdf\xd7\xa8\xd6\x23\x8c\x3a\xb6\xca\x63\x40\xab\x36\xf4\x51\xeb\x9c\x62\x2b\xd0\x42\x70\x58\xc0\x55\xe1\x24\xbd\xdd\x9e\xde\x1b\x55\x74\x02\x65\xab\x43\xc8\xd9\x19\x21\x9d\xf5\x2d\x6f\x25\x75\x00\xed\x6e\xed\xd2\x01\x33\x00\x4a\xdc\x40\xbe\x56\xef\xf3\x6f\x42\xa4\x7c\xfe\xfc\x36\x76\x75\x62\xf8\x0d\x15\x73\xa0\x95\xf2\x44\xa0\x6f\x08\xfd\xa2\xf1\x30\xe8\xd7\x33\x86\xa6\x16\x5f\x80\xcd\x31\xab\xbf\xad\x9a\xb5\xf9\xbd\x69\xdb\x47\xc5\x55\xa4\x53\x65\xf3\xef\xdc\xb7\x75\x85\xad\x93\x6f\x6e\x80\xcd\x27\x3e\x67\x1e\x57\x98\x11\x9f\x60\x1e\x08\x8e\xa5\x07\x06\x0b\xc5\x3c\x69\x02\xe5\x12\x46\x57\x61\x03\x65\x73\x4c\xb7\xc1\x56\x5c\xfd\xe9\x61\x0b\x28\x25\x82\x3a\xea\x26\xb6\xbd\x57\xf8\x19\xcc\xca\x4f\x4f\xca\x1e\xac\xdd\x98\x35\x90\x35\x00\xdc\x47\xb8\x3a\x65\xb6\x15\xb8\xda\x8f\xd9\xfb\x28\x9a\xb4\x12\x4a\x7d\xa9\xe4\x0f\x25\xc7\xc5\x7f\x6b\x4d\x4d\x07\x79\xd6\x92\x5f\xab\x96\x3b\xc8\x3b\x2d\x79\x67\x0f\x79\xde\x92\x5f\xab\x5c\x3b\xc8\xbb\x2d\xf9\xb5\x0e\xa7\x83\xbc\xd7\x92\xf7\xf6\x90\xf7\x5b\xf2\x6b\xb7\x55\x3b\xc8\x8b\x96\xbc\xd8\x43\x5e\xb6\xe4\xd7\x6a\xc1\x2e\xfc\x21\x6d\x02\xad\xdd\xc3\xeb\x32\xc3\x12\x05\xb7\x72\x70\xe9\xf4\xe2\xa2\x28\xab\x0a\xa8\xea\xa8\x40\x59\xa9\x34\x9f\x9b\x0f\xf3\x9b\xe4\xcd\x3f\x97\xc9\xdf\x39\x00\xbb\xec\x6c\xdf\x51\xf9\xdb\x65\x8f\x6f\xa2\x3c\xdb\x5b\xf9\xee\x45\xef\x3d\x44\xbe\x7b\x71\xdb\x47\xdd\x76\xf6\xef\xa8\xbc\xfb\xe3\x95\xdf\x9f\x36\xde\x8f\x57\x9e\xb6\x95\x77\x6e\xa3\xbc\xff\xe3\x95\xe7\x7b\x23\x2f\x6e\x15\xb0\x5d\xca\xb2\xc3\x38\xef\xdf\x46\x79\xf9\xe3\x95\x5f\xe2\x3c\xbb\xd5\x26\x75\xab\xde\xf4\xdb\x68\xbf\x3f\xe9\xe9\xed\xf6\xd8\x3d\xb4\x6f\x0e\x68\xd6\x1a\x37\x4a\x24\xe9\xc5\xc3\x47\x48\xcd\x7f\x09\x02\x95\x6f\xd6\x95\x3f\x04\x81\x30\x6a\x5e\x89\xeb\x39\xa8\x7c\x49\x6f\xfe\x08\x85\xdf\xfa\x9e\x4c\xd7\x50\xed\xda\xf0\x2c\x55\x27\x77\x6b\xa9\xd7\x58\xea\x96\x4e\xfc\x79\x2d\xa5\xac\x31\xb5\x3a\x91\xf8\xf3\x9a\x2a\x1a\x53\xf9\x4f\xce\x5f\xc6\x1b\x53\xd9\xbc\xcf\xbe\xbf\xa6\x6e\x7b\x81\x66\xcd\xf2\xb6\xc7\x3a\xa1\xb0\xf0\xf7\x0f\x28\xe9\x6e\xb2\xc6\xdd\xd3\x1a\xd4\xbe\x83\x72\x0f\xed\xf2\x6e\x6b\x97\xbc\xcf\x5e\xf2\xf7\xb4\x06\xf1\x7b\xee\x26\x76\xb8\x61\x88\x12\x64\x41\xa7\x89\xb9\xa7\x36\xf2\xd6\xb3\xb0\x6e\x05\x8e\x77\x9f\xb9\xe8\xee\x6b\xce\xff\x4a\xca\xe8\x6e\x98\x7f\x9f\xfd\xe4\xef\x6b\xce\xff\x4c\xd2\x38\xc4\xb2\xef\x99\x35\xb6\x1c\x53\x60\x77\x70\x4c\xc1\x17\xc4\x78\x92\x13\x2c\x15\x17\xf3\x63\x88\x42\x98\x10\x4b\x37\x50\x9e\x13\x04\x20\x75\xb0\xf9\x98\x02\x2a\xef\x46\x3e\x49\xd2\x7c\x04\x19\xb2\x6b\xd7\xfb\x28\x04\x88\x51\x98\x01\xa0\x3c\x45\x19\x8c\xd3\x19\xa0\x31\xfc\xc8\x53\x0a\x10\x06\x54\x78\x5a\x62\xe3\xea\x00\x73\x13\x32\x2c\x1d\xc1\xb0\xe6\x82\x51\xe0\x46\x6b\x1e\xb4\x9e\x7d\x9f\x9e\x9c\xc4\xa9\x56\xf1\x28\xb5\xf9\xa9\x20\x64\x7e\x16\xdb\xc0\x38\x1d\xcc\x68\x7d\xe8\xbb\xf9\xd0\x09\xca\x6f\x60\x54\xa0\x98\x50\x21\x17\x38\x70\x03\x89\xb9\x47\x00\x4b\xee\x29\x0c\x81\x92\xc4\xd3\xe0\x1b\x15\xde\xc2\x28\x5a\x1b\x45\xf7\x35\xea\xc0\x07\xdf\xca\xd7\x42\x4b\xc5\xb1\x61\xca\xc1\xdc\x77\x0d\x0e\xc0\xe3\x58\x52\x1a\x86\xc2\x78\x20\xa5\xbf\xf2\x40\x7f\x71\x90\xbc\x2b\x9f\x3b\x31\xe1\xa6\xa3\xa2\x54\x39\x4c\x29\x89\x1d\xd7\x65\x98\xcb\x50\x63\xc5\x84\xc6\x9e\xcb\x9d\x40\xeb\x90\x10\x4f\x2e\x14\x45\x18\x99\xf9\x03\xc9\x8f\x23\xa8\xdf\x91\xb3\xf9\x34\x0c\xd1\x45\x14\xc7\x28\x00\xa4\xe2\x0b\x75\x65\xd1\x08\x32\xf8\xce\x8f\x24\xbb\xc2\xd6\xc9\x37\x55\xc6\x6a\x7e\xcd\xf3\x59\x7a\x91\x1c\x1d\x99\x2c\x9d\xd4\xbf\x37\x11\xd6\x3f\xbf\x59\xbe\x30\x5a\xbd\xac\xfa\x9f\xcd\x43\xe6\x3f\xca\xb8\x7b\x4c\x3b\x2d\xed\x1e\x59\x07\xdc\xee\x51\xcb\xe7\xdf\x6e\x18\x5b\xb1\x7d\xf7\xa8\x8a\x3b\xbb\x07\x35\x8f\xce\xba\x0d\xab\x7f\x6b\xa7\xe3\xe8\xee\x20\x6d\xdb\x48\x77\x4b\xb5\x5e\xb6\xec\x30\xf0\x26\x8f\xd6\x37\x0e\x3a\xb9\x73\xc3\x4b\xd8\x8d\xdc\xff\x07\x00\x00\xff\xff\x9e\x07\x70\xb4\x58\x56\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 22104, mode: os.FileMode(420), modTime: time.Unix(1521624985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql": dbDrop_all_tablesSql,
	"db/migrations/0001_initial.sql": dbMigrations0001_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"drop_all_tables.sql": &bintree{dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_initial.sql": &bintree{dbMigrations0001_initialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

