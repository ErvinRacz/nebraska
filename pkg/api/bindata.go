// Code generated by go-bindata.
// sources:
// db/drop_all_tables.sql
// db/sample_data.sql
// db/migrations/0001_initial.sql
// db/migrations/0002_event_data.sql
// db/migrations/0003_longer_team_names.sql
// db/migrations/0004_rename_coreos_action.sql
// DO NOT EDIT!

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x8e\x85\x30\x0c\x43\xf7\x9c\xa2\xf7\xe0\x30\x91\x09\x19\x88\x28\x6d\xd5\x04\x34\xdc\x7e\x24\xc4\x6c\xbe\xbe\x14\xf6\x2f\xb6\x63\xcf\xbd\xb6\xe4\x98\xb2\x24\xfd\x49\xf2\xab\xe6\x96\x5c\xb0\x27\x86\x31\x66\x19\x87\xaf\xc8\x61\xd2\x2d\x60\xd0\x5a\x56\x86\x6b\x2d\x01\xd9\xc0\x1b\x16\x09\x28\xae\x5d\xaa\x11\xf8\x85\x22\xaf\x28\x45\x72\x40\x2d\xbd\x1e\x2d\x7a\x43\x8b\x39\x0a\x47\xe9\xfe\x31\x32\x87\x1f\x6f\x45\xe9\x7d\x49\x1f\x06\xb4\xaa\x79\xed\x57\x70\x25\xa7\x14\x27\xbf\x5a\x94\xff\x06\xa3\x45\xd9\xf5\x54\x8f\x3c\x9f\x39\xe9\x19\x81\xa6\x0c\xde\xb2\x5a\x24\x3f\xc3\x31\xc1\x84\x76\x5d\xfa\x5d\x89\x8d\xc3\x5f\x00\x00\x00\xff\xff\xda\x81\x6e\xb2\xa2\x02\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 674, mode: os.FileMode(436), modTime: time.Unix(1569837699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbSample_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5b\x53\xdb\x48\xd3\xbe\xcf\xaf\x98\xaa\xf7\xc2\x49\xc5\x63\xe6\x7c\x60\x6b\x2f\x80\x84\x24\xbb\x24\x1b\x96\x64\x53\xd9\x1b\x6a\x0e\x3d\xa0\x20\x4b\x5e\x49\x36\x81\x5f\xff\x95\x64\x30\x26\x84\x0f\xd9\xe4\xc0\xae\x53\x31\xf2\xc8\xad\xe9\xe7\x99\xee\x9e\xee\x99\x31\xc6\xe8\x55\x91\x35\x99\xcb\x51\x74\x8d\x7b\xf4\x08\x63\xf4\x0c\x92\x9b\xe6\x0d\x6a\xc0\x8d\x91\x2b\x22\x9a\xd6\x50\xa1\xc7\x2e\x8e\xb3\x62\xa3\x7b\x7f\xf2\x28\x2b\x6a\xa8\x1a\x94\x15\x4d\x39\xff\xde\xe3\x2c\x0e\x51\xe1\xc6\xf0\x04\xcd\x5c\x3e\x85\x1a\x3d\x1e\x44\x63\xb9\x60\x31\x60\xcb\xa8\xc0\x42\xd0\x88\x9d\x70\x09\xfb\x18\x0d\xd7\x8e\x7b\xc6\xed\x60\x88\x06\x71\xde\xe1\xe0\xc9\x2f\xd7\x9e\xdb\x76\x5b\xa3\xc7\xed\x9f\xf6\xc1\x43\x54\x43\xa8\xa0\x19\x76\x1d\x1e\x66\x71\xa9\xa7\x4e\xab\xf6\x51\xc6\x73\xca\x2c\x8b\x42\x6b\x23\x0d\x0b\x04\x64\x72\x56\x39\x00\x29\x29\x4f\xb4\xeb\xae\x8f\x5a\x4f\x7e\xe9\xb8\xd8\x29\x2b\xf8\xe3\x00\xb9\xc9\x24\xcf\x82\x6b\xb2\xb2\xb8\xa6\xe2\x52\xfb\x15\x03\x43\x14\xa1\x0e\x55\x36\x69\x9b\xbf\xa6\x2d\x58\xc5\x0c\x75\x0a\x47\xea\x12\x16\x3e\x02\xb6\x8e\x38\x6c\xb5\xd7\x0a\xa4\x8a\x41\xea\x56\xd1\x79\xe7\xed\xd5\x5e\x56\x4c\x3f\xa3\x54\x56\x68\xec\xea\x3a\x9b\x01\xaa\xa1\x9a\x41\x85\x22\x4c\xf2\xf2\x6c\x0c\x45\x53\xaf\x02\x6d\x19\xc3\xc4\x85\x13\x77\x04\x57\xea\x31\xef\x44\xb0\x46\x60\x09\xd6\x63\x41\x29\x60\xaf\x03\xc7\x9e\x83\xa7\x22\x69\xc7\x54\xcb\x23\x1d\xa2\x81\x56\x6a\xc4\x47\xa4\xed\xfa\xb8\x69\x26\xf5\xe6\xc6\xc6\x74\x12\x5d\x03\xa3\x0a\x72\x70\x35\x8c\x52\xee\x9a\xe0\x2a\x9c\xb7\x08\x46\x05\x34\x1b\x6e\x1c\x95\xc0\xd3\xba\xda\xb8\x90\xde\x68\xc5\x2f\xbe\x77\x38\xa9\xca\x38\x0d\x2d\x73\x87\x17\x4f\x3a\x3a\x1f\x0c\xd1\x9b\xf7\x7b\x7b\x43\x34\xa0\x52\x58\xa5\x85\x34\xad\x48\x2e\x7e\x3f\xd5\x5b\xb0\xbd\x57\xfd\xf5\xea\x99\xfd\xcd\xa7\xb3\xd7\xe5\x6f\xb0\x2d\xcf\x7e\x3f\xfa\xb5\xbd\xcf\x08\xb5\x98\x18\xcc\x08\x22\x64\x93\xb2\x4d\xae\x47\x92\x71\xcb\x3b\xe9\x5e\x83\x70\x17\x55\x9c\x6b\xcf\x93\x06\x9c\x12\xb3\x58\x68\x30\xd8\x11\xc9\x70\x22\x86\x8b\xc8\xa4\x8f\x5e\x2e\x51\x25\xee\x45\x95\x58\x91\x2a\x49\xa8\xb1\x94\x75\x22\xd5\xc9\x89\x7b\xba\xbd\x71\xfe\x6e\xa6\xff\x78\xfb\xe1\x28\x8b\x1f\x9f\x9e\x88\x83\xe2\xd9\xc1\x4d\xaa\xd4\x26\x95\x9b\xcc\x8e\x28\x31\x4c\xa9\x6f\x46\x55\x60\x8e\x2b\x4e\x19\xf6\xd6\x58\x2c\x08\x07\xec\xbc\xd4\x98\xa8\x40\xa4\x74\x1a\x5c\x60\x17\x54\x19\x62\x46\x64\x6d\xaa\x2e\xa4\x57\xa1\x4a\x6b\x4d\xb5\xa0\xa2\x15\xf1\xff\xf0\xb4\xff\xe7\xcb\xb7\xe6\xf3\x36\xff\x73\xf7\xfd\xa7\x9d\xb8\x95\xf8\xe9\xfe\xc7\x1d\xf6\xfc\x2b\x56\x45\xec\x26\x51\x23\xc3\xad\x35\xf6\x9b\x51\x25\xb8\x34\xc4\x58\x86\x83\x8b\x06\x0b\x65\x1c\x76\xc4\x7b\x0c\xde\x46\x02\xc4\x42\x70\xe2\x92\x2a\x2a\xef\x43\xd5\x5c\x7a\x25\xaa\x8c\x12\x5c\xea\x0e\xec\xc9\x1b\xe1\xc6\xe5\xef\x1f\xff\xfa\xfb\xfd\x0b\xf6\xa1\x3c\x88\xfb\x2f\xe9\xdb\x97\x6f\xcf\x2b\xb9\x75\x9d\x2a\x89\x28\xdf\x94\x72\x93\x91\x51\x4b\x33\xfd\x76\x54\x31\x23\x22\xb3\xd2\x63\x49\x4d\xc2\x22\x2a\x8d\xad\xb5\x80\xad\xb0\xca\x44\x02\x10\x2d\xb9\xa4\x8a\xd9\xfb\x50\x35\x97\x5e\x85\x2a\xa3\x98\x90\x72\x6e\x55\x2c\x3f\x2e\xdf\xcf\x66\x45\xf9\x91\x4b\x3b\xc9\xd8\x6e\xe1\x0e\x36\x3e\xd7\x47\x4d\xb6\xec\x80\x16\x53\x82\x18\xdf\xa4\x74\x93\x92\x91\x61\xd2\x1a\xb9\x2e\x55\xe1\xd8\x15\x05\xe4\x4b\xb3\x0e\x51\x44\x09\x17\xdb\x69\x41\x60\x61\x89\xc0\xd6\x29\xc0\x29\x0a\x25\xa5\xe5\x91\xfa\x2e\x56\xd4\x8d\xf3\x39\xb4\x57\xff\xa3\xc2\xdb\xa8\x96\x87\x92\x5a\x44\x64\x6b\xf5\x5c\x8c\x98\xa2\x4c\xd0\xde\xfa\x0d\x51\xbf\x70\x79\x17\x0e\xca\x8c\x37\x81\x59\x2c\x89\x6c\xbd\x43\x70\x6c\x40\x69\xec\xa8\x23\xc0\x83\x12\x34\x74\xf6\xe5\xa1\x71\x1d\x8a\x14\x74\xe2\xfc\x76\x14\x82\x73\xf1\xc3\x51\x38\xa3\x1d\xe1\xed\x68\xb4\x33\xad\xd0\x8e\x62\x13\x83\xc0\x5c\x12\xed\x1d\x58\x0a\xd0\x51\xeb\xf2\xc9\xf1\x1c\x06\x4d\xde\x9b\xff\x67\x30\xa4\x96\x2b\xc1\xe8\xe5\x3a\x5f\xc0\x38\xaa\xca\xe9\xa4\xbe\x42\x61\x1d\x8b\xe0\x35\xc1\x5c\x7b\xc0\x82\x30\x85\x8d\xe4\x09\xfb\x14\xa3\xf2\x5c\x68\xef\x3b\x4b\x3a\x58\xd8\xd4\x6e\x59\xa1\x2b\xbf\x41\x21\x9f\xd6\x0d\x54\x6d\xf2\x92\x5c\x5e\xc3\x10\x35\xd5\x74\xf1\x7e\xd1\x34\x78\x3e\xad\xca\x09\x6c\x6c\x43\x95\xcf\xd3\x3c\x2a\xd1\x38\x2b\xa6\x0d\xb4\x82\x6c\x88\x06\x8a\x2c\x35\xdc\x42\x90\x25\x8a\xad\x42\x50\x2f\x87\xb9\x83\x20\x9e\x80\x12\x61\x09\x8e\x51\x73\x2c\xbc\xb0\xd8\x6b\xe6\x30\x33\x2e\x50\xeb\x42\x0a\x31\xb4\x7d\x6d\x5f\x18\xeb\xdb\xaa\x1c\x97\x0d\x44\xd4\x8d\x3b\xba\x88\x4c\xf5\x10\xb5\x36\xe4\x9a\x70\x8c\xfc\xf4\xa8\x46\xf5\x04\x42\x96\xb2\xd0\x36\x9f\x95\xd3\x0a\x85\xb2\x48\xd9\xd1\xb4\xea\x52\xd1\xc1\x75\x16\xbf\x03\x97\x9a\x33\xb1\x92\xb1\xf5\x72\xda\x3b\xb8\x94\xde\x50\xa2\x0c\xc1\xc0\x95\xc3\xc2\x68\xdb\xe6\x12\x0e\x8b\x64\x8d\x05\x43\xbc\xb1\x9d\xe3\x6f\x5d\xba\xcc\xbb\xca\x85\x93\x1a\x85\x69\x55\x41\xd1\xa0\x08\x33\xc8\xcb\x49\x9b\x2c\xa3\xd3\xb2\x3a\xe9\x6a\x9b\xac\xbe\x24\x39\xa2\x54\xc1\x3f\x53\x28\x9a\xfc\xec\x3e\xe6\xd8\xce\x35\xbc\x07\x85\xc2\xd2\x95\x82\x67\xaf\x88\xf1\x65\xd8\x29\x2b\x28\xeb\x43\x37\x77\xb6\x05\x93\x9e\x79\xaa\x80\x01\x96\x3a\x19\x2c\xb4\x96\xd8\x30\x9d\xb0\x49\xc4\x53\xea\xc0\xfa\xd8\x79\xca\xa4\xac\x9b\xac\xa8\x1b\x97\xe7\xed\xc7\x6e\xce\x37\x3b\xdb\xa6\x79\x0d\xe4\xb5\x79\x76\xf6\xb7\xfc\xf3\xef\xd3\xf3\x67\x7b\x67\xef\xe2\xc9\xcb\x4f\x7f\x6c\x7c\x3c\x4a\xbf\xff\x55\xb0\x3f\x8f\xde\xbf\x2e\x4f\xc2\xaf\x57\x2c\x5e\x23\x73\x30\x58\xfa\xff\xd5\x24\x9d\x33\x66\x3a\x6e\x7a\x95\x22\xfd\x30\x47\xe9\x58\xf0\x89\xe3\xd6\x8a\xb0\x00\x13\xb0\x31\x60\xb0\x8a\xc9\xd2\x14\x98\x12\x41\xdd\x82\x79\xff\xfd\x8b\x62\xfc\x56\xd2\xe3\x89\x3e\x3f\x7b\xfa\xf4\x69\x29\xd3\xf6\xab\xd3\xe7\xf9\xab\xe2\xdd\xd6\xb8\xd6\x1b\xc5\xa7\xe2\xe4\xf3\xb4\x29\x36\xf6\x5f\xad\x8c\x79\x91\x6d\x53\x35\x9f\xeb\xd7\x9a\x5d\xbe\x0e\x99\x59\x1b\xa4\x88\x14\x73\x2e\x04\x16\x0e\x2c\x36\x2e\x32\x2c\x83\xe2\x51\xaa\xa8\xc2\x3c\x39\xf9\x0a\xe4\x83\x9d\x99\xb1\x2f\x3e\x9e\x7f\xd6\xaf\x3e\x3f\x7d\x97\x7f\xfa\xc7\xbf\xa9\xa3\x2e\x0b\x25\xcb\xf2\xc3\x3f\xdb\xe7\x61\xa7\xda\xdb\xdd\x13\xa7\x3b\xc7\xfb\x6b\x0c\xf3\x3c\x6b\xb6\x4c\x8b\xae\x92\xec\x57\x1b\xf4\xc3\xac\x85\x89\x49\xa6\x80\x29\x73\x12\x8b\xe8\x22\x76\x9a\x02\x16\x4a\x86\x40\x95\x32\x44\x98\x5b\x30\xdb\x97\xef\x6b\x71\x7a\x9c\x9d\xa7\xb3\x99\x17\xe3\xa3\xfc\xe9\x07\xf7\xc6\x7d\xe0\x7f\xed\xed\x7f\x3c\xad\x3f\xd0\x17\x2f\xdf\xbc\xfc\xed\xcd\x24\xec\x1e\x89\xd5\x30\x2f\xa5\xbf\x86\x49\x26\x3a\xdf\xea\x95\xe4\xf7\xc3\x6c\x43\x14\x5a\x04\x89\x21\x39\xde\x86\x07\xdb\xce\xe4\x0c\x4b\x13\xa3\x37\x92\x41\x34\xb7\x8d\x33\x3d\xb0\xe7\xfb\x3b\x7b\x2f\x3e\x8d\x21\x7d\x2c\x9e\x6f\xb8\xdd\x30\xd9\xf9\xb4\x47\xdf\xd4\x47\xd3\x97\xc7\xfb\x2f\x3e\x91\xf7\x3b\x63\x99\xc8\x6b\x6b\x56\xc0\x7c\x3d\x8f\xb5\x94\x6b\x6d\x56\x49\x39\x1e\x61\x8c\x0e\xdc\x78\x92\xc3\xb5\x15\x16\xfa\x0d\xd6\x5e\xbc\x12\xd2\x10\x22\xb1\x49\x82\x60\xa1\x98\xc6\x9e\x73\x8f\x3d\x68\xe2\x34\x35\x41\x98\x79\xc6\x72\xa3\xfb\xb6\xf5\xb7\x69\xdd\x20\x57\x5c\xeb\xbb\x29\x51\x7d\x5c\x9e\xa2\xe6\x18\x50\x70\x13\xe7\xb3\x3c\x6b\x32\xa8\x51\x99\xd0\x1b\xf0\x95\xab\x4f\xdc\x7d\xd7\x66\x3a\x7c\xcd\xd9\x04\x86\x68\x5a\xe5\x43\x94\xb2\x1c\xe6\x70\x67\x50\xd5\x1d\xd4\x25\x95\xae\x23\x96\xd4\xca\x36\xf8\x61\x99\x0c\xc3\x94\x82\xc4\x36\x6a\x82\x13\xa4\x64\xa8\x0d\x31\xd8\x34\x18\x22\xb1\x54\x17\x9d\x9e\x9e\x8e\x4e\xb2\x62\x56\xe6\x27\xa3\xac\xec\x6a\x9e\x06\xea\xe6\x90\x8e\xc8\xa8\x33\xde\xc5\x45\x2f\x3a\xbf\x03\x28\xca\x94\xd5\xc9\x89\x16\x14\xbf\x3f\x28\x7e\x09\x8a\xff\x4c\x50\x86\x10\xe1\xdb\x68\x20\x93\xd5\xf7\x07\x25\x2e\x41\x89\x9f\x09\xca\x5d\xbc\x5a\x50\xe6\xfe\xa0\xe4\x25\x28\xb9\x2e\xa8\xcb\x52\x6c\x29\x66\x84\x32\x2f\xab\x2f\x31\x0c\x2f\xe1\x7f\x11\x40\x12\x70\xe6\x45\x8b\xc7\x84\xdb\xf1\x0c\x5e\xbb\xb6\xb0\xe9\x2a\x37\x42\x76\x76\x08\xe9\xad\x6f\xb7\x02\xd6\xc3\x12\xbe\x2d\xae\xe0\x59\x04\x70\xe6\x0e\x8f\x5a\x2a\xe5\xfe\x47\x88\xb5\xbb\xbb\xab\xe0\xea\xe5\xb6\xdf\x16\x57\xbc\x78\xdd\x85\x6b\xd7\x65\x79\x56\x1c\x75\xc0\xb6\xb6\x56\x05\xd6\xcb\xca\xef\xa8\x6f\x7c\x70\x4e\x19\x1f\xee\x08\xd4\x6d\x8d\x18\xd1\xf3\x1d\x86\xa6\x35\x3e\x85\xba\xc1\xec\xb2\xf5\xa2\xa8\x9e\xef\x0d\xd4\x43\xd4\xde\x45\xa1\x74\x75\xf3\x23\xeb\xeb\xbe\x9c\xf5\xb2\xb8\x3b\x38\xd3\x44\x0b\xa6\x84\xc3\x8c\x68\x82\x85\x37\x02\x5b\x05\x11\x1b\xc7\x94\x8d\xde\x49\xc2\xe8\x97\x9c\x81\xab\x1b\x4c\x6f\xe3\xac\xbd\xfb\xdf\xe6\xcc\x53\x4a\x0c\xe5\xee\x2e\x3b\xdb\x77\xf8\x19\xcc\xba\xab\xad\xae\x56\x5e\x2e\xa0\x17\x7c\x1d\x9c\xc5\x02\xee\x55\x30\x7f\x2f\xae\x7a\x45\xea\x3b\xb8\x0a\x17\xaf\xbb\xb8\xba\x88\x1e\xe8\x8a\xb3\x45\xcb\xbf\x92\xbb\x5e\x51\xf3\x0b\xee\xba\xd2\xa2\x08\x17\xe9\x42\x36\x59\x0a\xc2\x97\xb7\x3a\xaf\xa3\x64\xd4\xfe\xbb\x51\xb8\xf7\x90\x67\x4b\xf2\x37\x2a\xc2\x1e\xf2\x7c\x49\x9e\xaf\x21\x2f\x96\xe4\x6f\x54\x67\x3d\xe4\xe5\x92\xfc\x8d\x2a\xbe\x87\xbc\x5a\x92\x57\x6b\xc8\xeb\x25\xf9\x1b\x3b\x06\x3d\xe4\xcd\x92\xbc\x59\x43\xde\x2e\xc9\xdf\x28\x76\xfa\xd8\x0f\x59\x36\xa0\x1b\xcb\xd3\x7d\x9e\x70\xcd\x04\xd7\xb1\x41\xba\x6c\x84\xf4\x56\x2b\x3c\x5c\xae\x11\xaf\xea\x96\x8b\x1a\xe3\xe2\xc8\x43\x97\xf7\x2e\xae\x17\x17\xf3\x1d\xa4\xc5\xc7\xeb\xee\xd3\x3b\xfc\xf5\x49\x27\x7e\xa0\xf2\xab\xc5\xee\xef\xa2\x3c\x5b\x5b\xf9\xfe\x75\xe1\x03\x64\xbe\x7f\xfd\x37\x44\xfd\x32\xaa\x1f\xa8\x7c\xff\x3a\xef\xbb\x29\xbf\xbe\xd9\xa8\x9f\xaf\x3c\x5d\x56\x9e\xaf\xa2\xbc\xfe\xf9\xca\x8b\xb5\x99\x37\x2b\x39\x6c\x9f\x8c\xf8\x7e\x36\xaf\x57\x51\xde\xfe\x7c\xe5\xaf\xd9\x3c\x5b\x69\x92\x5a\x69\xa5\xe3\xfb\x68\xbf\xbe\xd1\xd3\xd5\xe6\xd8\x87\xa6\xfd\x6a\xc5\x64\x9f\xe2\xe6\x0b\xed\x5d\x68\xb2\x59\xd6\x9c\x2d\x34\x5e\x28\x51\x94\xa7\x8f\x9f\x20\xd7\xa0\x26\x1b\x03\x3a\x2f\x0b\x40\x83\x69\x13\x06\x08\xb7\x92\x50\xcd\x5c\x8e\x06\x1c\x1d\x97\xd3\xea\x62\x9b\x54\xac\xbc\xe8\xda\x37\xd0\xf4\xad\x94\xaf\xe5\x56\xdf\x16\xa9\x5a\x20\x95\xdd\x20\xfe\x77\x91\x52\xb6\x80\xca\xe7\xdb\xdf\xff\x5d\xa8\x66\x01\x55\xfc\xc7\xed\x97\x89\x05\x54\x36\x5f\x67\x78\xb8\x50\x17\x21\xb5\x6e\x5c\x33\xad\x0f\x8f\xb3\xba\x29\xab\xaf\x20\x5f\x1e\xb1\x5e\x2c\x5c\x8d\xf7\x4f\x48\x48\xef\x42\x23\xd7\x44\x83\x96\x57\x90\x1e\x20\x2e\xb5\x2a\x2e\xfb\x90\x47\x49\xaf\x89\x06\x89\x07\x3e\x4c\xec\xfe\xc0\x10\x25\xa8\x86\x50\x16\xf1\x81\x62\x14\x4b\x9b\xdd\xfd\x12\x1c\xf5\x90\x6d\x51\xae\x0b\xe7\xdf\x12\x32\xfa\x03\xd3\x0f\x79\x9c\xf4\xba\x70\xfe\x35\x41\xe3\x3e\xc8\x7e\x56\xd4\x80\x19\x14\x0d\x7a\x3c\xa9\x60\x96\x95\xd3\xfa\x70\x71\xf8\x01\xaa\xaa\xac\x0e\x43\x19\x61\x78\xc5\x44\x16\x6f\xee\x50\x77\x4f\x38\x6c\xce\x26\xf3\x4d\xea\x1a\x72\x08\xcd\xd5\xe9\xa9\xb5\xca\x38\x68\x46\x59\x44\xa9\x2a\xc7\x4b\x8f\x47\xd0\xa0\xd3\x63\xa8\xda\x8b\x51\xd7\xf0\x2b\xe2\xdd\x46\x14\x34\xa3\x0a\xea\x69\xde\xa0\x5f\x11\xb9\xf5\xa8\x15\xfb\x06\x47\xad\xb4\x21\x51\x59\x41\xb0\x75\xc2\xcc\x0f\x51\x1b\x13\x13\xb6\xd2\x3b\xc5\xbd\x07\x1b\xfc\xe0\xab\x47\xad\x50\x87\x7f\xab\x28\x9b\x63\xa8\x50\x7d\xe3\xfe\x10\x25\x80\x1c\xa5\x0a\x00\x35\x25\xaa\x60\x5c\xce\x00\x8d\xe7\x3b\x57\x3f\xe9\x98\x15\x24\x4f\x8d\x0a\x16\x47\x19\x3c\x16\x31\x31\x6c\xb9\x61\x38\x08\xc3\x28\x88\x18\x82\xf0\x4b\xe7\x5c\x36\x37\x36\xf2\x32\xb8\xfc\xb8\xac\x9b\x4d\x43\xc8\xfc\x97\x25\x11\xc6\xe5\xe1\x8c\x5e\xfe\x4e\x65\x71\xd1\x8b\xca\xef\x00\xca\x3b\x66\x5c\x12\x06\x7b\xe9\x2d\x16\x8a\x00\xb6\x42\x39\x0c\xde\x59\xa2\x02\xe8\xe8\xd2\x0a\xa0\xe8\x25\x28\xba\x2e\xa8\x7b\x1e\x06\x71\x3a\x98\x60\x9d\xc0\x91\x39\x8e\x85\x96\x11\x7b\x50\x02\x5b\x4a\x53\x32\x51\x81\xb5\xdd\xaa\xe7\xd2\xe1\x9d\xab\xdf\xc0\xf4\xb5\xe7\x5e\x96\x70\xd7\x59\x77\xea\x38\x73\xce\x62\x2e\x25\xc3\xc2\xa6\x80\x1d\x33\x01\x2b\x29\xb8\x0f\x21\x11\xa2\xec\x95\xa2\x08\xa3\x38\xdf\x75\x7e\x77\x0c\x28\x77\x0d\xd4\x0d\xaa\x9b\x69\x4a\xe8\x34\xcb\x73\xe4\x01\xb9\xfc\xd4\x9d\xd5\xa8\x0d\x09\x3f\x72\xbf\xb9\x2f\x67\xbd\x06\xe6\xc9\x2f\x8f\xfe\x2f\x00\x00\xff\xff\x4d\x55\xfa\x96\xb0\x3c\x00\x00")

func dbSample_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSample_dataSql,
		"db/sample_data.sql",
	)
}

func dbSample_dataSql() (*asset, error) {
	bytes, err := dbSample_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/sample_data.sql", size: 15536, mode: os.FileMode(436), modTime: time.Unix(1569837739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x41\x93\xe3\x26\x13\x3d\x5b\xbf\x82\xda\x8b\xed\xfa\x3c\x55\xf3\x6d\xed\xce\x65\x92\x3d\xe5\x9c\x5b\xce\x54\x1b\x5a\x36\x65\x04\x0a\x20\x67\x3c\xbf\x3e\x85\x06\x49\x48\x42\xb2\xd6\x76\x2a\x53\xb9\x5a\xaf\xa1\x79\xfd\x5e\xab\x91\x9f\x9e\xc8\xff\x0a\x71\x30\xe0\x90\xfc\x51\x66\xd9\xd3\x13\xf9\x1d\xf7\x06\xec\x09\x88\x65\x47\x2c\x20\xcb\x40\x3a\x34\x84\x83\x83\x3d\x58\x24\xaa\x7d\x8e\x8e\x38\x51\xe0\xbb\x56\x48\x7e\x25\xeb\xca\xb1\xf5\x6b\x96\x31\x83\x7e\x35\x7c\x73\xa8\xac\xd0\x8a\x88\x9c\x28\xed\x08\xbe\x09\xeb\x2c\xf9\x52\x55\x82\x3f\x69\x6b\xcb\x2f\x1d\xd8\xc1\x5e\x22\x71\x08\x05\xd9\x64\x2b\xc1\x89\x07\x91\xd2\x88\x02\xcc\x85\x9c\xf0\x42\x38\xe6\x50\x49\x57\x3f\xa0\x07\x54\xe8\x53\xa6\xe7\x6f\x9b\xed\x2e\x5b\x29\x28\x90\x9c\xc1\xb0\x23\x98\xcd\xd7\xef\xdb\x7a\x3f\x55\x49\x49\xd8\x11\xd9\x89\x6c\x6a\xc0\x2f\x3f\xc8\x7a\xbd\x25\x95\x12\x7f\x56\xb8\xcb\x56\x1f\x7b\x73\xea\x6c\x7d\x0c\xeb\xa0\x28\xdd\x7b\xbb\x13\xab\x8c\x41\xe5\x68\xfb\xac\x5d\x35\xdb\x0e\x33\xaf\x2c\x1a\x7b\x53\xea\x3e\xf2\x6a\xfa\x2d\x68\x78\x04\x8b\xcc\xa0\x6b\x63\xbf\x3f\x8f\x63\x03\xe4\x23\xf2\x9e\x53\xef\xb2\x95\x2f\x10\x6d\x8e\xd8\x6e\x64\x30\x47\x83\x8a\xa1\x0d\x15\x14\x7c\x4b\xb4\x22\x1c\x25\x3a\x24\x0c\x2c\x03\x8e\x31\x69\x42\x71\x7c\xf3\x90\xc0\x5b\x58\x77\x44\x2b\x94\xa5\x14\x0c\x9c\x57\xd1\xdd\xba\x48\x91\x13\x91\xba\xcb\x56\x1c\x2d\x33\xa2\xac\xb7\x73\xf8\xe6\xfe\x45\xb6\xbc\x32\xea\x22\xb7\xe4\xec\x88\x4f\x76\x3b\xd6\x5e\x09\xec\x04\x07\xbc\x89\x20\x77\x29\x7d\x35\xdc\x88\x98\xfa\xc1\x0f\xf2\xec\x41\x67\x34\xb5\x8f\x3b\x85\x26\x24\xda\x80\x5a\x32\x2b\x23\xa3\x88\x97\x84\xa8\x8d\xec\xd0\xb9\x90\xd8\xab\xd6\xff\x9f\x9f\x27\x4a\x62\xc5\x7b\xe4\x96\x1a\x75\x04\x7b\x6c\x7f\x7a\xf9\x76\xaf\xcc\x23\xd9\xcd\xd6\xaf\x27\xcf\xf9\x32\x6e\xfa\x6b\xee\x48\xe0\x2b\x51\x4f\xa6\x0d\x6a\x4b\x81\xdd\x2c\x7b\x3c\xa3\x72\x31\x45\x2d\x7c\x5d\x6a\xeb\x84\xb2\x0e\xa4\x5c\x7b\x96\x8e\x46\x17\x7e\xb7\x64\x8d\xdb\x28\x0f\xb5\x47\xf8\xfa\xfd\x65\xc0\xb2\x42\xe4\x96\x02\x2f\x84\x22\x7b\xad\x25\x82\x6a\xa3\x72\x90\xd6\x13\x20\x2c\xe5\x28\x1d\x4c\x02\xb8\xb0\xfe\xe0\xb4\x84\x8b\xd4\xc0\xe9\x1e\xd8\x49\xe7\xf9\x08\xef\x4c\xdd\xf3\x0a\x74\xe0\x5f\x46\xd4\x8a\x83\x02\x57\x19\xa4\xc6\x42\x5f\x6b\xbd\xcc\xa3\x80\xf7\xbe\xc0\xfa\x38\x8e\xc0\xa5\x50\x73\x90\x7b\x54\x15\x7c\x3a\xab\xa8\xd6\xcb\xcb\x5b\xe8\x40\x2e\xdd\x2e\x63\x61\x1d\x41\x29\x94\xff\xf8\x1b\xd6\xf3\xa4\xa5\x36\x49\xfc\x67\xb2\xe6\xb0\x22\xd7\x0b\xe1\x47\x9e\x90\x49\xd3\x9e\x87\xc6\x1e\x75\xe9\xae\x52\x0d\xff\x33\x35\x3a\x18\x5d\x95\xb7\x4d\x12\x77\xbe\xec\x62\x96\x8d\x96\x52\x57\x8e\x0a\x45\x4b\xa3\x0f\x06\xad\x4d\xbb\xb7\xa7\x6f\x2d\x05\xbb\xd0\xaa\xe4\xe0\xd0\x52\x54\xfe\x40\x3c\xe9\xe2\x44\x98\x85\x1c\x69\xa1\x39\x2e\x0d\xd0\x79\x2e\x18\xd2\xa3\xae\xcc\xf2\xe4\xda\x71\xb5\xe1\xe9\x5b\xfd\xfe\x08\x4f\x4b\x34\x42\x73\x2a\x94\x43\x73\x06\xd9\xeb\xa0\x43\x32\x27\x42\x5a\x7a\xc3\xf3\x02\xde\x5a\x46\x4a\x34\x01\xef\x5f\xb9\x78\x40\x33\xb5\xea\x44\x54\x78\x1f\xf7\x88\xae\x8f\xa4\x2b\xb7\x24\xd9\x41\xc4\x43\x46\xc2\x87\x1a\x32\x38\x24\x65\xc8\xd6\x3c\x0f\x34\x64\x63\xb6\x6e\xdb\x91\x1f\xeb\x77\xa5\x62\xcd\x74\x15\xdb\x2b\x36\x66\xe0\x59\xf0\x8e\x54\x51\x12\xa1\xd0\x3d\xa4\xf1\x8d\x87\x84\x26\x2f\x6a\x1d\xb8\xaa\x69\x18\x16\x8d\x00\x19\x67\x36\x6a\xdd\xcf\xfd\x56\x3c\xd7\xa7\x05\x8b\x07\x82\x28\x70\x26\x9d\xc1\xc4\x7e\xdb\xe8\x78\x8f\x1e\x03\x1f\xc1\x60\xbb\x6c\x25\xc1\x3a\x5a\xef\x44\x73\x6d\x1a\x5b\xfd\xfc\xc2\xf5\x3a\xc1\x41\x07\x03\x6a\x9c\xe0\x00\x94\x3c\x7b\x38\x72\x0a\xd7\x4d\xce\x1f\xbf\xff\x54\xf3\x6d\x0b\x30\x10\x69\xca\x8a\x9d\xa6\xa7\x7c\xf8\x50\x53\xd7\x2e\x4b\x59\xba\xb1\xdf\xa4\xa3\x63\x87\x6d\xa2\x13\xee\x48\x3f\xc1\xb4\xbb\xd3\x9a\x8c\x96\xd9\xbe\x2e\x8c\x19\xec\xb6\x34\xac\x39\xf8\x35\xf3\xd2\xa3\xb0\x4e\x9b\xcb\x9c\x89\x47\xb2\x9e\x53\xd7\x43\x0d\xf5\xdf\x51\xd6\xdc\x14\x3d\x59\x92\x85\x7a\x19\x86\x2d\x97\xcc\x30\x72\x52\x35\xf5\xad\x8e\xd6\x17\xf3\x19\xa1\x34\x37\xfa\xde\x78\xe1\x47\x3a\xb4\xbe\xd4\x89\x27\xf1\x20\xd8\xbb\xf9\x4c\xb7\xfb\x8f\x0b\xe6\x4c\x16\x77\xdd\x93\x0c\x9e\x85\xae\xd2\x77\x52\x7f\xbb\x35\x46\x1b\xca\xfc\xa8\x38\xf8\x58\xf0\x89\xa5\xda\x15\xcf\xaf\x35\x1a\xff\xa2\xe5\xe2\x32\xfb\xd5\x92\x72\x0d\x05\x98\x17\x67\x00\x5d\x95\x62\xc0\xf5\x52\x1c\x7f\x8a\x63\x4e\x9c\x85\x9b\x6d\x52\xf7\x54\x9d\x49\xb0\x36\x25\x4f\x8b\x67\x34\x7e\xe3\xc4\xb3\xdb\xc6\x8b\x4f\xd0\x83\x6e\x9a\x75\xbb\xd8\x29\xa1\x2f\xd7\x77\x52\x55\x5d\x8d\xaf\x6a\xa6\x83\x46\xfd\x6a\x1a\xd4\x9b\xb0\xa7\x61\x7d\x3d\x27\x3f\x73\xd2\x66\xa9\xbd\x04\x76\x92\xc2\xd6\x7d\xe8\xfe\x6f\x2b\x89\x8a\xa4\x16\xb9\x5a\x9a\xde\xcc\xd2\xa5\xb5\x23\x11\x05\x35\xf9\xf1\x3f\x2f\xbf\xe9\xbf\x54\x96\x71\xa3\xcb\x66\x42\xc8\x9b\xbf\x4b\xea\x6f\xc4\x61\xf9\xd7\x34\xe4\xe3\x23\xfa\x3c\x26\xd6\xf2\x3c\xb2\xa1\x69\x1e\xd5\xff\xea\x74\x05\x1b\x38\x9b\x47\x05\xbf\xcc\x83\x5a\x55\x2f\x83\x35\xb7\xa3\x85\xe8\xe5\x24\x4d\xbd\xbd\xe7\xa3\xa2\xd6\xbe\x00\x78\xad\xa2\x8d\x6b\x16\x95\x33\x61\x9b\x36\xee\xef\x00\x00\x00\xff\xff\x23\xe7\x35\x9a\x04\x1c\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 7172, mode: os.FileMode(436), modTime: time.Unix(1569834936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0002_event_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8b\x1a\x4f\x10\xc5\xef\xf3\x29\xde\x41\x50\xf9\x8f\xa2\xff\xe4\x10\xf0\x64\x58\x59\x16\x42\x72\x08\x9e\x43\x3b\x5d\x8e\x4d\x7a\xaa\x3b\x55\x35\x26\x7e\xfb\xd0\xad\xbb\x28\x49\x2e\x03\x3d\xf5\xde\x9b\xdf\x9b\xea\xc5\x02\xff\x0d\xa1\x17\x67\x84\x7d\x6e\x9a\xc5\x02\x2f\x1c\x2c\xb8\x08\xef\xcc\xd5\x17\xbb\x33\xb1\xc1\x2e\x99\xb4\x1c\xb7\xde\x23\xdc\x34\xf4\x36\xc2\xd9\xc5\x91\x14\xe1\x08\x3b\x11\xcc\x1d\x22\x21\x28\x68\xc8\x76\x69\xee\x3f\xf3\xd5\x9c\xd1\x40\x6c\x1f\xa9\x0f\xdc\x3c\x7d\xc1\xa7\xed\xe7\xe7\xfd\xf6\x79\x87\x1c\x73\xaf\x3f\x22\x26\x93\xe6\x50\x87\x00\x4a\x22\x27\x03\xfd\x0a\x6a\x8a\x99\x52\xa4\xce\x10\x3c\x8e\x92\x86\x2b\xc1\xb7\x4a\x10\xc3\x10\x0c\xeb\x79\x01\xb8\x5a\xab\x9d\x95\xc4\x10\xd8\xd2\xbd\x78\x56\x9e\x2d\x84\x74\x8c\xd6\xc2\x93\x76\x12\xb2\x85\xc4\xf3\x5b\x95\xb7\x84\xd9\xbb\x16\xab\x16\xd3\x17\x56\x73\xdc\x11\x84\x72\x12\x23\x0f\xc7\x20\x91\x24\xf0\xa3\x04\xee\xcb\x79\xcc\xbe\x94\x54\xa3\xbc\x9c\xce\xdb\x87\x90\x75\x8b\xe9\xbe\xce\x05\x27\xa7\xc8\x92\x3a\x52\xad\x41\x1e\x2e\xe7\x18\xc8\x23\xbb\xee\xbb\xeb\xe9\x0f\xf7\xff\x77\x08\x8a\x31\xf7\xe2\x3c\x79\x58\x42\x37\x8a\x94\x3d\x74\x27\xc7\x4c\x11\x67\x12\x0d\x89\x1f\x13\xd6\x37\x80\xa7\xf4\x93\x63\x72\xbe\xf0\x46\x67\xa4\xf6\x0f\xfd\xfb\x7b\xe0\x57\x2a\x38\x91\x70\x26\x0f\x1d\xbb\xc2\x7e\x1c\x63\xbc\x3c\x1a\x3f\xac\x56\x57\x67\x85\x8d\xf1\x55\xba\xc4\x2d\xaa\x4b\x43\x8e\x54\x7e\x35\xb2\xd4\x95\x90\xc7\xe1\x52\x36\x55\xcb\x2d\xa7\xf3\x4d\x8d\x23\xf6\x08\xc7\x4d\x43\xec\x37\xcd\x64\xb2\xf9\xfb\x35\xda\xb1\x6f\x1e\x26\xa5\x61\xf3\x3b\x00\x00\xff\xff\x2e\x82\xee\x9e\xd9\x02\x00\x00")

func dbMigrations0002_event_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0002_event_dataSql,
		"db/migrations/0002_event_data.sql",
	)
}

func dbMigrations0002_event_dataSql() (*asset, error) {
	bytes, err := dbMigrations0002_event_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0002_event_data.sql", size: 729, mode: os.FileMode(436), modTime: time.Unix(1568801926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0003_longer_team_namesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x28\x49\x4d\xcc\x55\x80\x08\x24\xe7\xe7\x94\xe6\xe6\x29\xe4\x25\xe6\xa6\x2a\x94\x54\x16\xa4\x2a\x94\x25\x16\x25\x67\x24\x16\x69\x18\x1a\x18\x68\x5a\x73\x71\x21\x1b\xe3\x92\x5f\x9e\x47\xba\x41\x46\xa6\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\x92\xc6\xdf\x09\x8e\x00\x00\x00")

func dbMigrations0003_longer_team_namesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0003_longer_team_namesSql,
		"db/migrations/0003_longer_team_names.sql",
	)
}

func dbMigrations0003_longer_team_namesSql() (*asset, error) {
	bytes, err := dbMigrations0003_longer_team_namesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0003_longer_team_names.sql", size: 142, mode: os.FileMode(436), modTime: time.Unix(1569582100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0004_rename_coreos_actionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x48\xce\x2f\x4a\xcd\x2f\x8e\x4f\x4c\x2e\xc9\xcc\xcf\x53\x28\x4a\xcd\x4b\xcc\x4d\x55\x28\xc9\x57\x48\xcb\x49\x2c\x49\x4e\x2c\x82\x4a\x58\x73\x71\x21\x1b\xe2\x92\x5f\x9e\x87\x6a\x0c\xaa\x72\x24\x73\x50\xcc\xb7\xe6\x02\x04\x00\x00\xff\xff\xcf\x20\x82\x03\x8b\x00\x00\x00")

func dbMigrations0004_rename_coreos_actionSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0004_rename_coreos_actionSql,
		"db/migrations/0004_rename_coreos_action.sql",
	)
}

func dbMigrations0004_rename_coreos_actionSql() (*asset, error) {
	bytes, err := dbMigrations0004_rename_coreos_actionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0004_rename_coreos_action.sql", size: 139, mode: os.FileMode(436), modTime: time.Unix(1569831352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql":                      dbDrop_all_tablesSql,
	"db/sample_data.sql":                          dbSample_dataSql,
	"db/migrations/0001_initial.sql":              dbMigrations0001_initialSql,
	"db/migrations/0002_event_data.sql":           dbMigrations0002_event_dataSql,
	"db/migrations/0003_longer_team_names.sql":    dbMigrations0003_longer_team_namesSql,
	"db/migrations/0004_rename_coreos_action.sql": dbMigrations0004_rename_coreos_actionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"drop_all_tables.sql": {dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": {nil, map[string]*bintree{
			"0001_initial.sql":              {dbMigrations0001_initialSql, map[string]*bintree{}},
			"0002_event_data.sql":           {dbMigrations0002_event_dataSql, map[string]*bintree{}},
			"0003_longer_team_names.sql":    {dbMigrations0003_longer_team_namesSql, map[string]*bintree{}},
			"0004_rename_coreos_action.sql": {dbMigrations0004_rename_coreos_actionSql, map[string]*bintree{}},
		}},
		"sample_data.sql": {dbSample_dataSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
