// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/drop_all_tables.sql (781B)
// db/sample_data.sql (15.768kB)
// db/migrations/0001_initial.sql (7.125kB)
// db/migrations/0002_event_data.sql (729B)
// db/migrations/0003_longer_team_names.sql (142B)
// db/migrations/0004_rename_coreos_action.sql (139B)
// db/migrations/0005_default_team_id.sql (333B)
// db/migrations/0006_initial_application.sql (4.03kB)

package api

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x42\x5b\x27\x9f\x20\x5b\xd1\xb1\x77\x10\x9e\x69\xc6\x21\xa2\x50\x82\x48\xa7\xf5\xed\x8b\xfc\xb4\x43\xd0\x80\x9e\xf5\xf1\x23\xc5\xc7\xa9\xd7\x96\x1c\x63\xe1\x24\x87\xc4\xdf\x62\x6e\xc9\x19\xe7\x44\x30\xc2\xc4\xfb\xdd\xbf\xc8\x62\xdc\x2d\x60\xd0\x5a\x11\x82\x4b\xd5\x80\x6c\xa0\x13\x66\x0e\xa8\x43\x81\x13\x7a\x06\x6d\x50\xd2\x11\xaa\x5c\x02\x6a\xee\x75\x69\xd1\x3f\x44\xcd\xa1\x14\x8d\xf7\x8b\x65\x73\xf8\xb2\x55\x9a\xb7\x6f\xe9\xa9\x41\x3e\x8a\x79\xed\x6b\x50\xc5\x17\x56\xcf\xbe\xb6\x68\xfe\x1b\x18\x45\x4a\x2e\x17\xf1\xa8\xe7\x23\xcf\xfc\x08\x21\x8f\x05\x74\x2a\x62\x91\x7e\x82\x63\x84\x71\x3e\xcb\xdc\x6f\x2b\xb1\xfd\x6e\x18\xd2\x27\xcf\xa0\xf5\x8e\xdb\x95\xff\xe2\xb7\xce\xe9\xea\x68\xa2\xf3\xdf\x83\x26\x24\xad\x3a\xdc\xcb\x79\x4a\x1f\xef\x2f\xae\xa3\x76\xae\xf6\x7c\x49\x3f\x01\x00\x00\xff\xff\xe6\x1e\x65\x85\x0d\x03\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 781, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0xcf, 0xbe, 0xfb, 0xd5, 0xe3, 0xea, 0xab, 0xec, 0x78, 0x43, 0x41, 0x2, 0x31, 0xfc, 0x52, 0x9a, 0x8b, 0x30, 0x84, 0xc8, 0xab, 0x83, 0x9c, 0x5b, 0x64, 0xf8, 0xbe, 0xbc, 0xfd, 0x0, 0x97}}
	return a, nil
}

var _dbSample_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5b\x53\xdb\x48\xd3\xbe\xcf\xaf\x98\xaa\xf7\xc2\x49\xc5\x63\xe6\x7c\x60\x6b\x2f\x80\x2c\x49\x76\x49\x36\x2c\xc9\xa6\xb2\x37\xd4\x1c\x5a\xa0\x20\x4b\x8e\x24\xdb\x81\x5f\xff\x95\x64\x63\x44\x08\x1f\xb2\xc9\x81\x5d\xa7\x62\xe4\x91\x7a\xa6\x9f\x67\x7a\x7a\xba\x67\x46\x18\xa3\x97\x79\x5a\xa7\x2e\x43\xd1\xd5\xee\xd1\x23\x8c\xd1\xb3\xb2\x98\xb4\xbf\x90\x8b\x11\x22\x4a\x73\x34\x4e\x4f\x4a\x57\xa7\x45\x8e\xca\x62\x5a\xa7\x39\x54\xed\x93\xab\xfb\x84\x10\x75\x9c\x2e\x2a\x3a\x76\x93\x49\x96\x86\xf6\xf1\x51\xf5\x29\x7b\x14\x21\x83\x1a\x50\x52\x16\x63\x74\x52\x16\xd3\x49\xf5\xcb\xb5\xb2\x70\xea\xf2\x1c\xb2\xeb\x85\x13\x17\xce\xdc\x09\x5c\x2f\xec\xd4\xfc\xcb\x0d\x05\xe4\x71\x84\xc4\x4d\xb3\xfa\xb8\x06\x37\x3e\x4e\xe3\x8d\xc6\x9b\xf2\x85\xdc\xb3\xc5\x93\x6d\x09\x72\x79\x44\xd3\x0a\x4a\xf4\xd8\xc5\x71\x9a\x6f\xb5\xdf\x4f\x1e\xa5\x79\x05\x65\x8d\xd2\xbc\x2e\x16\xcf\x3d\x4e\xe3\x10\xe5\x6e\x0c\x4f\xd0\xcc\x65\x53\xa8\xd0\xe3\x41\x34\x96\x0b\x16\x03\xb6\x8c\x0a\x2c\x04\x8d\xd8\x09\x97\x60\x1f\xa3\xe1\xda\x71\xcf\xb8\x1d\x0c\xd1\x60\xa9\xda\xe0\xc9\x2f\xd7\xea\x6d\x9a\xad\xd0\xe3\xe6\x4f\x53\xf1\x10\x55\x10\x4a\xa8\x87\x68\x09\xa1\xd3\x52\xab\x55\x53\x95\xf1\x9c\x32\xcb\xa2\xd0\xda\x48\xc3\x02\x01\x99\x38\xab\x1c\x80\x94\x94\x27\xb4\x6d\xae\x8f\x5a\x4f\x16\x5c\xec\x15\x25\xfc\x79\xd4\xe5\xf6\x9a\x8a\x9d\xf2\x2b\x06\x86\x28\x42\x15\xca\x74\xd2\x14\x7f\x4d\x5b\xb0\x8a\x19\xea\x14\x8e\xd4\x25\x58\xf8\x08\xd8\x3a\xe2\xb0\xd5\x5e\x2b\x90\x2a\x06\xa9\x1b\x45\x17\x8d\x37\x57\x07\x69\x3e\xfd\x8c\x92\xa2\x44\x63\x57\x55\xe9\x0c\x50\x05\xe5\x0c\x4a\x14\x61\x92\x15\xe7\x63\xc8\xeb\x6a\x1d\x68\x5d\x0c\x4b\x63\xba\x52\x8f\x79\x27\x82\x35\x02\x4b\xb0\x1e\x0b\x4a\x01\x7b\x1d\x38\xf6\x1c\x3c\x15\x89\x76\x4c\x35\x3c\xd2\x21\x1a\x68\xa5\x46\x7c\x44\x9a\xa6\x4f\xeb\x7a\x52\x6d\x6f\x6d\x4d\x27\xd1\xd5\x30\x2a\x21\x03\x57\xc1\x28\xc9\x5c\x1d\x5c\x89\xb3\x06\xc1\x28\x87\x7a\xcb\x8d\xa3\x12\x78\x5a\x95\x5b\x4b\xe9\xad\x46\x7c\xf9\xdc\xf1\xa4\x2c\xe2\x34\x34\xcc\x1d\x2f\x6b\x3a\xb9\x18\x0c\xd1\xeb\x77\x07\x07\x43\x34\xa0\x52\x58\xa5\x85\x34\x8d\x48\x26\xfe\x98\xeb\x1d\xd8\x3d\x28\xff\x7e\xf9\xcc\xfe\xee\x93\xf3\x57\xc5\xef\xb0\x2b\xcf\xff\x38\xf9\xb5\xb9\xcf\x08\xb5\x98\x18\xcc\x08\x22\x64\x9b\xb2\x6d\xae\x47\x92\x71\xcb\x5b\xe9\x5e\x9d\x70\x17\x55\x9c\x6b\xcf\x13\x0d\x38\x49\x98\xc5\x42\x83\xc1\x8e\x48\x86\x13\x62\xb8\x88\x4c\xfa\xe8\x65\x87\x2a\x71\x2f\xaa\xc4\x9a\x54\x49\x42\x8d\xa5\xac\x15\x29\xcf\xce\xdc\xd3\xdd\xad\x8b\xb7\x33\xfd\xe7\x9b\xf7\x27\x69\xfc\xf0\xf4\x4c\x1c\xe5\xcf\x8e\x6e\x52\xa5\xb6\xa9\xdc\x66\x76\x44\x89\x61\x4a\x7d\x33\xaa\x02\x73\x5c\x71\xca\xb0\xb7\xc6\x62\x41\x38\x60\xe7\xa5\xc6\x44\x05\x22\xa5\xd3\xe0\x02\x5b\x52\x65\x88\x19\x91\x8d\xa9\x5a\x4a\xaf\x43\x95\xd6\x9a\x6a\x41\x45\x23\xe2\x3f\xf1\xe4\xf0\xaf\x17\x6f\xcc\xe7\x5d\xfe\xd7\xfe\xbb\x8f\x7b\x71\x27\xe1\xf3\xc3\x0f\x7b\xec\xb7\xaf\x58\x15\xb1\xdb\x44\x8d\x0c\xb7\xd6\xd8\x6f\x46\x95\xe0\xd2\x10\x63\x19\x0e\x2e\x1a\x2c\x94\x71\xd8\x11\xef\x31\x78\x1b\x09\x10\x0b\xc1\x89\x4b\xaa\xa8\xbc\x0f\x55\x0b\xe9\xb5\xa8\x32\x4a\x70\xa9\x5b\xb0\x67\xaf\x85\x1b\x17\x7f\x7c\xf8\xfb\x9f\x77\xcf\xd9\xfb\xe2\x28\x1e\xbe\xa0\x6f\x5e\xbc\xb9\x28\xe5\xce\x75\xaa\x24\xa2\x7c\x5b\xca\x6d\x46\x46\x0d\xcd\xf4\xdb\x51\xc5\x8c\x88\xcc\x4a\x8f\x25\x35\x09\x16\x51\x69\x6c\xad\x05\x6c\x85\x55\x26\x12\x80\x68\xc9\x25\x55\xcc\xde\x87\xaa\x85\xf4\x3a\x54\x19\xc5\x84\x94\x0b\xab\x62\xd9\x69\xf1\x6e\x36\xcb\x8b\x0f\x5c\xda\x49\xca\xf6\x73\x77\xb4\xf5\xb9\x3a\xa9\xd3\xee\x00\xb4\x98\x12\xc4\xf8\x36\xa5\xdb\x94\x8c\x0c\x93\xd6\xc8\x4d\xa9\x5a\x06\x0e\x9d\x59\x87\x28\xa2\x84\x8b\xcd\xb4\x20\xb0\xb0\x44\x60\xeb\x14\xe0\x24\x0a\x25\xa5\xe5\x91\xfa\xd6\x57\x54\xb5\xf3\x19\x34\x57\xff\xa3\xc2\xdb\xa8\xba\x5d\x49\x2d\x22\xb2\xb1\x7a\x2e\x46\x4c\x51\x26\x68\x6f\xfd\x86\xa8\x9f\xbb\xbc\x0b\x07\x65\xc6\x9b\xc0\x2c\x96\x44\x36\xa3\x43\x70\x6c\x40\x69\xec\xa8\x23\xc0\x83\x12\x34\xb4\xf6\xe5\xa1\x76\x2d\x8a\x24\xe8\x84\xf3\xdb\x51\x08\xce\xc5\x0f\x47\xe1\x8c\x76\x84\x37\xbd\xd1\xcc\xb4\x42\x3b\x8a\x4d\x0c\x02\x73\x49\xb4\x77\x60\x29\x40\x4b\xad\xcb\x26\xa7\x0b\x18\x34\xf1\xde\xfc\x3f\x9d\x21\xb5\x5c\x0b\x46\xaf\xa1\xf3\x05\x8c\x45\x84\x7a\x85\xc2\x3a\x16\xc1\x6b\x82\xb9\xf6\x80\x05\x61\x0a\x1b\xc9\x13\xec\x93\x18\x95\xe7\x42\x7b\xdf\x5a\xd2\xd1\xca\xa6\xf6\x8b\x12\x5d\x8d\x1b\x14\xb2\x69\x55\x43\xd9\x04\x2f\x89\xcb\x2a\x18\xa2\xba\x9c\xae\xbe\x97\x45\x83\xdf\xa6\x65\x31\x81\xad\x5d\x28\xb3\x45\x98\x47\x25\x1a\xa7\xf9\xb4\x86\x46\x90\x0d\xd1\x40\x91\x4e\xc1\x2d\x04\x59\xa2\xd8\x3a\x04\xf5\x1a\x30\x77\x10\xc4\x13\xa0\x44\x58\x82\x63\xd4\x1c\x0b\x2f\x2c\xf6\x9a\x39\xcc\x8c\x0b\xd4\xba\x90\x84\x18\x9a\xb6\x76\x97\xc6\xfa\xa6\x2c\xc6\x45\x0d\x11\xb5\xfd\x8e\x96\x9e\xa9\x1a\xa2\xc6\x86\x5c\x1d\x4e\x91\x9f\x9e\x54\xa8\x9a\x40\x48\x93\x34\x34\xc5\xe7\xc5\xb4\x44\xa1\xc8\x93\xf4\x64\xba\xc8\x43\x06\xd7\x59\xfc\x0e\x5c\x6a\xce\xc4\x5a\xc6\xd6\x6b\xd0\xde\xc1\xa5\xf4\x86\x12\x65\x08\x06\xae\x1c\x16\x46\xdb\x26\x96\x70\x58\x24\xd6\x58\x30\xc4\x1b\xdb\x0e\xfc\x9d\xcb\x21\xf3\xb6\x74\xe1\xac\x42\x61\x5a\x96\x90\xd7\x28\xc2\x0c\xb2\x62\xd2\x04\xcb\x68\x5e\x94\x67\x6d\x6e\x93\x56\x97\x24\x47\x94\x94\xf0\x69\x0a\x79\x9d\x9d\xdf\xc7\x1c\x9b\xb9\x86\xf7\xa0\x50\x58\xba\x96\xf3\xec\xe5\x31\xbe\xa0\xf0\x72\xa6\x72\x8b\xd1\xb6\xa2\xd2\x33\x4f\x15\x30\xc0\x52\x27\x06\x0b\xad\x25\x36\x4c\x27\xd8\x24\xc4\x53\xea\xc0\xfa\xd8\x0e\x95\x49\x51\xd5\x69\x5e\xd5\x2e\xcb\x9a\x9f\xed\xa4\x6f\xf6\x76\x4d\xfd\x0a\xc8\x2b\xf3\xec\xfc\x1f\xf9\xd7\x3f\xf3\x8b\x67\x07\xe7\x6f\xe3\xd9\x8b\x8f\x7f\x6e\x7d\x38\x49\xfe\xf8\x3b\x67\x7f\x9d\xbc\x7b\x55\x9c\x85\x5f\xaf\x68\xbc\xc6\xe6\x60\xd0\xf9\xff\xd5\x28\x9d\x33\x66\x5a\x72\x7a\xe5\x22\x3d\x41\x47\xe9\x58\xf0\x09\xc7\x8d\x1d\x61\x01\x26\x60\x63\xc0\x60\x15\x13\x4b\x93\xc0\x94\x08\xea\x16\xd0\x87\xef\x9e\xe7\xe3\x37\x92\x9e\x4e\xf4\xc5\xf9\xd3\xa7\x4f\x0b\x99\xec\xbe\x9c\xff\x96\xbd\xcc\xdf\xee\x8c\x2b\xbd\x95\x7f\xcc\xcf\x3e\x4f\xeb\x7c\xeb\xf0\xe5\xda\xa0\x57\xf1\x36\x55\x8b\xd9\x7e\x93\xf9\xe5\x36\xcc\xcc\xda\x20\x45\xa4\x98\x73\x21\xb0\x70\x60\xb1\x71\x91\x61\x19\x14\x8f\x52\x45\x15\x16\xf1\xc9\x57\x30\x1f\xed\xcd\x8c\x7d\xfe\xe1\xe2\xb3\x7e\xf9\xf9\xe9\xdb\xec\xe3\x27\xff\xba\x8a\xba\xc8\x95\x2c\x8a\xf7\x9f\x76\x2f\xc2\x5e\x79\xb0\x7f\x20\xe6\x7b\xa7\x87\x1b\x74\xf4\x22\x70\xb6\x4c\x8b\x36\x99\xec\x97\x1e\xf4\x04\xad\x85\x89\x89\x4c\x02\xa6\xcc\x49\x2c\xa2\x8b\xd8\x69\x0a\x58\x28\x19\x02\x55\xca\x10\x61\x6e\x01\x6d\x5f\xbc\xab\xc4\xfc\x34\xbd\x48\xce\x67\x5e\x8c\x4f\xb2\xa7\xef\xdd\x6b\xf7\x9e\xff\x7d\x70\xf8\x61\x5e\xbd\xa7\xcf\x5f\xbc\x7e\xf1\xfb\xeb\x49\xd8\x3f\x11\xeb\x81\xee\x84\xc0\x86\x49\x26\xda\xe1\xd5\x2b\xd0\xef\x09\xda\x86\x28\xb4\x08\x12\x43\xe2\x78\xe3\x23\x6c\x33\x9d\x33\x2c\x4d\x8c\xde\x48\x06\xd1\xdc\xd6\xd3\xf4\xc8\x5e\x1c\xee\x1d\x3c\xff\x38\x86\xe4\x43\xfe\xdb\x96\xdb\x0f\x93\xbd\x8f\x07\xf4\x75\x75\x32\x7d\x71\x7a\xf8\xfc\x23\x79\xb7\x37\x96\x09\x79\x65\xcd\x1a\xa0\xaf\x07\xb3\x96\x72\xad\xcd\x3a\x71\xc7\x23\x8c\xd1\x91\x1b\x4f\x32\xb8\xb6\xcc\x42\xbf\xc1\x02\x8c\x57\x42\x1a\x42\x24\x36\x89\x20\x58\x28\xa6\xb1\xe7\xdc\x63\x0f\x9a\x38\x4d\x4d\x10\x66\x11\xb6\xdc\x68\xbe\x29\xfd\x7d\x5a\xd5\xc8\xe5\xd7\xda\xae\x0b\x54\x9d\x16\x73\x54\x9f\x02\x0a\x6e\xe2\x7c\x9a\xa5\x75\x0a\x15\x2a\x12\xf4\x1a\x7c\xe9\xaa\x33\x77\xdf\x05\x9a\x16\x5f\x7d\x3e\x81\x21\x9a\x96\xd9\x10\x25\x69\x06\x0b\xb8\x33\x28\xab\x16\x6a\x47\xa5\xeb\x88\x25\xb5\xb2\xf1\x7f\x58\x26\x86\x61\x4a\x41\x62\x1b\x35\xc1\x09\x24\x89\xa1\x36\xc4\x60\x93\xc1\x10\x89\x4e\x72\x34\x9f\xcf\x47\x67\x69\x3e\x2b\xb2\xb3\x51\x5a\xb4\x89\x4f\x0d\x55\x7d\x4c\x47\x64\xd4\x5a\xef\xea\xa2\x17\x9d\xdf\x01\x14\x65\xca\xea\xc4\x89\x06\x14\xbf\x3f\x28\x7e\x09\x8a\xff\x4c\x50\x86\x10\xe1\x1b\x77\x20\x13\xab\xef\x0f\x4a\x5c\x82\x12\x3f\x13\x94\x5b\x7e\x1a\x50\xe6\xfe\xa0\xe4\x25\x28\xb9\x29\xa8\xcb\x7c\xac\xe3\x33\x42\x91\x15\xe5\x97\x18\x86\x97\xf0\xbf\x70\x20\x09\x70\xe6\x45\x83\xc7\x84\xdb\xf1\x0c\x5e\xb9\x26\xbb\x69\xd3\x37\x42\xf6\xf6\x08\xe9\xad\x6f\xbb\x0c\xd6\xc3\x12\xbe\x2d\xae\xe0\x59\x04\x70\xe6\x8e\x11\xd5\xc9\xe7\xfe\x47\x88\xb5\xfb\xfb\xeb\xe0\xea\x35\x6c\xbf\x2d\xae\xb8\xfc\xdc\x85\x6b\xdf\xa5\x59\x9a\x9f\xb4\xc0\x76\x76\xd6\x05\xd6\xcb\xca\xef\x48\x72\x7c\x70\x4e\x19\x1f\xee\x70\xd4\x4d\xa2\x18\xd1\x6f\x7b\x0c\x4d\x2b\x3c\x87\xaa\xc6\xec\xb2\x74\x99\x59\x2f\x36\x08\xaa\x21\x6a\xee\xa2\x50\xb8\xaa\xfe\x91\x49\x76\x5f\xce\x7a\x59\xdc\x1d\x9c\x69\xa2\x05\x53\xc2\x61\x46\x34\xc1\xc2\x1b\x81\xad\x82\x88\x8d\x63\xca\x46\xef\x24\x61\xf4\x4b\xce\xc0\x55\x35\xa6\xb7\x71\xd6\xdc\xfd\x6f\x73\xe6\x29\x25\x86\x72\x77\x97\x9d\x1d\x3a\xfc\x0c\x66\xed\xd5\x4e\x9b\x30\x77\xb3\xe8\x15\x5f\x47\xe7\x31\x87\x7b\x65\xcd\xdf\x8b\xab\x5e\x9e\xfa\x0e\xae\xc2\xf2\x73\x17\x57\x4b\xef\x81\xae\x38\x5b\x95\xfc\x2b\xb9\xeb\xe5\x35\xbf\xe0\xae\x4d\x2d\xf2\xb0\x0c\x17\xd2\x49\xc7\x09\x5f\xde\x6a\x47\x1d\x25\xa3\xe6\xdf\x8d\xe4\xbd\x87\x3c\xeb\xc8\xdf\xc8\x09\x7b\xc8\xf3\x8e\x3c\xdf\x40\x5e\x74\xe4\x6f\xa4\x67\x3d\xe4\x65\x47\xfe\x46\x22\xdf\x43\x5e\x75\xe4\xd5\x06\xf2\xba\x23\x7f\x63\xdb\xa0\x87\xbc\xe9\xc8\x9b\x0d\xe4\x6d\x47\xfe\x46\xb2\xd3\xc7\x7e\x48\xd7\x80\x6e\xac\x51\xf7\xa9\xe1\x9a\x09\x6e\x62\x83\xb4\x6b\x84\xf4\x56\x2b\xec\x1e\xf7\xe8\xe4\x2d\xcb\x1c\x63\x79\xee\xa1\x8d\x7b\x57\xd7\xab\x8b\xc5\x36\xd2\xea\xe7\xf5\xe1\xd3\xdb\xfd\xf5\x09\x27\x7e\xa0\xf2\xeb\xf9\xee\xef\xa2\x3c\xdb\x58\xf9\xfe\x79\xe1\x03\x64\xbe\x7f\xfe\x37\x44\xfd\x22\xaa\x1f\xa8\x7c\xff\x3c\xef\xbb\x29\xbf\xb9\xd9\xa8\x9f\xaf\x3c\xed\x2a\xcf\xd7\x51\x5e\xff\x7c\xe5\xc5\xc6\xcc\x9b\xb5\x06\x6c\x9f\x88\xf8\x7e\x36\xaf\xd7\x51\xde\xfe\x7c\xe5\xaf\xd9\x3c\x5b\x6b\x92\x5a\x6b\xa5\xe3\xfb\x68\xbf\xb9\xd1\xd3\xf5\xe6\xd8\x87\xa6\xfd\x7a\xc9\x64\x9f\xe4\xe6\x0b\xed\x5d\xa8\xd3\x59\x5a\x9f\xaf\x34\x5e\x29\x91\x17\xf3\xc7\x4f\x90\xab\x51\x9d\x8e\x01\x5d\x14\x39\xa0\xc1\xb4\x0e\x03\x84\x1b\x49\x28\x67\x2e\x43\x03\x8e\x4e\x8b\x69\xb9\xdc\x2b\x15\x6b\x2f\xba\xf6\x75\x34\x7d\x33\xe5\x6b\xb1\xd5\xb7\x45\xaa\x56\x48\x65\xdb\x89\xff\x5d\xa4\x94\xad\xa0\xf2\xc5\x1e\xf8\x7f\x17\xaa\x59\x41\x15\xff\x71\xfb\x65\x62\x05\x95\x2d\xd6\x19\x1e\x2e\xd4\x95\x4b\xad\x6a\x57\x4f\xab\xe3\xd3\xb4\xaa\x8b\xf2\x2b\xc8\xbb\x3d\xd6\x8b\x85\xab\xfe\xfe\x09\x01\xe9\x5d\x68\xe4\x86\x68\x50\x77\x05\xe9\x01\xe2\x52\xeb\xe2\xb2\x0f\xb9\x97\xf4\x86\x68\x90\x78\xe0\xdd\xc4\xee\x0f\x0c\x51\x82\x2a\x08\x45\x1e\x1f\x28\x46\xd1\xd9\xec\xee\x17\xe0\xa8\x87\x6c\x8b\x72\x53\x38\xff\x16\x97\xd1\x1f\x98\x7e\xc8\xfd\xa4\x37\x85\xf3\xaf\x71\x1a\xf7\x41\xf6\xb3\xbc\x06\xcc\x20\xaf\xd1\xe3\x49\x09\xb3\xb4\x98\x56\xc7\xab\xc3\x0f\x50\x96\x45\x79\x1c\x8a\x08\xc3\x2b\x26\xd2\x78\x73\x87\xba\xad\xe1\xb8\x3e\x9f\x2c\x36\xa9\x2b\xc8\x20\xd4\x57\xa7\xa7\x36\x4a\xe3\xa0\x1e\xa5\x71\xf1\x22\xdf\x55\xf5\x08\x6a\x34\x3f\x85\xb2\xb9\x18\xb5\x05\xbf\x22\xde\x6e\x44\x41\x3d\x2a\xa1\x9a\x66\x35\xfa\x15\x91\x5b\x8f\x5a\xb1\x6f\x70\xd4\x4a\x1b\x12\x95\x15\x04\x5b\x27\xcc\xe2\x24\xb5\x31\x31\xc1\x56\x7a\xa7\xb8\xf7\x60\x83\x1f\x7c\xf5\xa8\x15\x6a\xf1\xef\xe4\x45\x7d\x0a\x25\xaa\x6e\xdc\x1f\xa2\x04\x20\x43\x49\x09\x80\xea\x02\x95\x30\x2e\x66\x80\xc6\x8b\x9d\xab\x9f\x74\xcc\x0a\x12\x4f\x8d\x0a\x16\x47\x19\x3c\x16\x31\x61\xd8\x72\xc3\x70\x10\x86\x51\x10\x31\x04\xe1\x3b\xe7\x5c\xb6\xb7\xb6\xb2\x22\xb8\xec\xb4\xa8\xea\x6d\x43\xc8\xe2\xf5\x92\x08\xe3\xe2\x78\x46\x2f\x5f\x56\x59\x5d\xf4\xa2\xf2\x3b\x80\xf2\x8e\x19\x97\x08\x83\xbd\xf4\x16\x0b\x45\x00\x5b\xa1\x1c\x06\xef\x2c\x51\x01\x74\x74\xc9\x1a\xa0\xe8\x25\x28\xba\x29\xa8\x7b\x1e\x06\x71\x3a\x98\x60\x9d\xc0\x91\x39\x8e\x85\x96\x11\x7b\x50\x02\x5b\x4a\x93\xc4\x44\x05\xd6\xb6\xab\x9e\x9d\xc3\x3b\x57\x2f\xc2\xf4\xb5\xe7\x5e\x96\x70\xd7\x81\x77\xea\x38\x73\xce\x62\x2e\x25\xc3\xc2\x26\x01\x3b\x66\x02\x56\x52\x70\x1f\x42\x42\x88\xb2\x57\x8a\x22\x8c\xe2\x62\xd7\xf9\xed\x29\xa0\xcc\xd5\x50\xd5\xa8\xaa\xa7\x49\x82\xe6\x69\x96\x21\x0f\xc8\x65\x73\x77\x5e\xa1\xc6\x25\xfc\xc8\xfd\xe6\xbe\x9c\xf5\xea\x98\x27\xbf\x3c\xfa\xbf\x00\x00\x00\xff\xff\xab\x44\x52\xcf\x98\x3d\x00\x00")

func dbSample_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSample_dataSql,
		"db/sample_data.sql",
	)
}

func dbSample_dataSql() (*asset, error) {
	bytes, err := dbSample_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/sample_data.sql", size: 15768, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfa, 0x9d, 0x7d, 0x14, 0xe8, 0xef, 0xa5, 0xa1, 0x66, 0x38, 0xd0, 0x71, 0xd2, 0xbf, 0xb3, 0x74, 0x28, 0xfc, 0x3a, 0x38, 0x1, 0x9d, 0x9, 0xf5, 0x0, 0x1a, 0xbb, 0x62, 0x96, 0x64, 0x8d, 0xdf}}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xc1\x6e\xe3\x36\x10\x3d\x5b\x5f\x41\xec\x25\x36\xea\x00\xe9\x22\xc9\x25\xc5\x9e\x7a\xee\xad\x67\x62\x42\x8e\x6c\xc2\x14\xa9\x92\x94\x1b\xe7\xeb\x0b\xca\x94\x44\x49\x94\xac\xb5\x5d\x34\xe8\xd5\x7a\x43\x0e\xdf\xbc\x37\x1a\xca\x8f\x8f\xe4\x97\x42\xec\x0c\x38\x24\x7f\x96\x59\xf6\xf8\x48\xfe\xc0\x77\x03\xf6\x00\xc4\xb2\x3d\x16\x90\x65\xcc\xa0\x7f\x8c\x1f\x0e\x95\x15\x5a\x11\x91\x13\xa5\x1d\xc1\x0f\x61\x9d\x25\xdf\xaa\x4a\xf0\x47\x6d\x6d\xf9\xed\xad\x05\x3b\x78\x97\x48\x1c\x42\x41\xd6\xd9\x4a\x70\xe2\x41\xa4\x34\xa2\x00\x73\x22\x07\x3c\x11\x8e\x39\x54\xd2\xd5\x0f\xe8\x0e\x15\xfa\x1c\xe8\xf1\x79\xbd\xd9\x66\x2b\x05\x05\x92\x23\x18\xb6\x07\xb3\xfe\xfe\xb2\xa9\xf7\x53\x95\x94\x84\xed\x91\x1d\xc8\xba\x06\xfc\xf6\x83\x3c\x3c\x6c\x48\xa5\xc4\x5f\x15\x6e\xb3\xd5\x79\x6f\x4e\x9d\x25\x4e\x14\x68\x1d\x14\xa5\xfb\x6c\x77\x62\x95\x31\xa8\x1c\x6d\x9f\xb5\xab\x66\x9b\x61\xe6\x95\x45\x63\xaf\x4a\xdd\x47\x5e\x4c\xbf\x05\x0d\x8f\x60\x91\x19\x74\x6d\xec\xcb\xd3\x38\x36\x40\xce\x91\xb7\x9c\x7a\x9b\xad\x7c\x81\x68\x73\xc4\x76\x23\x83\x39\x1a\x54\x0c\x6d\xa8\xa0\xe0\x1b\xa2\x15\xe1\x28\xd1\x21\x61\x60\x19\x70\x8c\x49\x13\x8a\xe3\x87\x87\x04\xde\xc2\xba\x23\x5a\xa1\x2c\xa5\x60\xe0\xbc\x8a\x6e\xd6\x45\x8a\x9c\x88\xd4\x6d\xb6\xe2\x68\x99\x11\x65\xbd\x9d\xc3\x0f\xf7\x1f\xb2\xe5\x95\x51\x17\xb9\x25\x67\x4b\x7c\xb2\x9b\xb1\xf6\x4a\x60\x07\xd8\xe1\x55\x04\xb9\x53\xe9\xab\xe1\x46\xc4\xd4\x0f\x7e\x90\x27\x0f\x3a\xa2\xa9\x7d\xdc\x29\x34\x21\xd1\x06\xd4\x92\x59\x19\x19\x45\xbc\x26\x44\x6d\x64\x87\xce\x85\xc4\x5e\xb5\x7e\x7d\x7a\x9a\x28\x89\x15\x9f\x91\x5b\x6a\xd4\x1e\xec\xbe\xfd\xe9\xf5\xf9\x56\x99\x47\xb2\x9b\xad\x5f\x4f\x9e\xf3\x65\x5c\xf7\xd7\xdc\x92\xc0\x57\xa2\x9e\x4c\x1b\xd4\x96\x02\xbb\x5a\xf6\x78\x44\xe5\x62\x8a\x5a\xf8\x43\xa9\xad\x13\xca\x3a\x90\xf2\xc1\xb3\xb4\x37\xba\xf0\xbb\x25\x6b\xdc\x46\x79\xa8\xdd\xc3\xf7\x97\xd7\x01\xcb\x0a\x91\x5b\x0a\xbc\x10\x8a\xbc\x6b\x2d\x11\x54\x1b\x95\x83\xb4\x9e\x00\x61\x29\x47\xe9\x60\x12\xc0\x85\xf5\x07\xa7\x25\x9c\xa4\x06\x4e\xdf\x81\x1d\x74\x9e\x8f\xf0\xce\xd4\x3d\xaf\x40\x07\x1c\x1c\x50\x2b\x76\x0a\x5c\x65\x90\x1a\x0b\x7d\xad\xf5\x32\x8f\x02\x3e\xfb\x02\xeb\xe3\x38\x02\x97\x42\xcd\x41\x6e\x51\x55\xf0\xe9\xac\xa2\x5a\x2f\x2f\x6f\xa1\x03\xb9\x74\xbb\x8c\x85\xb5\x07\xa5\x50\xfe\xeb\x6f\x58\xcf\x93\x96\xda\x24\xf1\x5f\xc9\x9a\xc3\x8a\x5c\x2e\x84\xc5\x36\x93\xa6\x3d\x0f\x8d\x3d\xea\xd2\x5d\xa5\x1a\xfe\x67\x6a\xb4\x33\xba\x2a\xaf\x9b\x24\x6e\x7c\xd9\xc5\x2c\x1b\x2d\xa5\xae\x1c\x15\x8a\x96\x46\xef\x0c\x5a\x9b\x76\x6f\x4f\xdf\x5a\x0a\x76\xa2\x55\xc9\xc1\xa1\xa5\xa8\xfc\x81\x78\xd2\xc5\x89\x30\x0b\x39\xd2\x42\x73\x5c\x1a\xa0\xf3\x5c\x30\xa4\x7b\x5d\x99\xe5\xc9\x79\x4d\x7d\xea\xc8\xe2\xcf\xf5\xfb\x23\x3c\x2d\xd1\x08\xcd\xa9\x50\x0e\xcd\x11\x64\xaf\x83\x0e\xc9\x9c\x08\x69\xe9\x0d\xcf\x0b\xf8\x68\x19\x29\xd1\x04\xbc\x7f\xe5\xe2\x0e\xcd\xd4\xaa\x13\x51\xe1\x7d\xdc\x23\xba\x3e\x92\xae\xdc\x92\x64\x07\x11\x77\x19\x09\xef\x6a\xc8\xe0\x90\x94\x21\x5b\xf3\xdc\xd1\x90\x8d\xd9\xba\x6d\x47\x7e\xac\xdf\x95\x8a\x35\xd3\x55\x6c\xaf\xd8\x98\x81\x67\xc1\x3b\x52\x45\x49\x84\x42\x77\x97\xc6\x37\x1e\x12\x9a\xbc\xa8\x75\xe0\xaa\xa6\x61\x58\x34\x02\x64\x9c\xd9\xa8\x75\x3f\xf5\x5b\xf1\x5c\x9f\x16\x2c\x1e\x08\xa2\xc0\x99\x74\x06\x13\xfb\x75\xa3\xe3\x2d\x7a\x0c\x7c\x04\x83\x6d\xb3\x95\x04\xeb\x68\xbd\x13\xcd\xb5\x69\x6c\xf5\xf3\x0b\xd7\xeb\x04\x07\xed\x0c\xa8\x71\x82\x03\x50\xf2\xec\xe1\xc8\x29\x5c\x37\x39\x9f\x7f\xff\xa9\xe6\xdb\x16\x60\x20\xd2\x94\x15\x3b\x4d\x4f\xf9\xf0\xae\xa6\xae\x5d\x96\xb2\x74\x63\xbf\x49\x47\xc7\x0e\x5b\x47\x27\xdc\x92\x7e\x82\x69\x77\xa7\x35\x19\x2d\xb3\x79\x5b\x18\x33\xd8\x6d\x69\x58\x73\xf0\x4b\xe6\xa5\x7b\x61\x9d\x36\xa7\x39\x13\x8f\x64\x3d\xa7\xae\xbb\x1a\xea\xff\xa3\xac\xb9\x29\x7a\xb2\x24\x0b\xf5\x32\x0c\x5b\x2e\x99\x61\xe4\xa4\x6a\xea\x5b\x1d\xad\x2f\xe6\x33\x42\x69\x6e\xf4\xbd\xf1\xc2\x8f\x74\x68\x7d\xa9\x13\x4f\xe2\x41\xb0\x77\xf3\x99\x6e\xf7\xe7\x0b\xe6\x4c\x16\x37\xdd\x93\x0c\x1e\x85\xae\xd2\x77\x52\x7f\xbb\x35\x46\x1b\xca\xfc\xa8\x38\xf8\x58\xf0\x85\xa5\xda\x15\xcf\xaf\x35\x1a\xff\xa2\xe5\xe2\x32\xfb\xd5\x92\x72\x0d\x05\x98\x17\x67\x00\x5d\x94\x62\xc0\xf5\x52\x1c\x7f\x8a\x63\x4e\x1c\x85\x9b\x6d\x52\xb7\x54\x9d\x49\xb0\x36\x25\x4f\x8b\x47\x34\x7e\xe3\xc4\xb3\xeb\xc6\x8b\x2f\xd0\x83\xae\x9a\x75\xbb\xd8\x29\xa1\x2f\xd7\x77\x52\x55\x5d\x8d\x2f\x6a\xa6\x83\x46\xfd\x6a\x1a\xd4\x9b\xb0\xa7\x61\x7d\x3d\x27\x3f\x73\xd2\x66\xa9\x77\x09\xec\x20\x85\xad\xfb\xd0\xed\xdf\x56\x12\x15\x49\x2d\x72\xb1\x34\xbd\x99\xa5\x4b\x6b\x4b\x22\x0a\x6a\xf2\xe3\xbf\x52\x7e\xd7\x7f\xab\x2c\xe3\x46\x97\xcd\x84\x90\x37\x7f\x97\xd4\xdf\x88\xc3\xf2\x6f\x69\xc8\xf9\x23\xfa\x3c\x26\xd6\xf2\x3c\xb2\xa1\x69\x1e\xd5\xff\xea\x74\x01\x1b\x38\x9b\x47\x05\xbf\xcc\x83\x5a\x55\x2f\x83\x35\xb7\xa3\x85\xe8\xe5\x24\x4d\xbd\xbd\xe7\xa3\xa2\xd6\xbe\x00\x78\xa9\xa2\x8d\x6b\x16\x95\x33\x61\x9b\x36\xee\x9f\x00\x00\x00\xff\xff\x68\x7f\xaa\x79\xd5\x1b\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 7125, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x34, 0xf7, 0x7a, 0x71, 0x9b, 0x8b, 0x7b, 0xc6, 0x47, 0x8a, 0x1b, 0x3e, 0xb5, 0xb5, 0x2f, 0x29, 0xf5, 0xc3, 0xce, 0x5b, 0x2f, 0xc1, 0xd8, 0xdd, 0x23, 0xa0, 0x20, 0x34, 0x50, 0x6, 0x9f}}
	return a, nil
}

var _dbMigrations0002_event_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8b\x1a\x4f\x10\xc5\xef\xf3\x29\xde\x41\x50\xf9\x8f\xa2\xff\xe4\x10\xf0\x64\x58\x59\x16\x42\x72\x08\x9e\x43\x3b\x5d\x8e\x4d\x7a\xaa\x3b\x55\x35\x26\x7e\xfb\xd0\xad\xbb\x28\x49\x2e\x03\x3d\xf5\xde\x9b\xdf\x9b\xea\xc5\x02\xff\x0d\xa1\x17\x67\x84\x7d\x6e\x9a\xc5\x02\x2f\x1c\x2c\xb8\x08\xef\xcc\xd5\x17\xbb\x33\xb1\xc1\x2e\x99\xb4\x1c\xb7\xde\x23\xdc\x34\xf4\x36\xc2\xd9\xc5\x91\x14\xe1\x08\x3b\x11\xcc\x1d\x22\x21\x28\x68\xc8\x76\x69\xee\x3f\xf3\xd5\x9c\xd1\x40\x6c\x1f\xa9\x0f\xdc\x3c\x7d\xc1\xa7\xed\xe7\xe7\xfd\xf6\x79\x87\x1c\x73\xaf\x3f\x22\x26\x93\xe6\x50\x87\x00\x4a\x22\x27\x03\xfd\x0a\x6a\x8a\x99\x52\xa4\xce\x10\x3c\x8e\x92\x86\x2b\xc1\xb7\x4a\x10\xc3\x10\x0c\xeb\x79\x01\xb8\x5a\xab\x9d\x95\xc4\x10\xd8\xd2\xbd\x78\x56\x9e\x2d\x84\x74\x8c\xd6\xc2\x93\x76\x12\xb2\x85\xc4\xf3\x5b\x95\xb7\x84\xd9\xbb\x16\xab\x16\xd3\x17\x56\x73\xdc\x11\x84\x72\x12\x23\x0f\xc7\x20\x91\x24\xf0\xa3\x04\xee\xcb\x79\xcc\xbe\x94\x54\xa3\xbc\x9c\xce\xdb\x87\x90\x75\x8b\xe9\xbe\xce\x05\x27\xa7\xc8\x92\x3a\x52\xad\x41\x1e\x2e\xe7\x18\xc8\x23\xbb\xee\xbb\xeb\xe9\x0f\xf7\xff\x77\x08\x8a\x31\xf7\xe2\x3c\x79\x58\x42\x37\x8a\x94\x3d\x74\x27\xc7\x4c\x11\x67\x12\x0d\x89\x1f\x13\xd6\x37\x80\xa7\xf4\x93\x63\x72\xbe\xf0\x46\x67\xa4\xf6\x0f\xfd\xfb\x7b\xe0\x57\x2a\x38\x91\x70\x26\x0f\x1d\xbb\xc2\x7e\x1c\x63\xbc\x3c\x1a\x3f\xac\x56\x57\x67\x85\x8d\xf1\x55\xba\xc4\x2d\xaa\x4b\x43\x8e\x54\x7e\x35\xb2\xd4\x95\x90\xc7\xe1\x52\x36\x55\xcb\x2d\xa7\xf3\x4d\x8d\x23\xf6\x08\xc7\x4d\x43\xec\x37\xcd\x64\xb2\xf9\xfb\x35\xda\xb1\x6f\x1e\x26\xa5\x61\xf3\x3b\x00\x00\xff\xff\x2e\x82\xee\x9e\xd9\x02\x00\x00")

func dbMigrations0002_event_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0002_event_dataSql,
		"db/migrations/0002_event_data.sql",
	)
}

func dbMigrations0002_event_dataSql() (*asset, error) {
	bytes, err := dbMigrations0002_event_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0002_event_data.sql", size: 729, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0xe9, 0x46, 0x83, 0xf5, 0x9c, 0x90, 0x5b, 0xa7, 0xd8, 0xdf, 0xb6, 0xb9, 0xf4, 0x9e, 0x1a, 0x6b, 0x5f, 0x66, 0x58, 0x61, 0xb9, 0x54, 0x3c, 0x93, 0x3b, 0xd9, 0x5b, 0xae, 0xf, 0x92, 0x8f}}
	return a, nil
}

var _dbMigrations0003_longer_team_namesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x28\x49\x4d\xcc\x55\x80\x08\x24\xe7\xe7\x94\xe6\xe6\x29\xe4\x25\xe6\xa6\x2a\x94\x54\x16\xa4\x2a\x94\x25\x16\x25\x67\x24\x16\x69\x18\x1a\x18\x68\x5a\x73\x71\x21\x1b\xe3\x92\x5f\x9e\x47\xba\x41\x46\xa6\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\x92\xc6\xdf\x09\x8e\x00\x00\x00")

func dbMigrations0003_longer_team_namesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0003_longer_team_namesSql,
		"db/migrations/0003_longer_team_names.sql",
	)
}

func dbMigrations0003_longer_team_namesSql() (*asset, error) {
	bytes, err := dbMigrations0003_longer_team_namesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0003_longer_team_names.sql", size: 142, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xbb, 0x50, 0xf, 0x77, 0x25, 0x2e, 0xe6, 0x66, 0x6, 0x9c, 0xed, 0x44, 0xb2, 0x8a, 0xa6, 0x3c, 0xe7, 0xef, 0xb2, 0x49, 0x4, 0x81, 0x57, 0xc7, 0x6d, 0x91, 0x47, 0xe, 0xba, 0xb0, 0x57}}
	return a, nil
}

var _dbMigrations0004_rename_coreos_actionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x48\xce\x2f\x4a\xcd\x2f\x8e\x4f\x4c\x2e\xc9\xcc\xcf\x53\x28\x4a\xcd\x4b\xcc\x4d\x55\x28\xc9\x57\x48\xcb\x49\x2c\x49\x4e\x2c\x82\x4a\x58\x73\x71\x21\x1b\xe2\x92\x5f\x9e\x87\x6a\x0c\xaa\x72\x24\x73\x50\xcc\xb7\xe6\x02\x04\x00\x00\xff\xff\xcf\x20\x82\x03\x8b\x00\x00\x00")

func dbMigrations0004_rename_coreos_actionSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0004_rename_coreos_actionSql,
		"db/migrations/0004_rename_coreos_action.sql",
	)
}

func dbMigrations0004_rename_coreos_actionSql() (*asset, error) {
	bytes, err := dbMigrations0004_rename_coreos_actionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0004_rename_coreos_action.sql", size: 139, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0x8b, 0xdd, 0x9e, 0x19, 0x1e, 0xdd, 0xa3, 0xd6, 0x9c, 0x2d, 0x5, 0x74, 0xe6, 0x9c, 0x1, 0xac, 0xde, 0x80, 0x9b, 0xa1, 0xb, 0xa8, 0xe2, 0xa4, 0x70, 0x48, 0x9b, 0xed, 0xe5, 0xae, 0xc6}}
	return a, nil
}

var _dbMigrations0005_default_team_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x4a\xc3\x40\x14\x46\xf7\xf3\x14\xdf\x22\x90\x04\x3b\x42\x7e\xc0\x86\xac\x2a\x2d\xdd\x88\x5d\x48\x1f\x60\xd2\x7b\x13\x07\x66\x26\x31\x73\xab\xf6\xed\xc5\x04\x0a\x2e\x5c\x7f\xe7\x9c\xcb\xd5\x1a\x0f\xde\x0e\xb3\x11\xc6\x79\x52\x4a\x6b\x9c\x82\xbb\xc1\x10\xc1\x40\xd8\x78\xd8\x1e\x56\x40\x23\x47\x84\x51\xc0\xdf\x36\x0a\x6e\x2c\x8f\x0b\x7d\xb7\xdf\xc4\x08\x7b\x0e\xf2\xcc\x83\x0d\x4a\xed\x4f\x78\xd9\xbd\x1e\xcf\xbb\xe3\x01\x93\x9b\x86\xf8\xe1\x90\x24\xaa\x5b\x56\x00\xbf\xdd\x7b\x2f\x22\x8b\xec\xf8\x22\xb0\x84\x7e\x1e\xfd\x7a\xda\x59\x6f\x05\x45\x0e\x79\xe7\x55\x5a\xc4\x10\x79\x16\xd8\x20\xe3\x8a\x65\x96\x36\x08\xc6\x73\x8e\x4f\xe3\xae\x1c\x91\xa5\xb4\x6d\xaa\xba\xa4\x8b\x6e\xca\xa2\xd6\x75\x5d\x90\x36\xb5\xe9\x75\x47\xb4\xad\x9e\x4c\xd5\x95\x55\x93\x6e\x90\x12\xf7\xe6\xea\x24\xcd\xdb\xa5\xcf\x81\x60\xfb\x56\x71\xa0\x56\x25\x49\xfb\xcf\x8f\x87\x40\x7f\x97\xfd\xf8\x15\xd4\x4f\x00\x00\x00\xff\xff\xf8\x60\xa1\xfe\x4d\x01\x00\x00")

func dbMigrations0005_default_team_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0005_default_team_idSql,
		"db/migrations/0005_default_team_id.sql",
	)
}

func dbMigrations0005_default_team_idSql() (*asset, error) {
	bytes, err := dbMigrations0005_default_team_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0005_default_team_id.sql", size: 333, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0xdb, 0x8b, 0x9, 0xd, 0x3e, 0x9f, 0x64, 0xf9, 0x8f, 0x94, 0xe1, 0xf7, 0x95, 0x28, 0x12, 0xe7, 0xe6, 0x39, 0x30, 0xda, 0x5c, 0x68, 0x3d, 0x1f, 0xd0, 0xcd, 0x82, 0xd0, 0x8c, 0x4c, 0x52}}
	return a, nil
}

var _dbMigrations0006_initial_applicationSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x97\x5b\x6f\x1b\xb9\x15\xc7\xdf\xf5\x29\x08\x34\x80\x13\x58\x94\x79\xbf\xc8\xe8\x43\xdc\x78\xd3\x2e\x72\x29\xba\x49\x91\xdd\x97\xe0\x90\x3c\x23\x4f\x3d\x9a\x99\xcc\xc5\x96\xf3\xe9\x0b\x4a\xf2\x25\xdd\x78\x31\x56\x8a\x7d\x11\x34\x9c\x39\x3c\xfc\xff\x78\xf8\x27\x49\x29\x39\x5e\x97\xab\x0e\x06\x24\x1f\xdb\xd9\x8c\x52\xd2\xd4\xd5\x0d\x81\x94\x48\x82\x01\x48\x59\x10\xa8\x09\xb4\x6d\x55\x46\x18\xca\xa6\x26\xa9\xc1\x9e\xd4\xcd\x40\x70\x53\xf6\x03\xb9\xc1\x61\xb1\x8d\xbb\xeb\xe7\x97\x01\x06\x5c\x63\x3d\x9c\xe1\xaa\xac\x67\xb3\x57\xef\xc9\x9b\x97\xef\x5e\x7f\x7c\xf9\xfa\x9c\xb4\x55\xbb\xea\xbf\x54\xe4\xd9\xb3\x59\xd8\xbe\x25\x84\xe4\x1c\x77\xfd\xf5\xe4\x79\x8f\x15\xc6\x81\x94\x89\x14\x5d\xb3\xfe\x26\x77\x55\xae\xcb\x81\xf0\x17\x64\xb8\xc0\x5d\xec\x36\xbe\xee\xb1\x1b\x48\x59\x0f\xcd\x37\x5f\x3f\x2f\xd3\x9c\xd4\xb0\xc6\x39\x49\xd8\xc7\xae\x6c\x73\xf3\x9c\x0c\x08\xeb\xcf\x65\x7a\x41\xae\xa0\x1a\xb1\x27\xcf\x8f\xd0\x1b\xe1\x38\x18\x9a\x38\x14\x54\x85\x84\xd4\x03\x03\xea\x6d\xb0\x06\xb5\x49\x51\xdb\xa3\x39\x39\xfa\xa9\x82\x21\x42\x47\xde\x94\xf5\xb8\xc9\x0d\xdb\x3f\xa4\x68\x3a\xb2\x86\xbe\x2f\xaf\x90\xf4\xd8\x5d\x61\x47\x12\xb6\x55\x73\x93\x29\xf4\xf9\xbb\xe4\xbc\x54\x22\x45\xea\x05\x57\x54\x29\x9e\x28\x28\x28\x68\x48\xc9\x49\x0b\x32\x08\xe9\x8f\x5e\x9c\xce\xee\x34\x51\x4a\xfa\x01\x42\x85\x24\x5e\x40\x5d\x63\x45\xc6\x36\xc1\x80\xdf\x15\xdd\x42\xbc\x84\x15\xde\xeb\x71\x2a\xa8\xa8\xbd\xa7\x3e\x98\x40\x95\x02\x47\x03\x97\x91\x26\x25\x8c\x2c\x8a\x82\x29\x26\x8f\xe6\x84\xcf\xc9\x91\xe0\x9e\x2f\xf4\x82\xe5\x51\x5e\x0c\x43\xdb\x2f\x4f\x4e\x76\xa9\x16\x1d\x56\x08\x3d\x2e\x8a\x9d\x6a\x5a\x65\xb1\x8b\x1a\x87\x13\x58\x27\xa3\xe8\xd8\x77\x27\xb7\xe1\x27\x39\x7e\xff\xe1\xe7\xb6\x6b\xd2\x18\x33\xec\xcf\xfb\xae\x56\x5f\x7f\x87\x8f\x3c\xcc\xac\x8c\x76\x8e\x3b\xcb\xf3\x43\x27\xeb\xb1\x88\x9b\xd5\xdb\x0f\xbf\xc1\xe6\xd7\xf3\x2f\x6f\x8e\x37\xe2\xeb\x3f\x1a\xfc\x5b\x75\xf9\xd7\xfc\x5e\x30\xee\x29\xf3\x94\x69\xc2\xd9\x52\xf1\x25\xf3\x0b\x61\xb4\x71\xf6\x98\x6d\x7b\x9b\x34\x9d\x2f\x4e\x1f\xc2\x0e\x38\xc0\x41\xa8\x63\x88\x3c\x82\x71\xb4\xb0\xd2\x53\x25\x73\x2e\x1e\x22\xd5\x4a\x00\x46\x8f\x08\x51\xdf\xa2\x16\xca\x2e\xc4\xe1\xa8\xf7\xe1\x87\xa0\x7e\x90\x59\x19\xcb\x94\x33\xda\xe7\x87\xf7\xe0\x47\x27\x5f\x6d\xe2\xf1\x65\xf8\xad\x1e\xcd\xf5\x39\x6c\xbe\x36\xf1\xdf\x57\x3f\x37\xdf\xa0\xe6\x92\x70\xb9\x94\x7e\x29\xc5\xc2\x7a\x65\xb8\x3c\x1c\x35\x54\xed\xc5\x61\xac\x59\x14\x46\xea\x68\xa9\xc2\xc2\x51\x85\x2a\xd0\x60\x8d\xa3\x46\x78\xa1\x99\x2b\xbc\xdd\x0e\x6a\xc7\xda\xf0\x05\xfb\x01\xd6\xbb\xf0\x83\x58\xdf\x67\x56\xc6\x6a\xc6\xbc\x56\xf9\xe1\xf5\x87\x77\xe1\xef\xcd\xfa\x3f\x6f\x3f\x7d\x39\xd9\x88\xf7\x1f\xe5\x99\xbf\x7a\x3b\xc0\xd9\xaf\x9f\xae\xbf\xc3\x5a\x8b\xa5\xd2\x0b\x61\xb5\xb1\xfa\x70\xd6\x98\x56\x87\x39\x48\x30\x31\x31\x00\x4f\x4d\xd2\x91\x2a\xc7\x1d\x05\x64\x48\x39\x8b\xcc\x42\x04\x15\x25\x3c\x2c\x6b\xef\x7f\xac\xae\x73\xfc\xa1\x85\x7d\x9b\x5b\x39\xe3\x98\x67\xde\xe5\x87\xe1\xf5\x19\xea\x4b\x7e\x5c\x9f\xf8\x4f\xd7\xa2\xf9\x57\xba\xd6\xee\xe7\x77\x1f\xbb\xaf\xe7\xbf\x37\x11\xbe\x14\x7a\x29\xf5\x42\x70\xc6\x9d\x79\x22\xed\xef\xf2\xbc\x45\x7e\xbf\xc3\x30\xc3\x8c\x82\x94\xbd\x5f\x51\xe5\x99\xa2\x1e\x0c\xd2\x22\x29\xa3\xb5\x97\x89\x07\x91\xb3\xee\x4c\x3f\xff\xfb\x0b\x57\xc1\x27\xb3\x1f\xab\xde\x56\x86\x27\x4c\x2f\x99\x5f\x4a\xb5\x10\x86\x0b\xc5\x27\x0f\x74\x4e\xa6\x6d\x0a\x0f\xca\xe7\x0f\xf5\x70\xe1\x82\x8b\xc2\x53\xcd\xb4\xa3\xca\x28\x49\x1d\x1a\x4b\x81\x03\x43\x19\x8d\xe2\x71\x6b\x30\xd9\x57\xb7\x6a\x8a\x68\x0b\x29\x1f\x57\xa3\xa4\x54\x4f\x51\x33\xc9\x77\xa7\xaa\x01\x67\x81\xc9\x3c\x3b\xde\x29\xaa\x2c\x70\xea\x52\x54\x54\x6a\x66\x03\xa0\xe7\x88\x5b\xd4\x5b\xeb\xda\x4d\x4e\x11\x82\xfb\x83\xc9\xd1\x56\x3f\x49\xce\x24\x6b\x9b\x2a\xc7\x0a\x27\x15\x88\x40\x21\x39\x43\x55\x32\x89\x06\xe5\x1d\x45\xe6\x80\x7b\x0c\xa8\xd5\xb6\xc4\xb2\x3b\xec\x26\x47\x29\x94\xe1\xff\xa7\x66\x92\x7b\x3c\xb6\x76\x56\x5d\x33\xb6\xfd\xbd\x1a\x0f\x22\x61\xb0\x8c\x4a\x1b\x90\x2a\x26\x0c\x75\x5a\x16\x34\x14\x29\x99\x20\x95\x0d\x61\xab\xe2\x97\xbb\xa5\xf3\x53\xd3\x91\x7b\xff\x20\xb1\x1a\xfb\x01\xbb\x7c\x10\x2b\xa0\xea\x71\x4e\x86\x6e\xbc\xfb\xdd\x37\x1d\x9d\x8f\x5d\xd3\xe2\xc9\x19\x76\x55\x59\xe7\x5e\xb8\x26\xeb\xb2\x1e\x07\xcc\x81\x62\x4e\x8e\x0c\x7b\xd0\xf0\x08\x29\xcf\x8c\x78\x0a\xa9\x49\xbe\xf0\xc8\xbc\xff\x2f\x28\x59\x20\x67\xca\x33\x9a\x92\x95\x54\x05\xe5\x69\xb0\x02\xa8\x70\x10\xb9\x87\x58\xc4\x14\x73\xce\xb3\xfd\x9a\xfc\x67\xd7\xac\x9b\x01\xd3\x7e\x47\xde\x7b\x75\x3f\x27\xb9\xa6\x60\x88\x17\x24\x8c\xab\x9e\xf4\x2d\xc6\xb2\x28\x63\x6e\xbe\x69\xc6\x8e\xc4\xa6\x2e\xca\xd5\xd8\x6d\x4f\xd9\x7f\x02\x54\x2b\x85\x7a\x52\xf9\x4d\x32\xa7\x89\x50\x75\x70\x9c\x19\xc7\x28\x4a\x03\x54\x39\xeb\x69\xf0\x0e\xa8\x2a\xbc\xf3\xe8\x58\x70\x7e\x6b\x74\x2f\x6f\xad\xe1\x43\x07\xf1\xb2\x27\x71\xec\x3a\xac\x07\x92\xf0\x0a\xab\xa6\xcd\x37\x01\x72\xdd\x74\x97\x04\xea\x44\xca\xfe\x96\x76\xbe\xe4\xe0\x97\x11\xeb\xa1\xba\xf9\x11\x94\x79\x23\x96\x13\x50\x2a\xcf\x9f\xb4\x69\x4c\x72\xc6\x89\x28\xa7\xda\xd2\xf9\xde\x96\xce\x37\x2d\x76\x65\x26\x07\x15\x29\x10\x86\xb1\xc3\x7e\xcb\xaf\xcd\xd5\x89\x3f\xb4\xa0\xbf\x0b\xcc\x51\xa6\x28\x67\xf9\x5a\x91\x4f\x04\x7e\x61\xac\x95\xda\x3f\xe5\x44\x30\x27\xd3\x74\xee\x99\x61\xae\x86\xe2\x74\x86\x75\x3a\x9d\x3d\x7b\x76\xfa\xc8\x55\xfa\xbc\x4e\xdf\xbe\x79\xd5\x5c\xd7\xb3\xff\x06\x00\x00\xff\xff\x30\x0a\xcb\x87\xbe\x0f\x00\x00")

func dbMigrations0006_initial_applicationSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0006_initial_applicationSql,
		"db/migrations/0006_initial_application.sql",
	)
}

func dbMigrations0006_initial_applicationSql() (*asset, error) {
	bytes, err := dbMigrations0006_initial_applicationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0006_initial_application.sql", size: 4030, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0xd1, 0x37, 0xb6, 0xfb, 0xb, 0xd7, 0x26, 0xbd, 0xc0, 0x4, 0xa7, 0x1, 0xc4, 0xe5, 0x46, 0xae, 0x4a, 0x4c, 0xb2, 0x4b, 0x8d, 0xda, 0x84, 0x46, 0x38, 0xa5, 0x78, 0xb3, 0xfb, 0x1, 0x16}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql":                      dbDrop_all_tablesSql,
	"db/sample_data.sql":                          dbSample_dataSql,
	"db/migrations/0001_initial.sql":              dbMigrations0001_initialSql,
	"db/migrations/0002_event_data.sql":           dbMigrations0002_event_dataSql,
	"db/migrations/0003_longer_team_names.sql":    dbMigrations0003_longer_team_namesSql,
	"db/migrations/0004_rename_coreos_action.sql": dbMigrations0004_rename_coreos_actionSql,
	"db/migrations/0005_default_team_id.sql":      dbMigrations0005_default_team_idSql,
	"db/migrations/0006_initial_application.sql":  dbMigrations0006_initial_applicationSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"drop_all_tables.sql": {dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": {nil, map[string]*bintree{
			"0001_initial.sql":              {dbMigrations0001_initialSql, map[string]*bintree{}},
			"0002_event_data.sql":           {dbMigrations0002_event_dataSql, map[string]*bintree{}},
			"0003_longer_team_names.sql":    {dbMigrations0003_longer_team_namesSql, map[string]*bintree{}},
			"0004_rename_coreos_action.sql": {dbMigrations0004_rename_coreos_actionSql, map[string]*bintree{}},
			"0005_default_team_id.sql":      {dbMigrations0005_default_team_idSql, map[string]*bintree{}},
			"0006_initial_application.sql":  {dbMigrations0006_initial_applicationSql, map[string]*bintree{}},
		}},
		"sample_data.sql": {dbSample_dataSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
