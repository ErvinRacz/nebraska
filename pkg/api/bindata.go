// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/drop_all_tables.sql (674B)
// db/sample_data.sql (14.368kB)
// db/migrations/0001_initial.sql (7.178kB)
// db/migrations/0002_event_data.sql (729B)

package api

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x8e\x85\x30\x0c\x43\xf7\x9c\xa2\xf7\xe0\x30\x91\x09\x19\x88\x28\x6d\xd5\x04\x34\xdc\x7e\x24\xc4\x6c\xbe\xbe\x14\xf6\x2f\xb6\x63\xcf\xbd\xb6\xe4\x98\xb2\x24\xfd\x49\xf2\xab\xe6\x96\x5c\xb0\x27\x86\x31\x66\x19\x87\xaf\xc8\x61\xd2\x2d\x60\xd0\x5a\x56\x86\x6b\x2d\x01\xd9\xc0\x1b\x16\x09\x28\xae\x5d\xaa\x11\xf8\x85\x22\xaf\x28\x45\x72\x40\x2d\xbd\x1e\x2d\x7a\x43\x8b\x39\x0a\x47\xe9\xfe\x31\x32\x87\x1f\x6f\x45\xe9\x7d\x49\x1f\x06\xb4\xaa\x79\xed\x57\x70\x25\xa7\x14\x27\xbf\x5a\x94\xff\x06\xa3\x45\xd9\xf5\x54\x8f\x3c\x9f\x39\xe9\x19\x81\xa6\x0c\xde\xb2\x5a\x24\x3f\xc3\x31\xc1\x84\x76\x5d\xfa\x5d\x89\x8d\xc3\x5f\x00\x00\x00\xff\xff\xda\x81\x6e\xb2\xa2\x02\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 674, mode: os.FileMode(420), modTime: time.Unix(1537251402, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xfc, 0xeb, 0x41, 0x72, 0xb1, 0x9f, 0x5b, 0xf7, 0xb3, 0x6a, 0xf1, 0xba, 0xb6, 0x59, 0x6d, 0xe3, 0xa0, 0x60, 0xc2, 0x4a, 0x87, 0xe8, 0x26, 0xfc, 0x10, 0x23, 0x2a, 0xf1, 0xbb, 0xd4, 0x16}}
	return a, nil
}

var _dbSample_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x53\x1b\xb9\x12\x7e\xcf\xaf\x50\xd5\x79\x70\x52\xb1\x6c\xdd\x2f\x6c\x9d\x87\x84\x6c\x2e\xbb\x24\x1b\x42\xd8\x14\xfb\x92\xd2\xa5\x65\x3b\x8c\x67\xbc\x33\x63\x08\xfc\xfa\x53\x33\x06\x63\x20\x1c\xc6\x26\x24\xec\x56\xca\xce\x78\x44\x4b\xfd\x7d\xdd\x2d\x75\x4b\xc2\x18\xbd\xc9\x27\xf5\xc4\x65\x28\xba\xda\x3d\x7a\x84\x31\x7a\x01\xc9\xcd\xb3\x1a\xd5\xe0\xa6\xc8\xe5\x11\xcd\x2b\x28\xd1\x63\x17\xa7\x93\x7c\xd8\x7e\x3f\x79\x34\xc9\x2b\x28\x6b\x34\xc9\xeb\x62\xf1\x77\x8f\x27\xb1\x8f\x72\x37\x85\x27\xe8\xc8\x65\x73\xa8\xd0\xe3\x5e\x34\x96\x0b\x16\x03\xb6\x8c\x0a\x2c\x04\x8d\xd8\x09\x97\xb0\x8f\xd1\x70\xed\xb8\x67\xdc\xf6\xfa\xa8\x17\x17\x03\xf6\x9e\xfc\x72\xa9\xdf\x66\xd8\x0a\x3d\x6e\xfe\x6b\x3a\xee\xa3\x0a\x42\x09\x75\xbf\x1d\xf0\xf3\x24\xae\x8c\xd4\x6a\xd5\x74\x65\x3c\xa7\xcc\xb2\x28\xb4\x36\xd2\xb0\x40\x40\x26\x67\x95\x03\x90\x92\xf2\x44\xdb\xe1\xba\xa8\xf5\xe4\x97\x96\x8b\xed\xa2\x84\x3f\xf6\x90\x9b\xcd\xb2\x49\x70\xf5\xa4\xc8\x2f\xa9\xb8\xf2\xfe\x82\x81\x3e\x8a\x50\x85\x72\x32\x6b\x5e\x7f\x4b\x5b\xb0\x8a\x19\xea\x14\x8e\xd4\x25\x2c\x7c\x04\x6c\x1d\x71\xd8\x6a\xaf\x15\x48\x15\x83\xd4\x8d\xa2\x8b\xc1\x9b\xa7\x9d\x49\x3e\xff\x8a\x52\x51\xa2\xa9\xab\xaa\xc9\x11\xa0\x0a\xca\x23\x28\x51\x84\x59\x56\x9c\x4c\x21\xaf\xab\x75\xa0\xad\x62\x98\xb9\x70\xe8\x46\x70\xa1\x1e\xf3\x4e\x04\x6b\x04\x96\x60\x3d\x16\x94\x02\xf6\x3a\x70\xec\x39\x78\x2a\x92\x76\x4c\x35\x3c\xd2\x3e\xea\x69\xa5\x06\x7c\x40\x9a\xa1\xc7\x75\x3d\xab\xb6\x86\xc3\x50\x4c\xa7\x45\xde\x38\x53\x55\x17\xa5\x1b\xc1\x60\x54\x14\xa3\x0c\xdc\x6c\x52\x0d\x42\x31\x1d\xce\x67\xd1\xd5\x80\xcf\x5b\x43\x51\x02\x2e\xaa\x41\x0e\xf5\xd0\x4d\xa3\x12\x78\x5e\x95\xc3\xb3\x8e\x87\x4d\xcf\x0b\x81\xc1\xe8\xb4\xd7\x47\xef\xf6\x77\x76\xfa\xa8\x47\xa5\xb0\x4a\x0b\x69\x9a\xf6\x4c\xfc\x7e\xac\x9f\xc1\xf3\x9d\xf2\xcf\x37\x2f\xec\x6f\x3e\x9d\xbc\x2d\x7e\x83\xe7\xf2\xe4\xf7\xd1\x7f\x9b\x76\x46\xa8\xc4\xc4\x62\x46\x10\x21\x5b\x94\x6d\x71\x3d\x90\x8c\x5b\xde\x4a\x77\x32\xc6\x6d\x94\x71\xae\x3d\x4f\x1a\x70\x4a\xcc\x62\xa1\xc1\x60\x47\x24\xc3\x89\x18\x2e\x22\x93\x3e\x7a\xb9\x42\x99\xb8\x2f\xca\xc4\xff\xa3\x4c\x12\x6a\x2c\x65\x4d\x7b\x2a\x0f\x0f\xdd\xd3\xe7\xc3\xd3\x8f\x47\xfa\x8f\xf7\x9f\x46\x93\x78\xf0\xf4\x50\xec\xe5\x2f\xf6\xae\x53\xa6\xb6\xa8\xdc\x62\x76\x40\x89\x61\x4a\x7d\x37\xca\x02\x73\x5c\x71\xca\xb0\xb7\xc6\x62\x41\x38\x60\xe7\xa5\xc6\x44\x05\x22\xa5\xd3\xe0\x02\x3b\xa3\xcc\x10\x33\x20\xf7\x41\xd9\x59\xc7\x37\x52\xa6\xb5\xa6\x5a\x50\xd1\xb4\xfb\xbf\x79\xda\xfd\xf0\xfa\xbd\xf9\xfa\x9c\x7f\x78\xb9\xff\x65\x3b\x3e\x4b\xfc\x78\xf7\x60\x9b\xfd\xfa\x0d\x2f\x23\x76\x8b\xa8\x81\xe1\xd6\x1a\xfb\xdd\x28\x13\x5c\x1a\x62\x2c\xc3\xc1\x45\x83\x85\x32\x0e\x3b\xe2\x3d\x06\x6f\x23\x01\x62\x21\x38\x71\x4e\x19\x95\xf7\x44\xd9\xa2\xe3\x9b\x29\x33\x4a\x70\xa9\x5b\xd0\x87\xef\x84\x9b\x16\xbf\x1f\xfc\xf9\xd7\xfe\x2b\xf6\xa9\xd8\x8b\xbb\xaf\xe9\xfb\xd7\xef\x4f\x4b\xf9\xec\x32\x65\x12\x51\xbe\x25\xe5\x16\x23\x83\x86\x6e\xfa\xfd\x28\x63\x46\x44\x66\xa5\xc7\x92\x9a\x84\x45\x54\x1a\x5b\x6b\x01\x5b\x61\x95\x89\x04\x20\x5a\x72\x4e\x19\xb3\xf7\x44\xd9\xa2\xe3\x1b\x29\x33\x8a\x09\x29\x17\x5e\xc6\xb2\x71\xb1\x7f\x74\x94\x17\x07\x5c\xda\xd9\x84\xbd\xcc\xdd\xde\xf0\x6b\x35\xaa\x27\x2b\x81\x49\x09\xa6\x04\x31\xbe\x45\xe9\x16\x25\x03\xc3\xa4\x35\x72\x53\xca\xc2\xd8\xe5\x39\x64\x2b\xab\x13\x51\x44\x09\x17\x9b\xe5\x43\x60\x61\x89\xc0\xd6\x29\xc0\x29\x0a\x25\xa5\xe5\x91\xfa\x76\x0e\xa9\x6a\xe7\x33\x68\x9e\xfe\x43\x85\xb7\x51\xad\x9a\x94\x5a\x44\x64\x13\x05\x5c\x0c\x98\xa2\x4c\xd0\xce\xfa\xf5\x51\xb7\xe9\xf4\x36\x1c\x94\x19\x6f\x02\xb3\x58\x12\xd9\x44\x8b\xe0\xd8\x80\xd2\xd8\x51\x47\x80\x07\x25\x68\x68\xfd\xcc\x43\xed\x5a\x14\x29\xe8\xc4\xf9\xcd\x28\x04\xe7\xe2\x87\xa3\x70\x46\x3b\xc2\x1b\x6b\x34\x2b\xb2\xd0\x8e\x62\x13\x83\xc0\x5c\x12\xed\x1d\x58\x0a\xd0\x52\xeb\xb2\xd9\x78\x01\x83\x26\xef\xcd\xff\x31\x86\xd4\x72\x2d\x18\x9d\x42\xe8\x0a\x8c\x51\x59\xcc\x67\xd5\x05\x0a\xeb\x58\x04\xaf\x09\xe6\xda\x03\x16\x84\x29\x6c\x24\x4f\xd8\xa7\x18\x95\xe7\x42\x7b\xdf\x7a\xd2\xde\xd2\xa7\x5e\x16\x25\x9a\x95\x45\x9c\x87\x36\xb9\x0a\xd9\xbc\xaa\xa1\x6c\x92\x9c\xe4\xb2\x0a\xfa\xa8\x2e\xe7\xcb\xef\xb3\x57\xbd\x67\xf3\xaa\x2e\x5d\x36\x71\xc3\xbd\x93\x98\xc3\x49\xaf\x5d\xf7\xd0\x74\x92\xcf\x6b\x68\x64\x59\x1f\xf5\x14\x59\x79\x71\x03\x47\x96\x28\xb6\x0e\x47\x9d\x62\xe6\x16\x8e\x78\x02\x4a\x84\x25\x38\x46\xcd\xb1\xf0\xc2\x62\xaf\x99\xc3\xcc\xb8\x40\xad\x0b\x29\xc4\xd0\x8c\xf5\xfc\xcc\x5f\xdf\x97\xc5\xb4\xa8\x21\xa2\xd6\xf4\xa8\x84\x0c\x5c\x05\x55\x1f\x35\x6e\xe4\xea\x30\x46\x7e\x3e\xaa\x50\x35\x83\x30\x49\x93\xd0\xbc\x3e\x29\xe6\x25\x0a\x45\x9e\x26\xa3\x79\xd9\x66\xad\xbd\xcb\x44\xde\x0f\x9d\x9a\x33\xb1\x96\xcb\x75\x0a\xdd\x5b\xe8\x94\xde\x50\xa2\x0c\xc1\xc0\x95\xc3\xc2\x68\xdb\x64\x1a\x0e\x8b\x64\x8d\x05\x43\xbc\xb1\x6d\xf8\x3f\x3b\x0f\x9c\x8f\xa5\x0b\x87\x15\x0a\xf3\xb2\x84\xbc\x46\x11\x8e\x20\x2b\x66\x4d\x6a\x8d\x8e\x8b\xf2\xb0\xad\x84\x26\xd5\x39\xcf\x11\xa5\x12\xfe\x9e\x43\x5e\x67\x27\x77\x74\xca\x66\xf1\xe1\x1d\x58\x14\x96\xae\x35\x8b\x76\x9a\x3a\xae\xce\x3f\x45\x09\x45\xf5\xd9\x2d\xa2\x6e\x49\xa6\x67\x9e\x2a\x60\x80\xa5\x4e\x06\x0b\xad\x25\x36\x4c\x27\x6c\x12\xf1\x94\x3a\xb0\x3e\xb6\xf1\x32\x2b\xaa\x7a\x92\x57\xb5\xcb\xb2\xe6\x67\x9b\x04\x98\xed\xe7\xa6\x7e\x0b\xe4\xad\x79\x71\xf2\x97\xfc\xf0\xd7\xf1\xe9\x8b\x9d\x93\x8f\xf1\xf0\xf5\x97\x3f\x86\x07\xa3\xf4\xfb\x9f\x39\xfb\x30\xda\x7f\x5b\x1c\x86\xff\x5e\x10\x79\x89\xcf\x5e\x6f\xe5\xf3\xcd\x6c\x9e\x33\x66\x5a\x6e\x3a\xd5\x2e\xdd\x30\x47\xe9\x58\xf0\x89\xe3\xc6\x91\xb0\x00\x13\xb0\x31\x60\xb0\x8a\xc9\xd2\x14\x98\x12\x41\xdd\x80\x79\x77\xff\x55\x3e\x7d\x2f\xe9\x78\xa6\x4f\x4f\x9e\x3e\x7d\x5a\xc8\xf4\xfc\xcd\xf1\xaf\xd9\x9b\xfc\xe3\xb3\x69\xa5\x87\xf9\x97\xfc\xf0\xeb\xbc\xce\x87\xbb\x6f\xd6\xc6\xbc\x4c\xc7\xa9\x5a\x2c\xfa\x1b\x2d\x33\xdf\x86\xcc\xac\x0d\x52\x44\x8a\x39\x17\x02\x0b\x07\x16\x1b\x17\x19\x96\x41\xf1\x28\x55\x54\x61\x91\xa5\x7c\x03\xf2\xde\xf6\x91\xb1\xaf\x0e\x4e\xbf\xea\x37\x5f\x9f\x7e\xcc\xbe\xfc\xed\xdf\x55\x51\x17\xb9\x92\x45\xf1\xe9\xef\xe7\xa7\x61\xbb\xdc\x79\xb9\x23\x8e\xb7\xc7\xbb\x1b\x98\x79\x91\x4e\x5b\xa6\x45\x5b\x7a\x76\x2b\x1e\xba\x61\xd6\xc2\xc4\x24\x53\xc0\x94\x39\x89\x45\x74\x11\x3b\x4d\x01\x0b\x25\x43\xa0\x4a\x19\x22\xcc\x0d\x98\xed\xeb\xfd\x4a\x1c\x8f\x27\xa7\xe9\xe4\xc8\x8b\xe9\x28\x7b\xfa\xc9\xbd\x73\x9f\xf8\x9f\x3b\xbb\x07\xc7\xd5\x27\xfa\xea\xf5\xbb\xd7\xbf\xbd\x9b\x85\x97\x23\xb1\x1e\xe6\x95\x7c\xd8\x30\xc9\x44\x1b\x5b\x9d\xb2\xff\x6e\x98\x6d\x88\x42\x8b\x20\x31\x24\xc7\x9b\xe9\xc1\x36\x4b\x3a\xc3\xd2\xc4\xe8\x8d\x64\x10\xcd\x4d\x76\xa6\x7b\xf6\x74\x77\x7b\xe7\xd5\x97\x29\xa4\x83\xfc\xd7\xa1\x7b\x19\x66\xdb\x5f\x76\xe8\xbb\x6a\x34\x7f\x3d\xde\x7d\xf5\x85\xec\x6f\x4f\x65\x22\x6f\xad\xe9\x8e\xf9\x4a\x42\x6b\x29\xd7\xda\xac\x93\x7b\x3c\xc2\x18\xed\xb9\xe9\x2c\x83\x4b\x5b\x32\xf4\x3b\x6c\xd6\x78\x25\xa4\x21\x44\x62\x93\x04\xc1\x42\x31\x8d\x3d\xe7\x1e\x7b\xd0\xc4\x69\x6a\x82\x30\x8b\xd4\xe5\xda\xf0\xcd\xdb\xdf\xe6\x55\x8d\x5c\x7e\x69\xec\xba\x40\xd5\xb8\x38\x46\xcd\x27\x14\x45\xd6\x6e\x32\x7d\x28\xb2\x0c\xca\x66\x81\xd9\x7a\x72\xd7\x9d\x9c\x16\x5c\x7d\x32\x83\x3e\x9a\x97\x59\x1f\xa5\x49\x06\x0b\xac\x47\x50\x56\x2d\xce\x15\x7d\x2e\xc3\x95\xd4\xca\x66\xe6\xc3\x32\x19\x86\x29\x05\x89\x6d\xd4\x04\x27\x48\xc9\x50\x1b\x62\xb0\xa9\xd7\x47\xe2\x52\x95\x54\x42\xd9\xaa\x3f\x28\xca\x51\x5b\xe6\xd4\x50\xd5\x9f\xe9\x80\x0c\x5a\xcf\x5d\x3e\x74\xe2\xf2\x1e\x40\x51\xa6\xac\x4e\x4e\x34\xa0\xf8\xdd\x41\xf1\x73\x50\xfc\x67\x82\x32\x84\x08\xdf\x4c\x05\x32\x59\x7d\x77\x50\xe2\x1c\x94\xd8\x14\xd4\x79\xed\xb2\x12\x5b\xa1\xc8\x8a\xf2\x2a\x86\xfe\x39\xfc\x2b\x81\x96\x80\x33\x2f\x5c\x63\xa4\x70\x33\x9e\xde\x5b\xd7\x54\x02\x6d\xa9\x43\xc8\xf6\x36\x21\x9d\xf5\x6d\xb7\x92\x3a\x90\xf6\x7d\x71\x05\xcf\x22\x80\x33\xb7\x38\xdf\x4a\xed\xf3\x1f\x42\xac\x7d\xf9\x72\x1d\x5c\x9d\x3c\xfc\x96\x8c\xd9\x07\xe7\x94\xf1\xe1\x96\xd0\x6f\x0a\x8f\x88\x7e\xdd\x66\x68\x5e\xe1\x63\xa8\x6a\xcc\xce\xdf\x9e\x15\x6b\x8b\xbd\xe9\xaa\x8f\x9a\x56\x14\x0a\x57\xd5\x3f\xb8\x6e\xeb\x4a\x5b\x27\xdb\xdc\x42\x9b\x26\x5a\x30\x25\x1c\x66\x44\x13\x2c\xbc\x11\xd8\x2a\x88\xd8\x38\xa6\x6c\xf4\x4e\x12\x46\xaf\xd2\x06\xae\xaa\x31\xbd\x89\xb6\xa6\xf5\x5f\x4f\x9b\xa7\x94\x18\xca\xdd\x6d\xde\xb6\xeb\xf0\x0b\x38\x6a\x9f\x9e\xb5\x35\xd8\x6a\x61\xb6\xa4\x6c\x49\xc0\x43\xa4\xab\xd3\xcc\x76\x85\xae\x36\xed\xca\xc3\xd9\x12\x31\x99\xad\x4c\x28\xe7\x4d\xad\xff\x50\x32\x68\xfe\x5d\x2b\x6a\x3a\xc8\xb3\x15\xf9\x6b\xd9\x72\x07\x79\xbe\x22\xcf\x37\x90\x17\x2b\xf2\xd7\x32\xd7\x0e\xf2\x72\x45\xfe\x5a\x85\xd3\x41\x5e\xad\xc8\xab\x0d\xe4\xf5\x8a\xfc\xb5\x6d\xd5\x0e\xf2\x66\x45\xde\x6c\x20\x6f\x57\xe4\xaf\xe5\x82\x5d\xfc\x87\xac\x3a\xd0\xb5\x3d\xbc\x2e\x3d\x5c\x72\xc1\x1b\x7d\xf0\xf3\x6a\xf6\x7b\x91\x94\x9d\x25\x50\x67\xa7\xbf\x6d\xa6\xb2\x7c\x5e\x3e\x2c\x36\xc9\x97\x3f\x2f\x3b\x7f\xe7\x00\xec\xb2\xb2\xfd\x40\xe5\xd7\x9b\x3d\xee\x45\x79\xb6\xb1\xf2\xdd\x93\xde\x07\xc8\x7c\xf7\xe4\xb6\x8f\xba\xad\xec\x3f\x50\x79\xf9\xf3\x95\xdf\xdc\x6d\xd4\xcf\x57\x9e\xae\x2a\xcf\xd7\x51\x5e\xff\x7c\xe5\xc5\xc6\xcc\x9b\xb5\x02\xb6\x4b\x5a\x76\x37\x9f\xd7\xeb\x28\x6f\x7f\xbe\xf2\x97\x7c\x9e\xad\xb5\x48\xad\x55\x9b\xde\x8f\xf6\x9b\x3b\x3d\x5d\x6f\x8d\xdd\x40\x7b\x17\xea\xc9\xd1\xa4\x3e\x59\x6a\xbc\x54\x22\x2f\x8e\x1f\x3f\x41\xae\x46\xf5\x64\x0a\xe8\xb4\xc8\x01\xf5\xe6\x75\xe8\x21\xdc\x48\x42\x79\xe4\x32\xd4\xe3\x68\x5c\xcc\xcb\xb3\x23\x14\xb1\xf6\x9e\x4c\xd7\x50\xed\x5a\xf0\x5c\xca\x4e\xbe\x2f\x52\xb5\x44\x2a\x5b\x23\xfe\x7b\x91\x52\xb6\x84\xca\x17\x47\x63\xff\x5e\xa8\x66\x09\x55\xfc\xcb\xfd\x97\x89\x25\x54\xb6\xa8\xb3\x1f\x2e\xd4\xe5\x94\x5a\xd5\xae\x9e\x57\x9f\xc7\x93\xaa\x2e\xca\x6f\x20\x5f\xb5\x58\x27\x16\x2e\xec\xfd\x13\x52\xba\xdb\xd0\xc8\x0d\xd1\xa0\xd5\x1d\x94\x07\x88\x4b\xad\x8b\xcb\x3e\x64\x2b\xe9\x0d\xd1\x20\xf1\xc0\xcd\xc4\xee\x0e\x0c\x51\x82\x2a\x08\x45\x1e\x1f\x28\x46\xb1\x72\x16\xd6\x2d\xc1\x51\x0f\xd9\x17\xe5\xa6\x70\xfe\x29\x53\x46\x77\x60\xfa\x21\xdb\x49\x6f\x0a\xe7\x1f\x33\x69\xdc\x05\xd9\x8f\x9c\x35\x6e\xb8\xa6\xc0\xbe\xc3\x35\x05\x6d\x48\x54\x56\x10\x6c\x9d\x30\x8b\x6b\x88\xc6\xc4\x84\xad\xf4\x4e\x71\xef\xc1\x06\xff\xed\x6b\x0a\xa8\xdd\x8d\x7c\x96\x17\xf5\x18\x4a\x54\x5d\x6b\xef\xa3\x04\x90\xa1\x54\x02\xa0\xba\x40\x25\x4c\x8b\x23\x40\x53\xf8\x99\xb7\x14\x20\x79\x6a\x54\xb0\x38\xca\xe0\xb1\x88\x89\x61\xcb\x0d\xc3\x41\x18\x46\x41\xc4\x10\x84\x5f\x39\xfb\xde\x1a\x0e\xb3\x22\xb8\x6c\x5c\x54\xf5\x96\x21\x64\x71\x17\x3b\xc2\xb4\xf8\x7c\x44\xcf\x2f\x7d\x2f\x1f\x3a\x51\x79\x0f\xa0\xbc\x63\xc6\x25\x61\xb0\x97\xde\x62\xa1\x08\x60\x2b\x94\xc3\xe0\x9d\x25\x2a\x80\x8e\x2e\xad\x01\x8a\x9e\x83\xa2\x9b\x82\xba\xe3\xc1\xb7\xd3\xc1\x04\xeb\x04\x8e\xcc\x71\x2c\xb4\x8c\xd8\x83\x12\xd8\x52\x9a\x92\x89\x0a\xac\xd5\x57\x0e\xf4\x2f\x2e\x92\x77\xf5\xe7\x4e\x9e\x70\xdb\x55\x51\xea\x38\x73\xce\x62\x2e\x25\xc3\xc2\xa6\x80\x1d\x33\x01\x2b\x29\xb8\x0f\x21\x11\xa2\xec\x85\xa2\x08\xa3\xb8\x38\x90\xfc\x38\x06\x94\xb9\x1a\xaa\x1a\x55\xf5\x3c\x25\x74\x3c\xc9\x32\xe4\x01\xb9\xec\xd8\x9d\x54\x68\x0c\x25\xfc\xe0\x23\xc9\xae\xb4\x75\xb2\xcd\x93\x5f\x1e\xfd\x2f\x00\x00\xff\xff\xbe\x0b\xa1\x4b\x20\x38\x00\x00")

func dbSample_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSample_dataSql,
		"db/sample_data.sql",
	)
}

func dbSample_dataSql() (*asset, error) {
	bytes, err := dbSample_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/sample_data.sql", size: 14368, mode: os.FileMode(420), modTime: time.Unix(1537950959, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x7e, 0xd5, 0xe8, 0x19, 0xa3, 0x3d, 0x5f, 0xfa, 0x21, 0x48, 0x32, 0x50, 0x74, 0x69, 0x46, 0xe, 0x9d, 0xfd, 0x60, 0xed, 0xe0, 0x4f, 0x6e, 0xbf, 0xa7, 0xb0, 0x3d, 0xb5, 0x47, 0x16, 0xd5}}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xc1\x6e\xe3\x36\x10\x3d\x5b\x5f\x41\xec\xc5\x36\xea\x00\xe9\x62\x93\x4b\xda\xbd\xb4\x5f\x50\xa0\x67\x62\x42\x8e\x6c\x22\x14\xa9\x92\x94\x1b\xe7\xeb\x0b\xca\x94\x44\x49\x94\xac\xb5\x5d\x34\xe8\xd5\x7a\x43\x0e\xdf\xbc\x37\x1a\xca\x0f\x0f\xe4\xa7\x42\xec\x0d\x38\x24\x7f\x96\x59\xf6\xf0\x40\x7e\xd3\x06\xff\xd0\x52\xa2\x21\x96\x1d\xb0\x80\x2c\x03\xe9\xd0\x10\x0e\x0e\x5e\xc1\x22\x61\xda\xa0\x09\x08\x74\xc4\x89\x02\x3f\xb4\x42\xf2\x2b\x59\x57\x8e\xad\x5f\xb2\x8c\x19\xf4\x2b\xe2\xbb\x43\x65\x85\x56\x44\xe4\x44\x69\x47\xf0\x5d\x58\x67\xc9\x97\xaa\x12\xfc\x41\x5b\x5b\x7e\xe9\xc0\x0e\x5e\x25\x12\x87\x50\x90\x4d\xb6\x12\x9c\x78\x10\x29\x8d\x28\xc0\x9c\xc8\x1b\x9e\x08\xc7\x1c\x2a\xe9\xea\x07\x74\x8f\x0a\x7d\xda\xf4\xf8\x6d\xb3\xdd\x65\x2b\x05\x05\x92\x23\x18\x76\x00\xb3\xf9\xfa\xb4\xad\xf7\x53\x95\x94\x84\x1d\x90\xbd\x91\x4d\x0d\xf8\xe5\x3b\x59\xaf\xb7\xa4\x52\xe2\xaf\x0a\x77\xd9\xea\xbc\x37\xa7\xce\xd6\xc7\xb0\x0e\x8a\xd2\x7d\xb4\x3b\xb1\xca\x18\x54\x8e\xb6\xcf\xda\x55\xb3\xed\x30\xf3\xca\xa2\xb1\x57\xa5\xee\x23\x2f\xa6\xdf\x82\x86\x47\xb0\xc8\x0c\xba\x36\xf6\xe9\x71\x1c\x1b\x20\xe7\xc8\x5b\x4e\xbd\xcb\x56\xbe\x40\xb4\x39\x62\xbb\x91\xc1\x1c\x0d\x2a\x86\x36\x54\x50\xf0\x2d\xd1\x8a\x70\x94\xe8\x90\x30\xb0\x0c\x38\xc6\xa4\x09\xc5\xf1\xdd\x43\x02\x6f\x61\xdd\x11\xad\x50\x96\x52\x30\x70\x5e\x45\x37\xeb\x22\x45\x4e\x44\xea\x2e\x5b\x71\xb4\xcc\x88\xb2\xde\xce\xe1\xbb\xfb\x0f\xd9\xf2\xca\xa8\x8b\xdc\x92\xb3\x23\x3e\xd9\xed\x58\x7b\x25\xb0\x37\xd8\xe3\x55\x04\xb9\x53\xe9\xab\xe1\x46\xc4\xd4\x0f\xbe\x93\x47\x0f\x3a\xa2\xa9\x7d\xdc\x29\x34\x21\xd1\x06\xd4\x92\x59\x19\x19\x45\x3c\x27\x44\x6d\x64\x87\xce\x85\xc4\x5e\xb5\x7e\x7e\x7c\x9c\x28\x89\x15\x1f\x91\x5b\x6a\xd4\x01\xec\xa1\xfd\xe9\xf9\xdb\xad\x32\x8f\x64\x37\x5b\xbf\x9e\x3c\xe7\xcb\xb8\xe9\xaf\xb9\x23\x81\xaf\x44\x3d\x7d\x87\xd5\x96\x02\xbb\x5a\xf6\x78\x44\xe5\x62\x8a\x5a\xf8\xba\xd4\xd6\x09\x65\x1d\x48\xb9\xde\x91\x6c\xc5\x0e\x46\x17\x7e\xbb\x64\x91\xdb\xb0\x1a\x6b\x0f\xf0\xf5\xe9\x79\xc0\xb3\x42\xe4\x96\x02\x2f\x84\x22\xaf\x5a\x4b\x04\xd5\x86\xe5\x20\xad\xa7\x40\x58\xca\x51\x3a\x98\x04\x70\x61\xfd\xd1\x69\x09\x27\xa9\x81\xd3\x57\x60\x6f\x3a\xcf\x47\x78\x67\xea\xae\x57\xa0\x03\xff\x42\xa2\x56\xec\x15\xb8\xca\x20\x35\x16\xfa\x6a\x8b\x52\xef\x05\x7c\xf4\x25\xd6\xc7\x71\x04\x2e\x85\x9a\x83\xdc\xa2\xab\xe0\xd4\x59\x4d\xb5\x6e\x5e\xde\x44\x07\x82\xe9\x76\x19\x4b\xeb\x00\x4a\xa1\xfc\xd7\xdf\xb1\x9e\x27\x2d\xb5\x49\xe2\x3f\x93\x39\x87\x15\xb9\x5c\x08\x3f\xf4\x84\x4c\x9a\x06\x3d\xb4\xf6\xa8\x4f\x77\x95\x6a\xf8\x9f\xa9\xd1\xde\xe8\xaa\xbc\x6e\x96\xb8\xf1\x75\x17\xb3\xec\x47\x3c\x5d\x39\x2a\x14\x2d\x8d\xde\x1b\xb4\x36\xed\xde\x9e\xbe\xb5\x14\xec\x44\xab\x92\x83\x43\x4b\x51\xf9\x03\xf1\xa4\x8b\x13\x61\x16\x72\xa4\x85\xe6\xb8\x34\x40\xe7\xb9\x60\x48\x0f\xba\x32\xcb\x93\x6b\x07\xd6\x86\xa7\x6f\xf5\x1b\x24\x3c\x2d\xd1\x08\xcd\xa9\x50\x0e\xcd\x11\x64\xaf\x87\x0e\xc9\x9c\x08\x69\xe9\x0d\xcf\x0b\x78\x6f\x19\x29\xd1\x04\xbc\x7f\xe9\xe2\x1e\xcd\xd4\xaa\x13\x51\xe1\x8d\xdc\x23\xba\x3e\x92\xae\xdc\x92\x64\x07\x11\x77\x19\x0a\xef\x6a\xc8\xe0\x90\x94\x21\x5b\xf3\xdc\xd1\x90\x8d\xd9\xba\x6d\x47\x7e\xac\xdf\x96\x8a\x35\xf3\x55\x6c\xaf\xd8\x98\x81\x67\xc1\x3b\x52\x45\x49\x84\x42\x77\x97\xc6\x37\x1e\x13\x9a\xbc\xa8\x75\xe0\xaa\xa6\x61\x58\x34\x02\x64\x9c\xd9\xa8\x75\x3f\xf6\x5b\xf1\x5c\x9f\x16\x2c\x9e\x08\xa2\xc0\x99\x74\x06\x33\xfb\x75\xc3\xe3\x2d\x7a\x0c\x7c\x04\x83\xed\xb2\x95\x04\xeb\x68\xbd\x13\xcd\xb5\x69\x6c\xf5\xe3\x0b\xd7\xeb\x04\x07\xed\x0d\xa8\x71\x82\x03\x50\xf2\xec\xe1\xc8\x29\x5c\x37\x3b\x9f\x7f\xff\xa1\xe6\xdb\x16\x60\x20\xd2\x94\x15\x3b\x4d\x4f\xf9\xf0\xae\xa6\xae\x5d\x96\xb2\x74\x63\xbf\x49\x47\xc7\x0e\xdb\x44\x27\xdc\x91\x7e\x82\x69\x77\xa7\x35\x19\x2d\xb3\x7d\x59\x18\x33\xd8\x6d\x69\x58\x73\xf0\x4b\xe6\xa5\x07\x61\x9d\x36\xa7\x39\x13\x8f\x64\x3d\xa7\xae\xbb\x1a\xea\xff\xa3\xac\xb9\x29\x7a\xb2\x24\x0b\xf5\x32\x0c\x5b\x2e\x99\x61\xe4\xa4\x6a\xea\x7b\x1d\xad\xaf\xe6\x33\x42\x69\xee\xf4\xbd\xf1\xc2\x8f\x74\x68\x7d\xa9\x13\x4f\xe2\x41\xb0\x77\xf3\x99\x6e\xf7\xe7\x2b\xe6\x4c\x16\x37\xdd\x93\x0c\x1e\x85\xae\xd2\x97\x52\x7f\xbf\x35\x46\x1b\xca\xfc\xa8\x38\xf8\x5c\xf0\x89\xa5\xda\x15\xcf\xaf\x35\x1a\xff\xa2\xe5\xe2\x32\xfb\xd5\x92\x72\x0d\x05\x98\x17\x67\x00\x5d\x94\x62\xc0\xf5\x52\x1c\x7f\x8c\x63\x4e\x1c\x85\x9b\x6d\x52\xb7\x54\x9d\x49\xb0\x36\x25\x4f\x8b\x47\x34\x7e\xe3\xc4\xb3\xeb\xc6\x8b\x4f\xd0\x83\xae\x9a\x75\xbb\xd8\x29\xa1\x2f\xd7\x77\x52\x55\x5d\x8d\x2f\x6a\xa6\x83\x46\xfd\x6a\x1a\xd4\x9b\xb0\xa7\x61\x7d\x3d\x27\x3f\x74\xd2\x66\xa9\x57\x09\xec\x4d\x0a\x5b\xf7\xa1\xdb\xbf\xad\x24\x2a\x92\x5a\xe4\x62\x69\x7a\x33\x4b\x97\xd6\x8e\x44\x14\xd4\xe4\xc7\xff\xbf\xfc\xae\xff\x56\x59\xc6\x8d\x2e\x9b\x09\x21\x6f\xfe\x30\xa9\xbf\x12\x87\xe5\x5f\xd2\x90\xf3\x67\xf4\x79\x4c\xac\xe5\x79\x64\x43\xd3\x3c\xaa\xff\xd5\xe9\x02\x36\x70\x36\x8f\x0a\x7e\x99\x07\xb5\xaa\x5e\x06\x6b\x6e\x47\x0b\xd1\xcb\x49\x9a\x7a\x7b\xcf\x47\x45\xad\x7d\x01\xf0\x52\x45\x1b\xd7\x2c\x2a\x67\xc2\x36\x6d\xdc\x3f\x01\x00\x00\xff\xff\x82\x87\x12\x03\x0a\x1c\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 7178, mode: os.FileMode(420), modTime: time.Unix(1537795722, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x23, 0x0, 0x88, 0xc5, 0x3b, 0x98, 0x60, 0xb7, 0xd, 0x75, 0xbc, 0x68, 0x62, 0x3a, 0x5, 0x31, 0xe0, 0xa7, 0x8, 0x87, 0x4f, 0xb2, 0x73, 0x96, 0x31, 0xb, 0xc5, 0x5f, 0x80, 0xdf, 0x70}}
	return a, nil
}

var _dbMigrations0002_event_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8b\x1a\x4f\x10\xc5\xef\xf3\x29\xde\x41\x50\xf9\x8f\xa2\xff\xe4\x10\xf0\x64\x58\x59\x16\x42\x72\x08\x9e\x43\x3b\x5d\x8e\x4d\x7a\xaa\x3b\x55\x35\x26\x7e\xfb\xd0\xad\xbb\x28\x49\x2e\x03\x3d\xf5\xde\x9b\xdf\x9b\xea\xc5\x02\xff\x0d\xa1\x17\x67\x84\x7d\x6e\x9a\xc5\x02\x2f\x1c\x2c\xb8\x08\xef\xcc\xd5\x17\xbb\x33\xb1\xc1\x2e\x99\xb4\x1c\xb7\xde\x23\xdc\x34\xf4\x36\xc2\xd9\xc5\x91\x14\xe1\x08\x3b\x11\xcc\x1d\x22\x21\x28\x68\xc8\x76\x69\xee\x3f\xf3\xd5\x9c\xd1\x40\x6c\x1f\xa9\x0f\xdc\x3c\x7d\xc1\xa7\xed\xe7\xe7\xfd\xf6\x79\x87\x1c\x73\xaf\x3f\x22\x26\x93\xe6\x50\x87\x00\x4a\x22\x27\x03\xfd\x0a\x6a\x8a\x99\x52\xa4\xce\x10\x3c\x8e\x92\x86\x2b\xc1\xb7\x4a\x10\xc3\x10\x0c\xeb\x79\x01\xb8\x5a\xab\x9d\x95\xc4\x10\xd8\xd2\xbd\x78\x56\x9e\x2d\x84\x74\x8c\xd6\xc2\x93\x76\x12\xb2\x85\xc4\xf3\x5b\x95\xb7\x84\xd9\xbb\x16\xab\x16\xd3\x17\x56\x73\xdc\x11\x84\x72\x12\x23\x0f\xc7\x20\x91\x24\xf0\xa3\x04\xee\xcb\x79\xcc\xbe\x94\x54\xa3\xbc\x9c\xce\xdb\x87\x90\x75\x8b\xe9\xbe\xce\x05\x27\xa7\xc8\x92\x3a\x52\xad\x41\x1e\x2e\xe7\x18\xc8\x23\xbb\xee\xbb\xeb\xe9\x0f\xf7\xff\x77\x08\x8a\x31\xf7\xe2\x3c\x79\x58\x42\x37\x8a\x94\x3d\x74\x27\xc7\x4c\x11\x67\x12\x0d\x89\x1f\x13\xd6\x37\x80\xa7\xf4\x93\x63\x72\xbe\xf0\x46\x67\xa4\xf6\x0f\xfd\xfb\x7b\xe0\x57\x2a\x38\x91\x70\x26\x0f\x1d\xbb\xc2\x7e\x1c\x63\xbc\x3c\x1a\x3f\xac\x56\x57\x67\x85\x8d\xf1\x55\xba\xc4\x2d\xaa\x4b\x43\x8e\x54\x7e\x35\xb2\xd4\x95\x90\xc7\xe1\x52\x36\x55\xcb\x2d\xa7\xf3\x4d\x8d\x23\xf6\x08\xc7\x4d\x43\xec\x37\xcd\x64\xb2\xf9\xfb\x35\xda\xb1\x6f\x1e\x26\xa5\x61\xf3\x3b\x00\x00\xff\xff\x2e\x82\xee\x9e\xd9\x02\x00\x00")

func dbMigrations0002_event_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0002_event_dataSql,
		"db/migrations/0002_event_data.sql",
	)
}

func dbMigrations0002_event_dataSql() (*asset, error) {
	bytes, err := dbMigrations0002_event_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0002_event_data.sql", size: 729, mode: os.FileMode(420), modTime: time.Unix(1537957106, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0xe9, 0x46, 0x83, 0xf5, 0x9c, 0x90, 0x5b, 0xa7, 0xd8, 0xdf, 0xb6, 0xb9, 0xf4, 0x9e, 0x1a, 0x6b, 0x5f, 0x66, 0x58, 0x61, 0xb9, 0x54, 0x3c, 0x93, 0x3b, 0xd9, 0x5b, 0xae, 0xf, 0x92, 0x8f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql": dbDrop_all_tablesSql,

	"db/sample_data.sql": dbSample_dataSql,

	"db/migrations/0001_initial.sql": dbMigrations0001_initialSql,

	"db/migrations/0002_event_data.sql": dbMigrations0002_event_dataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"drop_all_tables.sql": {dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": {nil, map[string]*bintree{
			"0001_initial.sql":    {dbMigrations0001_initialSql, map[string]*bintree{}},
			"0002_event_data.sql": {dbMigrations0002_event_dataSql, map[string]*bintree{}},
		}},
		"sample_data.sql": {dbSample_dataSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
