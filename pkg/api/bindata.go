// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/drop_all_tables.sql (674B)
// db/sample_data.sql (15.597kB)
// db/migrations/0001_initial.sql (7.178kB)
// db/migrations/0002_event_data.sql (729B)
// db/migrations/0003_longer_team_names.sql (142B)

package api

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x8e\x85\x30\x0c\x43\xf7\x9c\xa2\xf7\xe0\x30\x91\x09\x19\x88\x28\x6d\xd5\x04\x34\xdc\x7e\x24\xc4\x6c\xbe\xbe\x14\xf6\x2f\xb6\x63\xcf\xbd\xb6\xe4\x98\xb2\x24\xfd\x49\xf2\xab\xe6\x96\x5c\xb0\x27\x86\x31\x66\x19\x87\xaf\xc8\x61\xd2\x2d\x60\xd0\x5a\x56\x86\x6b\x2d\x01\xd9\xc0\x1b\x16\x09\x28\xae\x5d\xaa\x11\xf8\x85\x22\xaf\x28\x45\x72\x40\x2d\xbd\x1e\x2d\x7a\x43\x8b\x39\x0a\x47\xe9\xfe\x31\x32\x87\x1f\x6f\x45\xe9\x7d\x49\x1f\x06\xb4\xaa\x79\xed\x57\x70\x25\xa7\x14\x27\xbf\x5a\x94\xff\x06\xa3\x45\xd9\xf5\x54\x8f\x3c\x9f\x39\xe9\x19\x81\xa6\x0c\xde\xb2\x5a\x24\x3f\xc3\x31\xc1\x84\x76\x5d\xfa\x5d\x89\x8d\xc3\x5f\x00\x00\x00\xff\xff\xda\x81\x6e\xb2\xa2\x02\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 674, mode: os.FileMode(420), modTime: time.Unix(1537251402, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0xfc, 0xeb, 0x41, 0x72, 0xb1, 0x9f, 0x5b, 0xf7, 0xb3, 0x6a, 0xf1, 0xba, 0xb6, 0x59, 0x6d, 0xe3, 0xa0, 0x60, 0xc2, 0x4a, 0x87, 0xe8, 0x26, 0xfc, 0x10, 0x23, 0x2a, 0xf1, 0xbb, 0xd4, 0x16}}
	return a, nil
}

var _dbSample_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5b\x73\x13\x39\xd3\xbe\xe7\x57\xa8\xea\xbb\x30\x14\x96\xa3\xf3\x21\x5b\x7b\x11\xc2\x06\xd8\x0d\x2c\x21\xb0\x14\x7b\x93\xd2\xa1\xe5\x0c\x19\xcf\x78\x67\xc6\x09\xc9\xaf\xff\x6a\xc6\x89\xe3\x10\xf2\x66\xec\x10\xc8\xae\x29\x9b\xb1\x94\x96\xfa\x79\xd4\x6a\x75\x4b\x32\xc6\xe8\x55\x91\x35\x99\xcb\x51\x74\x8d\x7b\xf4\x08\x63\xf4\x1c\x92\x9b\xe5\x0d\x6a\xc0\x4d\x90\x2b\x22\x9a\xd5\x50\xa1\xc7\x2e\x4e\xb2\x62\xa3\xfb\x7c\xf2\x28\x2b\x6a\xa8\x1a\x94\x15\x4d\x39\xff\xbb\xc7\x59\x1c\xa2\xc2\x4d\xe0\x09\x3a\x76\xf9\x0c\x6a\xf4\x78\x10\x8d\xe5\x82\xc5\x80\x2d\xa3\x02\x0b\x41\x23\x76\xc2\x25\xec\x63\x34\x5c\x3b\xee\x19\xb7\x83\x21\x1a\xc4\x79\x87\x83\x27\xbf\x5c\x69\xb7\xed\xb6\x46\x8f\xdb\xff\xda\x86\x87\xa8\x86\x50\x41\x33\xec\x3a\x3c\xc8\xe2\x52\x4f\x9d\x56\x6d\x53\xc6\x73\xca\x2c\x8b\x42\x6b\x23\x0d\x0b\x04\x64\x72\x56\x39\x00\x29\x29\x4f\xb4\xeb\xae\x8f\x5a\x4f\x7e\xe9\xb8\xd8\x2e\x2b\xf8\x73\x1f\xb9\xe9\x34\xcf\x82\x6b\xb2\xb2\xb8\xa2\xe2\x52\xf9\x25\x03\x43\x14\xa1\x0e\x55\x36\x6d\x8b\xbf\xa5\x2d\x58\xc5\x0c\x75\x0a\x47\xea\x12\x16\x3e\x02\xb6\x8e\x38\x6c\xb5\xd7\x0a\xa4\x8a\x41\xea\x56\xd1\x79\xe7\xed\xd3\x6e\x56\xcc\xbe\xa0\x54\x56\x68\xe2\xea\x3a\x3b\x06\x54\x43\x75\x0c\x15\x8a\x30\xcd\xcb\xd3\x09\x14\x4d\xbd\x0a\xb4\x65\x0c\x53\x17\x8e\xdc\x18\x2e\xd5\x63\xde\x89\x60\x8d\xc0\x12\xac\xc7\x82\x52\xc0\x5e\x07\x8e\x3d\x07\x4f\x45\xd2\x8e\xa9\x96\x47\x3a\x44\x03\xad\xd4\x88\x8f\x48\xdb\xf5\x61\xd3\x4c\xeb\xcd\x8d\x8d\x50\x4e\x26\x65\xd1\x1a\x53\xdd\x94\x95\x1b\xc3\x68\x5c\x96\xe3\x1c\xdc\x34\xab\x47\xa1\x9c\x6c\xcc\xa6\xd1\x35\x80\x2f\x6a\x43\x59\x01\x2e\xeb\x51\x01\xcd\x86\x9b\x44\x25\xf0\xac\xae\x36\xce\x1b\xde\x68\x5b\x9e\x0b\x8c\xc6\x67\x83\x21\x7a\xf3\x61\x77\x77\x88\x06\x54\x0a\xab\xb4\x90\xa6\xad\xcf\xc5\x1f\x27\x7a\x0b\x9e\xed\x56\x7f\xbd\x7a\x6e\x7f\xf7\xe9\xf4\x75\xf9\x3b\x3c\x93\xa7\x7f\x8c\x7f\x6d\xeb\x19\xa1\x12\x13\x8b\x19\x41\x84\x6c\x52\xb6\xc9\xf5\x48\x32\x6e\x79\x27\xdd\x6b\x30\x6e\xa3\x8c\x73\xed\x79\xd2\x80\x53\x62\x16\x0b\x0d\x06\x3b\x22\x19\x4e\xc4\x70\x11\x99\xf4\xd1\xcb\x25\xca\xc4\x7d\x51\x26\xfe\x17\x65\x92\x50\x63\x29\x6b\xeb\x53\x75\x74\xe4\x9e\x3e\xdb\x38\x7b\x7f\xac\xff\x7c\xfb\x71\x9c\xc5\x4f\x4f\x8f\xc4\x7e\xf1\x7c\xff\x3a\x65\x6a\x93\xca\x4d\x66\x47\x94\x18\xa6\xd4\x77\xa3\x2c\x30\xc7\x15\xa7\x0c\x7b\x6b\x2c\x16\x84\x03\x76\x5e\x6a\x4c\x54\x20\x52\x3a\x0d\x2e\xb0\x73\xca\x0c\x31\x23\x72\x1f\x94\x9d\x37\x7c\x23\x65\x5a\x6b\xaa\x05\x15\x6d\xbd\xff\x87\xa7\xbd\x77\x2f\xdf\x9a\x2f\xcf\xf8\xbb\x9d\x0f\x9f\xb7\xe3\x56\xe2\x27\x7b\x9f\xb6\xd9\x6f\xdf\xb0\x32\x62\x37\x89\x1a\x19\x6e\xad\xb1\xdf\x8d\x32\xc1\xa5\x21\xc6\x32\x1c\x5c\x34\x58\x28\xe3\xb0\x23\xde\x63\xf0\x36\x12\x20\x16\x82\x13\x17\x94\x51\x79\x4f\x94\xcd\x1b\xbe\x99\x32\xa3\x04\x97\xba\x03\x7d\xf4\x46\xb8\x49\xf9\xc7\xa7\xbf\xfe\xfe\xf0\x82\x7d\x2c\xf7\xe3\xde\x4b\xfa\xf6\xe5\xdb\xb3\x4a\x6e\x5d\xa5\x4c\x22\xca\x37\xa5\xdc\x64\x64\xd4\xd2\x4d\xbf\x1f\x65\xcc\x88\xc8\xac\xf4\x58\x52\x93\xb0\x88\x4a\x63\x6b\x2d\x60\x2b\xac\x32\x91\x00\x44\x4b\x2e\x28\x63\xf6\x9e\x28\x9b\x37\x7c\x23\x65\x46\x31\x21\xe5\xdc\xca\x58\x7e\x58\x7e\x38\x3e\x2e\xca\x4f\x5c\xda\x69\xc6\x76\x0a\xb7\xbf\xf1\xa5\x1e\x37\xd9\xd2\xc4\xa4\x04\x53\x82\x18\xdf\xa4\x74\x93\x92\x91\x61\xd2\x1a\xb9\x2e\x65\xe1\xd0\x15\x05\xe4\x4b\xab\x13\x51\x44\x09\x17\xdb\xe5\x43\x60\x61\x89\xc0\xd6\x29\xc0\x29\x0a\x25\xa5\xe5\x91\xfa\xce\x87\xd4\x8d\xf3\x39\xb4\x4f\xff\x47\x85\xb7\x51\x2d\x0f\x29\xb5\x88\xc8\x76\x16\x70\x31\x62\x8a\x32\x41\x7b\xeb\x37\x44\xfd\xdc\xe9\x6d\x38\x28\x33\xde\x04\x66\xb1\x24\xb2\x9d\x2d\x82\x63\x03\x4a\x63\x47\x1d\x01\x1e\x94\xa0\xa1\xb3\x33\x0f\x8d\xeb\x50\xa4\xa0\x13\xe7\x37\xa3\x10\x9c\x8b\x1f\x8e\xc2\x19\xed\x08\x6f\x47\xa3\x5d\x91\x85\x76\x14\x9b\x18\x04\xe6\x92\x68\xef\xc0\x52\x80\x8e\x5a\x97\x4f\x0f\xe7\x30\x68\xf2\xde\xfc\x8f\xc1\x90\x5a\xae\x04\xa3\xd7\x14\xfa\x0a\xc6\xb8\x2a\x67\xd3\xfa\x12\x85\x75\x2c\x82\xd7\x04\x73\xed\x01\x0b\xc2\x14\x36\x92\x27\xec\x53\x8c\xca\x73\xa1\xbd\xef\x2c\x69\x7f\x61\x53\x3b\x65\x85\xa6\x55\x19\x67\xa1\x0b\xae\x42\x3e\xab\x1b\xa8\xda\x20\x27\xb9\xbc\x86\x21\x6a\xaa\xd9\xe2\xf3\xbc\x68\xb0\x35\xab\x9b\xca\xe5\x99\xdb\xd8\x3f\x8d\x05\x9c\x0e\xba\x75\x0f\x4d\xb2\x62\xd6\x40\x2b\xcb\x86\x68\xa0\xc8\x52\xc1\x0d\x1c\x59\xa2\xd8\x2a\x1c\xf5\x9a\x33\xb7\x70\xc4\x13\x50\x22\x2c\xc1\x31\x6a\x8e\x85\x17\x16\x7b\xcd\x1c\x66\xc6\x05\x6a\x5d\x48\x21\x86\xb6\xaf\x67\xe7\xf6\xfa\xb6\x2a\x27\x65\x03\x11\x75\x43\x8f\x2a\xc8\xc1\xd5\x50\x0f\x51\x6b\x46\xae\x09\x87\xc8\xcf\xc6\x35\xaa\xa7\x10\xb2\x94\x85\xb6\xf8\xb4\x9c\x55\x28\x94\x45\xca\xc6\xb3\xaa\x8b\x5a\x07\x57\x89\xbc\x1f\x3a\x35\x67\x62\x25\x93\xeb\x35\x75\x6f\xa1\x53\x7a\x43\x89\x32\x04\x03\x57\x0e\x0b\xa3\x6d\x1b\x69\x38\x2c\x92\x35\x16\x0c\xf1\xc6\x76\xd3\x7f\xeb\x62\xe2\xbc\xaf\x5c\x38\xaa\x51\x98\x55\x15\x14\x0d\x8a\x70\x0c\x79\x39\x6d\x43\x6b\x74\x52\x56\x47\x5d\x26\x94\xd5\x17\x3c\x47\x94\x2a\xf8\x67\x06\x45\x93\x9f\xde\xd1\x28\xdb\xc5\x87\xf7\x60\x51\x58\xba\x92\x17\xed\xe5\x3a\xbe\xf6\x3f\x65\x05\x65\x7d\xe0\xe6\xb3\x6e\x41\xa6\x67\x9e\x2a\x60\x80\xa5\x4e\x06\x0b\xad\x25\x36\x4c\x27\x6c\x12\xf1\x94\x3a\xb0\x3e\x76\xf3\x65\x5a\xd6\x4d\x56\xd4\x8d\xcb\xf3\xf6\x6b\x17\x04\x98\xed\x67\xa6\x79\x0d\xe4\xb5\x79\x7e\xfa\xb7\x7c\xf7\xf7\xc9\xd9\xf3\xdd\xd3\xf7\xf1\xe8\xe5\xe7\x3f\x37\x3e\x8d\xd3\x1f\x7f\x15\xec\xdd\xf8\xc3\xeb\xf2\x28\xfc\x7a\x49\xe4\x15\x3e\x07\x83\xa5\xf7\x37\xa3\x79\xce\x98\xe9\xb8\xe9\x95\xbb\xf4\xc3\x1c\xa5\x63\xc1\x27\x8e\x5b\x43\xc2\x02\x4c\xc0\xc6\x80\xc1\x2a\x26\x4b\x53\x60\x4a\x04\x75\x03\xe6\xbd\x0f\x2f\x8a\xc9\x5b\x49\x0f\xa7\xfa\xec\xf4\xe9\xd3\xa7\xa5\x4c\xcf\x5e\x9d\xfc\x96\xbf\x2a\xde\x6f\x4d\x6a\xbd\x51\x7c\x2e\x8e\xbe\xcc\x9a\x62\x63\xef\xd5\xca\x98\x17\xe1\x38\x55\xf3\x45\x7f\xad\x65\xe6\xdb\x90\x99\xb5\x41\x8a\x48\x31\xe7\x42\x60\xe1\xc0\x62\xe3\x22\xc3\x32\x28\x1e\xa5\x8a\x2a\xcc\xa3\x94\x6f\x40\xde\xdf\x3e\x36\xf6\xc5\xa7\xb3\x2f\xfa\xd5\x97\xa7\xef\xf3\xcf\xff\xf8\x37\x75\xd4\x65\xa1\x64\x59\x7e\xfc\xe7\xd9\x59\xd8\xae\x76\x77\x76\xc5\xc9\xf6\xe1\xde\x1a\xc3\x3c\x0f\xa7\x2d\xd3\xa2\x4b\x3d\xfb\x25\x0f\xfd\x30\x6b\x61\x62\x92\x29\x60\xca\x9c\xc4\x22\xba\x88\x9d\xa6\x80\x85\x92\x21\x50\xa5\x0c\x11\xe6\x06\xcc\xf6\xe5\x87\x5a\x9c\x1c\x66\x67\xe9\xf4\xd8\x8b\xc9\x38\x7f\xfa\xd1\xbd\x71\x1f\xf9\x5f\xbb\x7b\x9f\x4e\xea\x8f\xf4\xc5\xcb\x37\x2f\x7f\x7f\x33\x0d\x3b\x63\xb1\x1a\xe6\xa5\x78\xd8\x30\xc9\x44\x37\xb7\x7a\x45\xff\xfd\x30\xdb\x10\x85\x16\x41\x62\x48\x8e\xb7\xee\xc1\xb6\x4b\x3a\xc3\xd2\xc4\xe8\x8d\x64\x10\xcd\x4d\xe3\x4c\xf7\xed\xd9\xde\xf6\xee\x8b\xcf\x13\x48\x9f\x8a\xdf\x36\xdc\x4e\x98\x6e\x7f\xde\xa5\x6f\xea\xf1\xec\xe5\xe1\xde\x8b\xcf\xe4\xc3\xf6\x44\x26\xf2\xda\x9a\xfe\x98\xbf\x0a\x68\x2d\xe5\x5a\x9b\x55\x62\x8f\x47\x18\xa3\x7d\x37\x99\xe6\x70\x65\x4b\x86\x7e\x87\xcd\x1a\xaf\x84\x34\x84\x48\x6c\x92\x20\x58\x28\xa6\xb1\xe7\xdc\x63\x0f\x9a\x38\x4d\x4d\x10\x66\x1e\xba\x5c\xeb\xbe\x2d\xfd\x7d\x56\x37\xc8\x15\x57\xfa\x6e\x4a\x54\x1f\x96\x27\xa8\x7d\x87\xb2\xcc\xbb\x4d\xa6\x77\x65\x9e\x43\xd5\x2e\x30\x9b\x4f\xee\xba\x93\xd3\x81\x6b\x4e\xa7\x30\x44\xb3\x2a\x1f\xa2\x94\xe5\x30\xc7\x7a\x0c\x55\xdd\xe1\x5c\xd2\xe7\x2a\x5c\x49\xad\x6c\x3d\x1f\x96\xc9\x30\x4c\x29\x48\x6c\xa3\x26\x38\x41\x4a\x86\xda\x10\x83\x4d\x83\x21\x12\x57\xb2\xa4\x0a\xaa\x4e\xfd\x51\x59\x8d\xbb\x34\xa7\x81\xba\x39\xa0\x23\x32\xea\x2c\x77\xf1\xd0\x8b\xcb\x7b\x00\x45\x99\xb2\x3a\x39\xd1\x82\xe2\x77\x07\xc5\x2f\x40\xf1\x9f\x09\xca\x10\x22\x7c\xeb\x0a\x64\xb2\xfa\xee\xa0\xc4\x05\x28\xf1\x33\x41\xb9\xf3\x57\x0b\xca\xdc\x1d\x94\xbc\x00\x25\xd7\x05\x75\x91\x90\x2d\x39\x8c\x50\xe6\x65\xf5\x35\x86\xe1\x05\xfc\xaf\xbc\x47\x02\xce\xbc\x68\xf1\x98\x70\x33\x9e\xc1\x6b\xd7\xa6\x37\x5d\xfe\x46\xc8\xf6\x36\x21\xbd\xf5\xed\xf6\xc7\x7a\x58\xc2\xf7\xc5\x15\x3c\x8b\x00\xce\xdc\x32\xa3\x96\x12\xba\xff\x23\xc4\xda\x9d\x9d\x55\x70\xf5\x9a\xb6\xdf\x17\x57\x3c\x7f\xdd\x86\x6b\xc7\x65\x79\x56\x8c\x3b\x60\x5b\x5b\xab\x02\xeb\x65\xe5\xb7\xe4\x37\x3e\x38\xa7\x8c\x0f\xb7\x38\xea\x36\x4d\x8c\xe8\xb7\x6d\x86\x66\x35\x3e\x81\xba\xc1\xec\xa2\xf4\x3c\xb5\x9e\x9f\x24\xd4\x43\xd4\xd6\xa2\x50\xba\xba\xf9\xc1\x59\x76\x5f\xda\x7a\x19\xdd\x2d\xb4\x69\xa2\x05\x53\xc2\x61\x46\x34\xc1\xc2\x1b\x81\xad\x82\x88\x8d\x63\xca\x46\xef\x24\x61\xf4\x6b\xda\xc0\xd5\x0d\xa6\x37\xd1\xd6\xd6\xfe\xe7\x69\xf3\x94\x12\x43\xb9\xbb\xcd\xda\xf6\x1c\x7e\x0e\xc7\xdd\xd3\x56\x97\x31\x2f\xa7\xd1\x0b\xca\x16\x04\x3c\x44\xba\x7a\xb9\xec\x5b\xe8\x0a\xe7\xaf\xdb\xe8\x3a\x77\x23\xe8\x92\xb6\x45\xc9\xbf\x95\xbe\x5e\x1e\xf4\x2b\xfa\xba\x1c\xa3\x08\xe7\xa1\x43\x36\x5d\x72\xc8\x17\x55\xdd\xf4\xa3\x64\xd4\xfe\xbb\x96\xc1\xf7\x90\x67\x4b\xf2\xd7\x52\xc3\x1e\xf2\x7c\x49\x9e\xaf\x21\x2f\x96\xe4\xaf\xa5\x69\x3d\xe4\xe5\x92\xfc\xb5\x74\xbe\x87\xbc\x5a\x92\x57\x6b\xc8\xeb\x25\xf9\x6b\x67\x08\x3d\xe4\xcd\x92\xbc\x59\x43\xde\x2e\xc9\x5f\x4b\x7c\xfa\xd8\x0f\x59\x36\xa0\x6b\x1b\xd6\x7d\x5a\xb8\x62\x82\xeb\xd8\x20\x5d\x36\x42\x7a\xa3\x15\x1e\x2c\x27\x8b\x97\x39\xcc\x79\xbe\x71\x7e\x59\xa2\x8b\x81\x17\xcf\x8b\x87\xf9\x99\xd2\xe2\xeb\xd5\xe9\xd3\xdb\x03\xf6\x09\x2d\x7e\xa0\xf2\xab\xb9\xef\x7b\x51\x9e\xad\xad\x7c\xff\x1c\xf1\x01\x32\xdf\x3f\x17\x1c\xa2\x7e\xa1\xd5\x0f\x54\xbe\x7f\xce\x77\x6f\xca\xaf\x6f\x36\xea\xe7\x2b\x4f\x97\x95\xe7\xab\x28\xaf\x7f\xbe\xf2\x62\x6d\xe6\xcd\x4a\x13\xb6\x4f\x5c\x7c\x37\x9b\xd7\xab\x28\x6f\x7f\xbe\xf2\x57\x6c\x9e\xad\xb4\x48\xad\xb4\xeb\x71\x3f\xda\xaf\x6f\xf4\x74\xb5\x35\xf6\xa1\x69\xbf\x5a\x4a\xd9\x27\xbf\xf9\x4a\x7b\x17\x9a\xec\x38\x6b\x4e\x17\x1a\x2f\x94\x28\xca\x93\xc7\x4f\x90\x6b\x50\x93\x4d\x00\x9d\x95\x05\xa0\xc1\xac\x09\x03\x84\x5b\x49\xa8\x8e\x5d\x8e\x06\x1c\x1d\x96\xb3\xea\xfc\xbc\x54\xac\xbc\x01\xdb\xd7\xd1\xf4\xcd\x97\xaf\xc4\x56\xdf\x17\xa9\x5a\x20\x95\xdd\x20\xfe\x77\x91\x52\xb6\x80\xca\xe7\xe7\xe0\xff\x5d\xa8\x66\x01\x55\xfc\xc7\xed\x97\x89\x05\x54\x36\xdf\x67\x78\xb8\x50\x17\x2e\xb5\x6e\x5c\x33\xab\x0f\x0e\xb3\xba\x29\xab\x6f\x20\x5f\x1e\xb1\x5e\x2c\x5c\x8e\xf7\x4f\x08\x48\x6f\x43\x23\xd7\x44\x83\x96\x77\x90\x1e\x20\x2e\xb5\x2a\x2e\xfb\x90\x47\x49\xaf\x89\x06\x89\x07\x3e\x4c\xec\xee\xc0\x10\x25\xa8\x86\x50\x16\xf1\x81\x62\x14\x4b\x07\xdf\xfd\x02\x1c\xf5\x90\x6d\x51\xae\x0b\xe7\xdf\xe2\x32\xfa\x03\xd3\x0f\x79\x9c\xf4\xba\x70\xfe\x35\x4e\xe3\x2e\xc8\x7e\x96\xd7\x80\x63\x28\x1a\xf4\x78\x5a\xc1\x71\x56\xce\xea\x83\xc5\x45\x08\xa8\xaa\xb2\x3a\x08\x65\x84\xe1\x25\x13\x59\xbc\x7e\x5a\xdd\xb5\x70\xd0\x9c\x4e\xe7\x07\xd6\x35\xe4\x10\x9a\xcb\x6b\x54\x6b\xa5\x71\xd0\x8c\xb2\x88\x52\x55\x4e\x96\x9a\x47\xd0\xa0\x93\x43\xa8\xda\x87\x51\x57\xf0\x2b\xe2\xdd\x59\x14\x34\xa3\x0a\xea\x59\xde\xa0\x5f\x11\xb9\xf1\xce\x15\xfb\x0e\x77\xae\xb4\x21\x51\x59\x41\xb0\x75\xc2\xcc\xef\x54\x1b\x13\x13\xb6\xd2\x3b\xc5\xbd\x07\x1b\xfc\xe0\x9b\x77\xae\x50\x87\x7f\xab\x28\x9b\x43\xa8\x50\x7d\xad\x7e\x88\x12\x40\x8e\x52\x05\x80\x9a\x12\x55\x30\x29\x8f\x01\x4d\xe6\x27\x57\x3f\xe9\xca\x15\x24\x4f\x8d\x0a\x16\x47\x19\x3c\x16\x31\x31\x6c\xb9\x61\x38\x08\xc3\x28\x88\x18\x82\xf0\x4b\x77\x5e\x36\x37\x36\xf2\x32\xb8\xfc\xb0\xac\x9b\x4d\x43\xc8\xfc\x87\x25\x11\x26\xe5\xc1\x31\xbd\xf8\x05\xcb\xe2\xa1\x17\x95\xf7\x00\xca\x3b\x66\x5c\x12\x06\x7b\xe9\x2d\x16\x8a\x00\xb6\x42\x39\x0c\xde\x59\xa2\x02\xe8\xe8\xd2\x0a\xa0\xe8\x05\x28\xba\x2e\xa8\x3b\x5e\x0c\x71\x3a\x98\x60\x9d\xc0\x91\x39\x8e\x85\x96\x11\x7b\x50\x02\x5b\x4a\x53\x32\x51\x81\xb5\xdd\xae\xe7\xd2\x45\x9e\xcb\x5f\xc5\xf4\xb5\xe7\x5e\x96\x70\xdb\xbd\x77\xea\x38\x73\xce\x62\x2e\x25\xc3\xc2\xa6\x80\x1d\x33\x01\x2b\x29\xb8\x0f\x21\x11\xa2\xec\xa5\xa2\x08\xa3\x38\x3f\x78\x7e\x7f\x08\x28\x77\x0d\xd4\x0d\xaa\x9b\x59\x4a\xe8\x24\xcb\x73\xe4\x01\xb9\xfc\xc4\x9d\xd6\xa8\x75\x09\x3f\xf8\xc8\xb9\x2f\x6d\xbd\xc6\xe6\xc9\x2f\x8f\xfe\x3f\x00\x00\xff\xff\x47\x1d\x77\xd0\xed\x3c\x00\x00")

func dbSample_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSample_dataSql,
		"db/sample_data.sql",
	)
}

func dbSample_dataSql() (*asset, error) {
	bytes, err := dbSample_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/sample_data.sql", size: 15597, mode: os.FileMode(420), modTime: time.Unix(1537957279, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xb3, 0x7a, 0x26, 0x17, 0x60, 0x88, 0x71, 0x60, 0x5e, 0x9a, 0x50, 0x46, 0x34, 0x5f, 0x1c, 0xde, 0x18, 0xa0, 0xdf, 0x96, 0xd8, 0x2, 0xca, 0x6d, 0x3e, 0xe, 0xe2, 0x2a, 0x9d, 0x43, 0x1}}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xc1\x6e\xe3\x36\x10\x3d\x5b\x5f\x41\xec\xc5\x36\xea\x00\xe9\x62\x93\x4b\xda\xbd\xb4\x5f\x50\xa0\x67\x62\x42\x8e\x6c\x22\x14\xa9\x92\x94\x1b\xe7\xeb\x0b\xca\x94\x44\x49\x94\xac\xb5\x5d\x34\xe8\xd5\x7a\x43\x0e\xdf\xbc\x37\x1a\xca\x0f\x0f\xe4\xa7\x42\xec\x0d\x38\x24\x7f\x96\x59\xf6\xf0\x40\x7e\xd3\x06\xff\xd0\x52\xa2\x21\x96\x1d\xb0\x80\x2c\x03\xe9\xd0\x10\x0e\x0e\x5e\xc1\x22\x61\xda\xa0\x09\x08\x74\xc4\x89\x02\x3f\xb4\x42\xf2\x2b\x59\x57\x8e\xad\x5f\xb2\x8c\x19\xf4\x2b\xe2\xbb\x43\x65\x85\x56\x44\xe4\x44\x69\x47\xf0\x5d\x58\x67\xc9\x97\xaa\x12\xfc\x41\x5b\x5b\x7e\xe9\xc0\x0e\x5e\x25\x12\x87\x50\x90\x4d\xb6\x12\x9c\x78\x10\x29\x8d\x28\xc0\x9c\xc8\x1b\x9e\x08\xc7\x1c\x2a\xe9\xea\x07\x74\x8f\x0a\x7d\xda\xf4\xf8\x6d\xb3\xdd\x65\x2b\x05\x05\x92\x23\x18\x76\x00\xb3\xf9\xfa\xb4\xad\xf7\x53\x95\x94\x84\x1d\x90\xbd\x91\x4d\x0d\xf8\xe5\x3b\x59\xaf\xb7\xa4\x52\xe2\xaf\x0a\x77\xd9\xea\xbc\x37\xa7\xce\xd6\xc7\xb0\x0e\x8a\xd2\x7d\xb4\x3b\xb1\xca\x18\x54\x8e\xb6\xcf\xda\x55\xb3\xed\x30\xf3\xca\xa2\xb1\x57\xa5\xee\x23\x2f\xa6\xdf\x82\x86\x47\xb0\xc8\x0c\xba\x36\xf6\xe9\x71\x1c\x1b\x20\xe7\xc8\x5b\x4e\xbd\xcb\x56\xbe\x40\xb4\x39\x62\xbb\x91\xc1\x1c\x0d\x2a\x86\x36\x54\x50\xf0\x2d\xd1\x8a\x70\x94\xe8\x90\x30\xb0\x0c\x38\xc6\xa4\x09\xc5\xf1\xdd\x43\x02\x6f\x61\xdd\x11\xad\x50\x96\x52\x30\x70\x5e\x45\x37\xeb\x22\x45\x4e\x44\xea\x2e\x5b\x71\xb4\xcc\x88\xb2\xde\xce\xe1\xbb\xfb\x0f\xd9\xf2\xca\xa8\x8b\xdc\x92\xb3\x23\x3e\xd9\xed\x58\x7b\x25\xb0\x37\xd8\xe3\x55\x04\xb9\x53\xe9\xab\xe1\x46\xc4\xd4\x0f\xbe\x93\x47\x0f\x3a\xa2\xa9\x7d\xdc\x29\x34\x21\xd1\x06\xd4\x92\x59\x19\x19\x45\x3c\x27\x44\x6d\x64\x87\xce\x85\xc4\x5e\xb5\x7e\x7e\x7c\x9c\x28\x89\x15\x1f\x91\x5b\x6a\xd4\x01\xec\xa1\xfd\xe9\xf9\xdb\xad\x32\x8f\x64\x37\x5b\xbf\x9e\x3c\xe7\xcb\xb8\xe9\xaf\xb9\x23\x81\xaf\x44\x3d\x7d\x87\xd5\x96\x02\xbb\x5a\xf6\x78\x44\xe5\x62\x8a\x5a\xf8\xba\xd4\xd6\x09\x65\x1d\x48\xb9\xde\x91\x6c\xc5\x0e\x46\x17\x7e\xbb\x64\x91\xdb\xb0\x1a\x6b\x0f\xf0\xf5\xe9\x79\xc0\xb3\x42\xe4\x96\x02\x2f\x84\x22\xaf\x5a\x4b\x04\xd5\x86\xe5\x20\xad\xa7\x40\x58\xca\x51\x3a\x98\x04\x70\x61\xfd\xd1\x69\x09\x27\xa9\x81\xd3\x57\x60\x6f\x3a\xcf\x47\x78\x67\xea\xae\x57\xa0\x03\xff\x42\xa2\x56\xec\x15\xb8\xca\x20\x35\x16\xfa\x6a\x8b\x52\xef\x05\x7c\xf4\x25\xd6\xc7\x71\x04\x2e\x85\x9a\x83\xdc\xa2\xab\xe0\xd4\x59\x4d\xb5\x6e\x5e\xde\x44\x07\x82\xe9\x76\x19\x4b\xeb\x00\x4a\xa1\xfc\xd7\xdf\xb1\x9e\x27\x2d\xb5\x49\xe2\x3f\x93\x39\x87\x15\xb9\x5c\x08\x3f\xf4\x84\x4c\x9a\x06\x3d\xb4\xf6\xa8\x4f\x77\x95\x6a\xf8\x9f\xa9\xd1\xde\xe8\xaa\xbc\x6e\x96\xb8\xf1\x75\x17\xb3\xec\x47\x3c\x5d\x39\x2a\x14\x2d\x8d\xde\x1b\xb4\x36\xed\xde\x9e\xbe\xb5\x14\xec\x44\xab\x92\x83\x43\x4b\x51\xf9\x03\xf1\xa4\x8b\x13\x61\x16\x72\xa4\x85\xe6\xb8\x34\x40\xe7\xb9\x60\x48\x0f\xba\x32\xcb\x93\x6b\x07\xd6\x86\xa7\x6f\xf5\x1b\x24\x3c\x2d\xd1\x08\xcd\xa9\x50\x0e\xcd\x11\x64\xaf\x87\x0e\xc9\x9c\x08\x69\xe9\x0d\xcf\x0b\x78\x6f\x19\x29\xd1\x04\xbc\x7f\xe9\xe2\x1e\xcd\xd4\xaa\x13\x51\xe1\x8d\xdc\x23\xba\x3e\x92\xae\xdc\x92\x64\x07\x11\x77\x19\x0a\xef\x6a\xc8\xe0\x90\x94\x21\x5b\xf3\xdc\xd1\x90\x8d\xd9\xba\x6d\x47\x7e\xac\xdf\x96\x8a\x35\xf3\x55\x6c\xaf\xd8\x98\x81\x67\xc1\x3b\x52\x45\x49\x84\x42\x77\x97\xc6\x37\x1e\x13\x9a\xbc\xa8\x75\xe0\xaa\xa6\x61\x58\x34\x02\x64\x9c\xd9\xa8\x75\x3f\xf6\x5b\xf1\x5c\x9f\x16\x2c\x9e\x08\xa2\xc0\x99\x74\x06\x33\xfb\x75\xc3\xe3\x2d\x7a\x0c\x7c\x04\x83\xed\xb2\x95\x04\xeb\x68\xbd\x13\xcd\xb5\x69\x6c\xf5\xe3\x0b\xd7\xeb\x04\x07\xed\x0d\xa8\x71\x82\x03\x50\xf2\xec\xe1\xc8\x29\x5c\x37\x3b\x9f\x7f\xff\xa1\xe6\xdb\x16\x60\x20\xd2\x94\x15\x3b\x4d\x4f\xf9\xf0\xae\xa6\xae\x5d\x96\xb2\x74\x63\xbf\x49\x47\xc7\x0e\xdb\x44\x27\xdc\x91\x7e\x82\x69\x77\xa7\x35\x19\x2d\xb3\x7d\x59\x18\x33\xd8\x6d\x69\x58\x73\xf0\x4b\xe6\xa5\x07\x61\x9d\x36\xa7\x39\x13\x8f\x64\x3d\xa7\xae\xbb\x1a\xea\xff\xa3\xac\xb9\x29\x7a\xb2\x24\x0b\xf5\x32\x0c\x5b\x2e\x99\x61\xe4\xa4\x6a\xea\x7b\x1d\xad\xaf\xe6\x33\x42\x69\xee\xf4\xbd\xf1\xc2\x8f\x74\x68\x7d\xa9\x13\x4f\xe2\x41\xb0\x77\xf3\x99\x6e\xf7\xe7\x2b\xe6\x4c\x16\x37\xdd\x93\x0c\x1e\x85\xae\xd2\x97\x52\x7f\xbf\x35\x46\x1b\xca\xfc\xa8\x38\xf8\x5c\xf0\x89\xa5\xda\x15\xcf\xaf\x35\x1a\xff\xa2\xe5\xe2\x32\xfb\xd5\x92\x72\x0d\x05\x98\x17\x67\x00\x5d\x94\x62\xc0\xf5\x52\x1c\x7f\x8c\x63\x4e\x1c\x85\x9b\x6d\x52\xb7\x54\x9d\x49\xb0\x36\x25\x4f\x8b\x47\x34\x7e\xe3\xc4\xb3\xeb\xc6\x8b\x4f\xd0\x83\xae\x9a\x75\xbb\xd8\x29\xa1\x2f\xd7\x77\x52\x55\x5d\x8d\x2f\x6a\xa6\x83\x46\xfd\x6a\x1a\xd4\x9b\xb0\xa7\x61\x7d\x3d\x27\x3f\x74\xd2\x66\xa9\x57\x09\xec\x4d\x0a\x5b\xf7\xa1\xdb\xbf\xad\x24\x2a\x92\x5a\xe4\x62\x69\x7a\x33\x4b\x97\xd6\x8e\x44\x14\xd4\xe4\xc7\xff\xbf\xfc\xae\xff\x56\x59\xc6\x8d\x2e\x9b\x09\x21\x6f\xfe\x30\xa9\xbf\x12\x87\xe5\x5f\xd2\x90\xf3\x67\xf4\x79\x4c\xac\xe5\x79\x64\x43\xd3\x3c\xaa\xff\xd5\xe9\x02\x36\x70\x36\x8f\x0a\x7e\x99\x07\xb5\xaa\x5e\x06\x6b\x6e\x47\x0b\xd1\xcb\x49\x9a\x7a\x7b\xcf\x47\x45\xad\x7d\x01\xf0\x52\x45\x1b\xd7\x2c\x2a\x67\xc2\x36\x6d\xdc\x3f\x01\x00\x00\xff\xff\x82\x87\x12\x03\x0a\x1c\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 7178, mode: os.FileMode(420), modTime: time.Unix(1537795722, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x23, 0x0, 0x88, 0xc5, 0x3b, 0x98, 0x60, 0xb7, 0xd, 0x75, 0xbc, 0x68, 0x62, 0x3a, 0x5, 0x31, 0xe0, 0xa7, 0x8, 0x87, 0x4f, 0xb2, 0x73, 0x96, 0x31, 0xb, 0xc5, 0x5f, 0x80, 0xdf, 0x70}}
	return a, nil
}

var _dbMigrations0002_event_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8b\x1a\x4f\x10\xc5\xef\xf3\x29\xde\x41\x50\xf9\x8f\xa2\xff\xe4\x10\xf0\x64\x58\x59\x16\x42\x72\x08\x9e\x43\x3b\x5d\x8e\x4d\x7a\xaa\x3b\x55\x35\x26\x7e\xfb\xd0\xad\xbb\x28\x49\x2e\x03\x3d\xf5\xde\x9b\xdf\x9b\xea\xc5\x02\xff\x0d\xa1\x17\x67\x84\x7d\x6e\x9a\xc5\x02\x2f\x1c\x2c\xb8\x08\xef\xcc\xd5\x17\xbb\x33\xb1\xc1\x2e\x99\xb4\x1c\xb7\xde\x23\xdc\x34\xf4\x36\xc2\xd9\xc5\x91\x14\xe1\x08\x3b\x11\xcc\x1d\x22\x21\x28\x68\xc8\x76\x69\xee\x3f\xf3\xd5\x9c\xd1\x40\x6c\x1f\xa9\x0f\xdc\x3c\x7d\xc1\xa7\xed\xe7\xe7\xfd\xf6\x79\x87\x1c\x73\xaf\x3f\x22\x26\x93\xe6\x50\x87\x00\x4a\x22\x27\x03\xfd\x0a\x6a\x8a\x99\x52\xa4\xce\x10\x3c\x8e\x92\x86\x2b\xc1\xb7\x4a\x10\xc3\x10\x0c\xeb\x79\x01\xb8\x5a\xab\x9d\x95\xc4\x10\xd8\xd2\xbd\x78\x56\x9e\x2d\x84\x74\x8c\xd6\xc2\x93\x76\x12\xb2\x85\xc4\xf3\x5b\x95\xb7\x84\xd9\xbb\x16\xab\x16\xd3\x17\x56\x73\xdc\x11\x84\x72\x12\x23\x0f\xc7\x20\x91\x24\xf0\xa3\x04\xee\xcb\x79\xcc\xbe\x94\x54\xa3\xbc\x9c\xce\xdb\x87\x90\x75\x8b\xe9\xbe\xce\x05\x27\xa7\xc8\x92\x3a\x52\xad\x41\x1e\x2e\xe7\x18\xc8\x23\xbb\xee\xbb\xeb\xe9\x0f\xf7\xff\x77\x08\x8a\x31\xf7\xe2\x3c\x79\x58\x42\x37\x8a\x94\x3d\x74\x27\xc7\x4c\x11\x67\x12\x0d\x89\x1f\x13\xd6\x37\x80\xa7\xf4\x93\x63\x72\xbe\xf0\x46\x67\xa4\xf6\x0f\xfd\xfb\x7b\xe0\x57\x2a\x38\x91\x70\x26\x0f\x1d\xbb\xc2\x7e\x1c\x63\xbc\x3c\x1a\x3f\xac\x56\x57\x67\x85\x8d\xf1\x55\xba\xc4\x2d\xaa\x4b\x43\x8e\x54\x7e\x35\xb2\xd4\x95\x90\xc7\xe1\x52\x36\x55\xcb\x2d\xa7\xf3\x4d\x8d\x23\xf6\x08\xc7\x4d\x43\xec\x37\xcd\x64\xb2\xf9\xfb\x35\xda\xb1\x6f\x1e\x26\xa5\x61\xf3\x3b\x00\x00\xff\xff\x2e\x82\xee\x9e\xd9\x02\x00\x00")

func dbMigrations0002_event_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0002_event_dataSql,
		"db/migrations/0002_event_data.sql",
	)
}

func dbMigrations0002_event_dataSql() (*asset, error) {
	bytes, err := dbMigrations0002_event_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0002_event_data.sql", size: 729, mode: os.FileMode(420), modTime: time.Unix(1537958785, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x93, 0xe9, 0x46, 0x83, 0xf5, 0x9c, 0x90, 0x5b, 0xa7, 0xd8, 0xdf, 0xb6, 0xb9, 0xf4, 0x9e, 0x1a, 0x6b, 0x5f, 0x66, 0x58, 0x61, 0xb9, 0x54, 0x3c, 0x93, 0x3b, 0xd9, 0x5b, 0xae, 0xf, 0x92, 0x8f}}
	return a, nil
}

var _dbMigrations0003_longer_team_namesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x28\x49\x4d\xcc\x55\x80\x08\x24\xe7\xe7\x94\xe6\xe6\x29\xe4\x25\xe6\xa6\x2a\x94\x54\x16\xa4\x2a\x94\x25\x16\x25\x67\x24\x16\x69\x18\x1a\x18\x68\x5a\x73\x71\x21\x1b\xe3\x92\x5f\x9e\x47\xba\x41\x46\xa6\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\x92\xc6\xdf\x09\x8e\x00\x00\x00")

func dbMigrations0003_longer_team_namesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0003_longer_team_namesSql,
		"db/migrations/0003_longer_team_names.sql",
	)
}

func dbMigrations0003_longer_team_namesSql() (*asset, error) {
	bytes, err := dbMigrations0003_longer_team_namesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0003_longer_team_names.sql", size: 142, mode: os.FileMode(420), modTime: time.Unix(1539085921, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xbb, 0x50, 0xf, 0x77, 0x25, 0x2e, 0xe6, 0x66, 0x6, 0x9c, 0xed, 0x44, 0xb2, 0x8a, 0xa6, 0x3c, 0xe7, 0xef, 0xb2, 0x49, 0x4, 0x81, 0x57, 0xc7, 0x6d, 0x91, 0x47, 0xe, 0xba, 0xb0, 0x57}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql": dbDrop_all_tablesSql,

	"db/sample_data.sql": dbSample_dataSql,

	"db/migrations/0001_initial.sql": dbMigrations0001_initialSql,

	"db/migrations/0002_event_data.sql": dbMigrations0002_event_dataSql,

	"db/migrations/0003_longer_team_names.sql": dbMigrations0003_longer_team_namesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"drop_all_tables.sql": {dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": {nil, map[string]*bintree{
			"0001_initial.sql":           {dbMigrations0001_initialSql, map[string]*bintree{}},
			"0002_event_data.sql":        {dbMigrations0002_event_dataSql, map[string]*bintree{}},
			"0003_longer_team_names.sql": {dbMigrations0003_longer_team_namesSql, map[string]*bintree{}},
		}},
		"sample_data.sql": {dbSample_dataSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
