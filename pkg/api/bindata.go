// Code generated by go-bindata.
// sources:
// db/drop_all_tables.sql
// db/migrations/0001_initial.sql
// DO NOT EDIT!

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x41\x8e\x85\x30\x0c\x43\xf7\x9c\xa2\xf7\xe0\x30\x91\x09\x19\x88\x28\x6d\xd5\x04\x34\xdc\x7e\x24\xc4\x6c\xbe\xbe\x14\xf6\x2f\xb6\x63\xcf\xbd\xb6\xe4\x98\xb2\x24\xfd\x49\xf2\xab\xe6\x96\x5c\xb0\x27\x86\x31\x66\x19\x87\xaf\xc8\x61\xd2\x2d\x60\xd0\x5a\x56\x86\x6b\x2d\x01\xd9\xc0\x1b\x16\x09\x28\xae\x5d\xaa\x11\xf8\x85\x22\xaf\x28\x45\x72\x40\x2d\xbd\x1e\x2d\x7a\x43\x8b\x39\x0a\x47\xe9\xfe\x31\x32\x87\x1f\x6f\x45\xe9\x7d\x49\x1f\x06\xb4\xaa\x79\xed\x57\x70\x25\xa7\x14\x27\xbf\x5a\x94\xff\x06\xa3\x45\xd9\xf5\x54\x8f\x3c\x9f\x39\xe9\x19\x81\xa6\x0c\xde\xb2\x5a\x24\x3f\xc3\x31\xc1\x84\x76\x5d\xfa\x5d\x89\x8d\xc3\x5f\x00\x00\x00\xff\xff\xda\x81\x6e\xb2\xa2\x02\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 674, mode: os.FileMode(420), modTime: time.Unix(1522052498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\xc1\x6e\xe3\x36\x10\x3d\x5b\x5f\x41\xec\xc5\x36\xea\x00\xe9\x62\x93\x4b\xda\xbd\xb4\x5f\x50\xa0\x67\x62\x42\x8e\x6c\x22\x14\xa9\x92\x94\x1b\xe7\xeb\x0b\xca\x94\x44\x49\x94\xac\xb5\x5d\x34\xe8\xd5\x7a\x43\x0e\xdf\xbc\x37\x1a\xca\x0f\x0f\xe4\xa7\x42\xec\x0d\x38\x24\x7f\x96\x59\xf6\xf0\x40\x7e\xd3\x06\xff\xd0\x52\xa2\x21\x96\x1d\xb0\x80\x2c\x03\xe9\xd0\x10\x0e\x0e\x5e\xc1\x22\x61\xda\xa0\x09\x08\x74\xc4\x89\x02\x3f\xb4\x42\xf2\x2b\x59\x57\x8e\xad\x5f\xb2\x8c\x19\xf4\x2b\xe2\xbb\x43\x65\x85\x56\x44\xe4\x44\x69\x47\xf0\x5d\x58\x67\xc9\x97\xaa\x12\xfc\x41\x5b\x5b\x7e\xe9\xc0\x0e\x5e\x25\x12\x87\x50\x90\x4d\xb6\x12\x9c\x78\x10\x29\x8d\x28\xc0\x9c\xc8\x1b\x9e\x08\xc7\x1c\x2a\xe9\xea\x07\x74\x8f\x0a\x7d\xda\xf4\xf8\x6d\xb3\xdd\x65\x2b\x05\x05\x92\x23\x18\x76\x00\xb3\xf9\xfa\xb4\xad\xf7\x53\x95\x94\x84\x1d\x90\xbd\x91\x4d\x0d\xf8\xe5\x3b\x59\xaf\xb7\xa4\x52\xe2\xaf\x0a\x77\xd9\xea\xbc\x37\xa7\xce\xd6\xc7\xb0\x0e\x8a\xd2\x7d\xb4\x3b\xb1\xca\x18\x54\x8e\xb6\xcf\xda\x55\xb3\xed\x30\xf3\xca\xa2\xb1\x57\xa5\xee\x23\x2f\xa6\xdf\x82\x86\x47\xb0\xc8\x0c\xba\x36\xf6\xe9\x71\x1c\x1b\x20\xe7\xc8\x5b\x4e\xbd\xcb\x56\xbe\x40\xb4\x39\x62\xbb\x91\xc1\x1c\x0d\x2a\x86\x36\x54\x50\xf0\x2d\xd1\x8a\x70\x94\xe8\x90\x30\xb0\x0c\x38\xc6\xa4\x09\xc5\xf1\xdd\x43\x02\x6f\x61\xdd\x11\xad\x50\x96\x52\x30\x70\x5e\x45\x37\xeb\x22\x45\x4e\x44\xea\x2e\x5b\x71\xb4\xcc\x88\xb2\xde\xce\xe1\xbb\xfb\x0f\xd9\xf2\xca\xa8\x8b\xdc\x92\xb3\x23\x3e\xd9\xed\x58\x7b\x25\xb0\x37\xd8\xe3\x55\x04\xb9\x53\xe9\xab\xe1\x46\xc4\xd4\x0f\xbe\x93\x47\x0f\x3a\xa2\xa9\x7d\xdc\x29\x34\x21\xd1\x06\xd4\x92\x59\x19\x19\x45\x3c\x27\x44\x6d\x64\x87\xce\x85\xc4\x5e\xb5\x7e\x7e\x7c\x9c\x28\x89\x15\x1f\x91\x5b\x6a\xd4\x01\xec\xa1\xfd\xe9\xf9\xdb\xad\x32\x8f\x64\x37\x5b\xbf\x9e\x3c\xe7\xcb\xb8\xe9\xaf\xb9\x23\x81\xaf\x44\x3d\x7d\x87\xd5\x96\x02\xbb\x5a\xf6\x78\x44\xe5\x62\x8a\x5a\xf8\xba\xd4\xd6\x09\x65\x1d\x48\xb9\xde\x91\x6c\xc5\x0e\x46\x17\x7e\xbb\x64\x91\xdb\xb0\x1a\x6b\x0f\xf0\xf5\xe9\x79\xc0\xb3\x42\xe4\x96\x02\x2f\x84\x22\xaf\x5a\x4b\x04\xd5\x86\xe5\x20\xad\xa7\x40\x58\xca\x51\x3a\x98\x04\x70\x61\xfd\xd1\x69\x09\x27\xa9\x81\xd3\x57\x60\x6f\x3a\xcf\x47\x78\x67\xea\xae\x57\xa0\x03\xff\x42\xa2\x56\xec\x15\xb8\xca\x20\x35\x16\xfa\x6a\x8b\x52\xef\x05\x7c\xf4\x25\xd6\xc7\x71\x04\x2e\x85\x9a\x83\xdc\xa2\xab\xe0\xd4\x59\x4d\xb5\x6e\x5e\xde\x44\x07\x82\xe9\x76\x19\x4b\xeb\x00\x4a\xa1\xfc\xd7\xdf\xb1\x9e\x27\x2d\xb5\x49\xe2\x3f\x93\x39\x87\x15\xb9\x5c\x08\x3f\xf4\x84\x4c\x9a\x06\x3d\xb4\xf6\xa8\x4f\x77\x95\x6a\xf8\x9f\xa9\xd1\xde\xe8\xaa\xbc\x6e\x96\xb8\xf1\x75\x17\xb3\xec\x47\x3c\x5d\x39\x2a\x14\x2d\x8d\xde\x1b\xb4\x36\xed\xde\x9e\xbe\xb5\x14\xec\x44\xab\x92\x83\x43\x4b\x51\xf9\x03\xf1\xa4\x8b\x13\x61\x16\x72\xa4\x85\xe6\xb8\x34\x40\xe7\xb9\x60\x48\x0f\xba\x32\xcb\x93\x6b\x07\xd6\x86\xa7\x6f\xf5\x1b\x24\x3c\x2d\xd1\x08\xcd\xa9\x50\x0e\xcd\x11\x64\xaf\x87\x0e\xc9\x9c\x08\x69\xe9\x0d\xcf\x0b\x78\x6f\x19\x29\xd1\x04\xbc\x7f\xe9\xe2\x1e\xcd\xd4\xaa\x13\x51\xe1\x8d\xdc\x23\xba\x3e\x92\xae\xdc\x92\x64\x07\x11\x77\x19\x0a\xef\x6a\xc8\xe0\x90\x94\x21\x5b\xf3\xdc\xd1\x90\x8d\xd9\xba\x6d\x47\x7e\xac\xdf\x96\x8a\x35\xf3\x55\x6c\xaf\xd8\x98\x81\x67\xc1\x3b\x52\x45\x49\x84\x42\x77\x97\xc6\x37\x1e\x13\x9a\xbc\xa8\x75\xe0\xaa\xa6\x61\x58\x34\x02\x64\x9c\xd9\xa8\x75\x3f\xf6\x5b\xf1\x5c\x9f\x16\x2c\x9e\x08\xa2\xc0\x99\x74\x06\x33\xfb\x75\xc3\xe3\x2d\x7a\x0c\x7c\x04\x83\xed\xb2\x95\x04\xeb\x68\xbd\x13\xcd\xb5\x69\x6c\xf5\xe3\x0b\xd7\xeb\x04\x07\xed\x0d\xa8\x71\x82\x03\x50\xf2\xec\xe1\xc8\x29\x5c\x37\x3b\x9f\x7f\xff\xa1\xe6\xdb\x16\x60\x20\xd2\x94\x15\x3b\x4d\x4f\xf9\xf0\xae\xa6\xae\x5d\x96\xb2\x74\x63\xbf\x49\x47\xc7\x0e\xdb\x44\x27\xdc\x91\x7e\x82\x69\x77\xa7\x35\x19\x2d\xb3\x7d\x59\x18\x33\xd8\x6d\x69\x58\x73\xf0\x4b\xe6\xa5\x07\x61\x9d\x36\xa7\x39\x13\x8f\x64\x3d\xa7\xae\xbb\x1a\xea\xff\xa3\xac\xb9\x29\x7a\xb2\x24\x0b\xf5\x32\x0c\x5b\x2e\x99\x61\xe4\xa4\x6a\xea\x7b\x1d\xad\xaf\xe6\x33\x42\x69\xee\xf4\xbd\xf1\xc2\x8f\x74\x68\x7d\xa9\x13\x4f\xe2\x41\xb0\x77\xf3\x99\x6e\xf7\xe7\x2b\xe6\x4c\x16\x37\xdd\x93\x0c\x1e\x85\xae\xd2\x97\x52\x7f\xbf\x35\x46\x1b\xca\xfc\xa8\x38\xf8\x5c\xf0\x89\xa5\xda\x15\xcf\xaf\x35\x1a\xff\xa2\xe5\xe2\x32\xfb\xd5\x92\x72\x0d\x05\x98\x17\x67\x00\x5d\x94\x62\xc0\xf5\x52\x1c\x7f\x8c\x63\x4e\x1c\x85\x9b\x6d\x52\xb7\x54\x9d\x49\xb0\x36\x25\x4f\x8b\x47\x34\x7e\xe3\xc4\xb3\xeb\xc6\x8b\x4f\xd0\x83\xae\x9a\x75\xbb\xd8\x29\xa1\x2f\xd7\x77\x52\x55\x5d\x8d\x2f\x6a\xa6\x83\x46\xfd\x6a\x1a\xd4\x9b\xb0\xa7\x61\x7d\x3d\x27\x3f\x74\xd2\x66\xa9\x57\x09\xec\x4d\x0a\x5b\xf7\xa1\xdb\xbf\xad\x24\x2a\x92\x5a\xe4\x62\x69\x7a\x33\x4b\x97\xd6\x8e\x44\x14\xd4\xe4\xc7\xff\xbf\xfc\xae\xff\x56\x59\xc6\x8d\x2e\x9b\x09\x21\x6f\xfe\x30\xa9\xbf\x12\x87\xe5\x5f\xd2\x90\xf3\x67\xf4\x79\x4c\xac\xe5\x79\x64\x43\xd3\x3c\xaa\xff\xd5\xe9\x02\x36\x70\x36\x8f\x0a\x7e\x99\x07\xb5\xaa\x5e\x06\x6b\x6e\x47\x0b\xd1\xcb\x49\x9a\x7a\x7b\xcf\x47\x45\xad\x7d\x01\xf0\x52\x45\x1b\xd7\x2c\x2a\x67\xc2\x36\x6d\xdc\x3f\x01\x00\x00\xff\xff\x82\x87\x12\x03\x0a\x1c\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 7178, mode: os.FileMode(420), modTime: time.Unix(1523257007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql": dbDrop_all_tablesSql,
	"db/migrations/0001_initial.sql": dbMigrations0001_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"drop_all_tables.sql": &bintree{dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_initial.sql": &bintree{dbMigrations0001_initialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

