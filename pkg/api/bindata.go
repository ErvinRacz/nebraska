// Code generated by go-bindata.
// sources:
// db/drop_all_tables.sql
// db/sample_data.sql
// db/migrations/0001_initial.sql
// db/migrations/0002_event_data.sql
// db/migrations/0003_longer_team_names.sql
// db/migrations/0004_rename_coreos_action.sql
// DO NOT EDIT!

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbDrop_all_tablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x3d\x6e\xc3\x30\x0c\x85\xf7\x9c\x42\x5b\x27\x9f\x20\x5b\xd1\xb1\x77\x10\x9e\x69\xc6\x21\xa2\x50\x82\x48\xa7\xf5\xed\x8b\xfc\xb4\x43\xd0\x80\x9e\xf5\xf1\x23\xc5\xc7\xa9\xd7\x96\x1c\x63\xe1\x24\x87\xc4\xdf\x62\x6e\xc9\x19\xe7\x44\x30\xc2\xc4\xfb\xdd\xbf\xc8\x62\xdc\x2d\x60\xd0\x5a\x11\x82\x4b\xd5\x80\x6c\xa0\x13\x66\x0e\xa8\x43\x81\x13\x7a\x06\x6d\x50\xd2\x11\xaa\x5c\x02\x6a\xee\x75\x69\xd1\x3f\x44\xcd\xa1\x14\x8d\xf7\x8b\x65\x73\xf8\xb2\x55\x9a\xb7\x6f\xe9\xa9\x41\x3e\x8a\x79\xed\x6b\x50\xc5\x17\x56\xcf\xbe\xb6\x68\xfe\x1b\x18\x45\x4a\x2e\x17\xf1\xa8\xe7\x23\xcf\xfc\x08\x21\x8f\x05\x74\x2a\x62\x91\x7e\x82\x63\x84\x71\x3e\xcb\xdc\x6f\x2b\xb1\xfd\x6e\x18\xd2\x27\xcf\xa0\xf5\x8e\xdb\x95\xff\xe2\xb7\xce\xe9\xea\x68\xa2\xf3\xdf\x83\x26\x24\xad\x3a\xdc\xcb\x79\x4a\x1f\xef\x2f\xae\xa3\x76\xae\xf6\x7c\x49\x3f\x01\x00\x00\xff\xff\xe6\x1e\x65\x85\x0d\x03\x00\x00")

func dbDrop_all_tablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbDrop_all_tablesSql,
		"db/drop_all_tables.sql",
	)
}

func dbDrop_all_tablesSql() (*asset, error) {
	bytes, err := dbDrop_all_tablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/drop_all_tables.sql", size: 781, mode: os.FileMode(436), modTime: time.Unix(1569837769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbSample_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5b\x53\xdb\x48\xd3\xbe\xcf\xaf\x98\xaa\xf7\xc2\x49\xc5\x63\xe6\x7c\x60\x6b\x2f\x80\x84\x24\xbb\x24\x1b\x96\x64\x53\xd9\x1b\x6a\x0e\x3d\xa0\x20\x4b\x5e\x49\x36\x81\x5f\xff\x95\x64\x30\x26\x84\x0f\xd9\xe4\xc0\xae\x53\x31\xf2\xc8\xad\xe9\xe7\x99\xee\x9e\xee\x99\x31\xc6\xe8\x55\x91\x35\x99\xcb\x51\x74\x8d\x7b\xf4\x08\x63\xf4\x0c\x92\x9b\xe6\x0d\x6a\xc0\x8d\x91\x2b\x22\x9a\xd6\x50\xa1\xc7\x2e\x8e\xb3\x62\xa3\x7b\x7f\xf2\x28\x2b\x6a\xa8\x1a\x94\x15\x4d\x39\xff\xde\xe3\x2c\x0e\x51\xe1\xc6\xf0\x04\xcd\x5c\x3e\x85\x1a\x3d\x1e\x44\x63\xb9\x60\x31\x60\xcb\xa8\xc0\x42\xd0\x88\x9d\x70\x09\xfb\x18\x0d\xd7\x8e\x7b\xc6\xed\x60\x88\x06\x71\xde\xe1\xe0\xc9\x2f\xd7\x9e\xdb\x76\x5b\xa3\xc7\xed\x9f\xf6\xc1\x43\x54\x43\xa8\xa0\x19\x76\x1d\x1e\x66\x71\xa9\xa7\x4e\xab\xf6\x51\xc6\x73\xca\x2c\x8b\x42\x6b\x23\x0d\x0b\x04\x64\x72\x56\x39\x00\x29\x29\x4f\xb4\xeb\xae\x8f\x5a\x4f\x7e\xe9\xb8\xd8\x29\x2b\xf8\xe3\x00\xb9\xc9\x24\xcf\x82\x6b\xb2\xb2\xb8\xa6\xe2\x52\xfb\x15\x03\x43\x14\xa1\x0e\x55\x36\x69\x9b\xbf\xa6\x2d\x58\xc5\x0c\x75\x0a\x47\xea\x12\x16\x3e\x02\xb6\x8e\x38\x6c\xb5\xd7\x0a\xa4\x8a\x41\xea\x56\xd1\x79\xe7\xed\xd5\x5e\x56\x4c\x3f\xa3\x54\x56\x68\xec\xea\x3a\x9b\x01\xaa\xa1\x9a\x41\x85\x22\x4c\xf2\xf2\x6c\x0c\x45\x53\xaf\x02\x6d\x19\xc3\xc4\x85\x13\x77\x04\x57\xea\x31\xef\x44\xb0\x46\x60\x09\xd6\x63\x41\x29\x60\xaf\x03\xc7\x9e\x83\xa7\x22\x69\xc7\x54\xcb\x23\x1d\xa2\x81\x56\x6a\xc4\x47\xa4\xed\xfa\xb8\x69\x26\xf5\xe6\xc6\xc6\x74\x12\x5d\x03\xa3\x0a\x72\x70\x35\x8c\x52\xee\x9a\xe0\x2a\x9c\xb7\x08\x46\x05\x34\x1b\x6e\x1c\x95\xc0\xd3\xba\xda\xb8\x90\xde\x68\xc5\x2f\xbe\x77\x38\xa9\xca\x38\x0d\x2d\x73\x87\x17\x4f\x3a\x3a\x1f\x0c\xd1\x9b\xf7\x7b\x7b\x43\x34\xa0\x52\x58\xa5\x85\x34\xad\x48\x2e\x7e\x3f\xd5\x5b\xb0\xbd\x57\xfd\xf5\xea\x99\xfd\xcd\xa7\xb3\xd7\xe5\x6f\xb0\x2d\xcf\x7e\x3f\xfa\xb5\xbd\xcf\x08\xb5\x98\x18\xcc\x08\x22\x64\x93\xb2\x4d\xae\x47\x92\x71\xcb\x3b\xe9\x5e\x83\x70\x17\x55\x9c\x6b\xcf\x93\x06\x9c\x12\xb3\x58\x68\x30\xd8\x11\xc9\x70\x22\x86\x8b\xc8\xa4\x8f\x5e\x2e\x51\x25\xee\x45\x95\x58\x91\x2a\x49\xa8\xb1\x94\x75\x22\xd5\xc9\x89\x7b\xba\xbd\x71\xfe\x6e\xa6\xff\x78\xfb\xe1\x28\x8b\x1f\x9f\x9e\x88\x83\xe2\xd9\xc1\x4d\xaa\xd4\x26\x95\x9b\xcc\x8e\x28\x31\x4c\xa9\x6f\x46\x55\x60\x8e\x2b\x4e\x19\xf6\xd6\x58\x2c\x08\x07\xec\xbc\xd4\x98\xa8\x40\xa4\x74\x1a\x5c\x60\x17\x54\x19\x62\x46\x64\x6d\xaa\x2e\xa4\x57\xa1\x4a\x6b\x4d\xb5\xa0\xa2\x15\xf1\xff\xf0\xb4\xff\xe7\xcb\xb7\xe6\xf3\x36\xff\x73\xf7\xfd\xa7\x9d\xb8\x95\xf8\xe9\xfe\xc7\x1d\xf6\xfc\x2b\x56\x45\xec\x26\x51\x23\xc3\xad\x35\xf6\x9b\x51\x25\xb8\x34\xc4\x58\x86\x83\x8b\x06\x0b\x65\x1c\x76\xc4\x7b\x0c\xde\x46\x02\xc4\x42\x70\xe2\x92\x2a\x2a\xef\x43\xd5\x5c\x7a\x25\xaa\x8c\x12\x5c\xea\x0e\xec\xc9\x1b\xe1\xc6\xe5\xef\x1f\xff\xfa\xfb\xfd\x0b\xf6\xa1\x3c\x88\xfb\x2f\xe9\xdb\x97\x6f\xcf\x2b\xb9\x75\x9d\x2a\x89\x28\xdf\x94\x72\x93\x91\x51\x4b\x33\xfd\x76\x54\x31\x23\x22\xb3\xd2\x63\x49\x4d\xc2\x22\x2a\x8d\xad\xb5\x80\xad\xb0\xca\x44\x02\x10\x2d\xb9\xa4\x8a\xd9\xfb\x50\x35\x97\x5e\x85\x2a\xa3\x98\x90\x72\x6e\x55\x2c\x3f\x2e\xdf\xcf\x66\x45\xf9\x91\x4b\x3b\xc9\xd8\x6e\xe1\x0e\x36\x3e\xd7\x47\x4d\xb6\xec\x80\x16\x53\x82\x18\xdf\xa4\x74\x93\x92\x91\x61\xd2\x1a\xb9\x2e\x55\xe1\xd8\x15\x05\xe4\x4b\xb3\x0e\x51\x44\x09\x17\xdb\x69\x41\x60\x61\x89\xc0\xd6\x29\xc0\x29\x0a\x25\xa5\xe5\x91\xfa\x2e\x56\xd4\x8d\xf3\x39\xb4\x57\xff\xa3\xc2\xdb\xa8\x96\x87\x92\x5a\x44\x64\x6b\xf5\x5c\x8c\x98\xa2\x4c\xd0\xde\xfa\x0d\x51\xbf\x70\x79\x17\x0e\xca\x8c\x37\x81\x59\x2c\x89\x6c\xbd\x43\x70\x6c\x40\x69\xec\xa8\x23\xc0\x83\x12\x34\x74\xf6\xe5\xa1\x71\x1d\x8a\x14\x74\xe2\xfc\x76\x14\x82\x73\xf1\xc3\x51\x38\xa3\x1d\xe1\xed\x68\xb4\x33\xad\xd0\x8e\x62\x13\x83\xc0\x5c\x12\xed\x1d\x58\x0a\xd0\x51\xeb\xf2\xc9\xf1\x1c\x06\x4d\xde\x9b\xff\x67\x30\xa4\x96\x2b\xc1\xe8\xe5\x3a\x5f\xc0\x38\xaa\xca\xe9\xa4\xbe\x42\x61\x1d\x8b\xe0\x35\xc1\x5c\x7b\xc0\x82\x30\x85\x8d\xe4\x09\xfb\x14\xa3\xf2\x5c\x68\xef\x3b\x4b\x3a\x58\xd8\xd4\x6e\x59\xa1\x2b\xbf\x41\x21\x9f\xd6\x0d\x54\x6d\xf2\x92\x5c\x5e\xc3\x10\x35\xd5\x74\xf1\x7e\xd1\x34\x78\x3e\xad\xca\x09\x6c\x6c\x43\x95\xcf\xd3\x3c\x2a\xd1\x38\x2b\xa6\x0d\xb4\x82\x6c\x88\x06\x8a\x2c\x35\xdc\x42\x90\x25\x8a\xad\x42\x50\x2f\x87\xb9\x83\x20\x9e\x80\x12\x61\x09\x8e\x51\x73\x2c\xbc\xb0\xd8\x6b\xe6\x30\x33\x2e\x50\xeb\x42\x0a\x31\xb4\x7d\x6d\x5f\x18\xeb\xdb\xaa\x1c\x97\x0d\x44\xd4\x8d\x3b\xba\x88\x4c\xf5\x10\xb5\x36\xe4\x9a\x70\x8c\xfc\xf4\xa8\x46\xf5\x04\x42\x96\xb2\xd0\x36\x9f\x95\xd3\x0a\x85\xb2\x48\xd9\xd1\xb4\xea\x52\xd1\xc1\x75\x16\xbf\x03\x97\x9a\x33\xb1\x92\xb1\xf5\x72\xda\x3b\xb8\x94\xde\x50\xa2\x0c\xc1\xc0\x95\xc3\xc2\x68\xdb\xe6\x12\x0e\x8b\x64\x8d\x05\x43\xbc\xb1\x9d\xe3\x6f\x5d\xba\xcc\xbb\xca\x85\x93\x1a\x85\x69\x55\x41\xd1\xa0\x08\x33\xc8\xcb\x49\x9b\x2c\xa3\xd3\xb2\x3a\xe9\x6a\x9b\xac\xbe\x24\x39\xa2\x54\xc1\x3f\x53\x28\x9a\xfc\xec\x3e\xe6\xd8\xce\x35\xbc\x07\x85\xc2\xd2\x95\x82\x67\xaf\x88\xf1\x05\x85\x97\x33\x95\x9b\x7b\xdb\x82\x4a\xcf\x3c\x55\xc0\x00\x4b\x9d\x0c\x16\x5a\x4b\x6c\x98\x4e\xd8\x24\xe2\x29\x75\x60\x7d\xec\x5c\x65\x52\xd6\x4d\x56\xd4\x8d\xcb\xf3\xf6\x63\x37\xe9\x9b\x9d\x6d\xd3\xbc\x06\xf2\xda\x3c\x3b\xfb\x5b\xfe\xf9\xf7\xe9\xf9\xb3\xbd\xb3\x77\xf1\xe4\xe5\xa7\x3f\x36\x3e\x1e\xa5\xdf\xff\x2a\xd8\x9f\x47\xef\x5f\x97\x27\xe1\xd7\x2b\x1a\xaf\xb1\x39\x18\x2c\xfd\xff\x6a\x96\xce\x19\x33\x1d\x39\xbd\x6a\x91\x9e\xa0\xa3\x74\x2c\xf8\xc4\x71\x6b\x47\x58\x80\x09\xd8\x18\x30\x58\xc5\x64\x69\x0a\x4c\x89\xa0\x6e\x01\xbd\xff\xfe\x45\x31\x7e\x2b\xe9\xf1\x44\x9f\x9f\x3d\x7d\xfa\xb4\x94\x69\xfb\xd5\xe9\xf3\xfc\x55\xf1\x6e\x6b\x5c\xeb\x8d\xe2\x53\x71\xf2\x79\xda\x14\x1b\xfb\xaf\x56\x06\xbd\xc8\xb7\xa9\x9a\xcf\xf6\xeb\xcc\x2f\xb7\x61\x66\xd6\x06\x29\x22\xc5\x9c\x0b\x81\x85\x03\x8b\x8d\x8b\x0c\xcb\xa0\x78\x94\x2a\xaa\x30\xcf\x4f\xbe\x82\xf9\x60\x67\x66\xec\x8b\x8f\xe7\x9f\xf5\xab\xcf\x4f\xdf\xe5\x9f\xfe\xf1\x6f\xea\xa8\xcb\x42\xc9\xb2\xfc\xf0\xcf\xf6\x79\xd8\xa9\xf6\x76\xf7\xc4\xe9\xce\xf1\xfe\x1a\x03\x3d\x4f\x9c\x2d\xd3\xa2\x2b\x26\xfb\x95\x07\x3d\x41\x6b\x61\x62\x92\x29\x60\xca\x9c\xc4\x22\xba\x88\x9d\xa6\x80\x85\x92\x21\x50\xa5\x0c\x11\xe6\x16\xd0\xf6\xe5\xfb\x5a\x9c\x1e\x67\xe7\xe9\x6c\xe6\xc5\xf8\x28\x7f\xfa\xc1\xbd\x71\x1f\xf8\x5f\x7b\xfb\x1f\x4f\xeb\x0f\xf4\xc5\xcb\x37\x2f\x7f\x7b\x33\x09\xbb\x47\x62\x35\xd0\x4b\x29\xb0\x61\x92\x89\xce\xbd\x7a\x25\xfa\x3d\x41\xdb\x10\x85\x16\x41\x62\x48\x8e\xb7\x31\xc2\xb6\xd3\x39\xc3\xd2\xc4\xe8\x8d\x64\x10\xcd\x6d\x23\x4d\x0f\xec\xf9\xfe\xce\xde\x8b\x4f\x63\x48\x1f\x8b\xe7\x1b\x6e\x37\x4c\x76\x3e\xed\xd1\x37\xf5\xd1\xf4\xe5\xf1\xfe\x8b\x4f\xe4\xfd\xce\x58\x26\xf2\xda\x9a\x15\x40\x5f\x4f\x66\x2d\xe5\x5a\x9b\x55\xf2\x8e\x47\x18\xa3\x03\x37\x9e\xe4\x70\x6d\x99\x85\x7e\x83\x05\x18\xaf\x84\x34\x84\x48\x6c\x92\x20\x58\x28\xa6\xb1\xe7\xdc\x63\x0f\x9a\x38\x4d\x4d\x10\x66\x9e\xb6\xdc\xe8\xbe\x6d\xfd\x6d\x5a\x37\xc8\x15\xd7\xfa\x6e\x4a\x54\x1f\x97\xa7\xa8\x39\x06\x14\xdc\xc4\xf9\x2c\xcf\x9a\x0c\x6a\x54\x26\xf4\x06\x7c\xe5\xea\x13\x77\xdf\x05\x9a\x0e\x5f\x73\x36\x81\x21\x9a\x56\xf9\x10\xa5\x2c\x87\x39\xdc\x19\x54\x75\x07\x75\x49\xa5\xeb\x88\x25\xb5\xb2\x8d\x7f\x58\x26\xc3\x30\xa5\x20\xb1\x8d\x9a\xe0\x04\x29\x19\x6a\x43\x0c\x36\x0d\x86\x48\x2c\x15\x47\xa7\xa7\xa7\xa3\x93\xac\x98\x95\xf9\xc9\x28\x2b\xbb\xc2\xa7\x81\xba\x39\xa4\x23\x32\xea\xac\x77\x71\xd1\x8b\xce\xef\x00\x8a\x32\x65\x75\x72\xa2\x05\xc5\xef\x0f\x8a\x5f\x82\xe2\x3f\x13\x94\x21\x44\xf8\x36\x1c\xc8\x64\xf5\xfd\x41\x89\x4b\x50\xe2\x67\x82\x72\x17\xaf\x16\x94\xb9\x3f\x28\x79\x09\x4a\xae\x0b\xea\xb2\x1e\x5b\x8a\x19\xa1\xcc\xcb\xea\x4b\x0c\xc3\x4b\xf8\x5f\x04\x90\x04\x9c\x79\xd1\xe2\x31\xe1\x76\x3c\x83\xd7\xae\xad\x6e\xba\xf2\x8d\x90\x9d\x1d\x42\x7a\xeb\xdb\x2d\x83\xf5\xb0\x84\x6f\x8b\x2b\x78\x16\x01\x9c\xb9\xc3\xa3\x96\xea\xb9\xff\x11\x62\xed\xee\xee\x2a\xb8\x7a\xb9\xed\xb7\xc5\x15\x2f\x5e\x77\xe1\xda\x75\x59\x9e\x15\x47\x1d\xb0\xad\xad\x55\x81\xf5\xb2\xf2\x3b\x8a\x1c\x1f\x9c\x53\xc6\x87\x3b\x02\x75\x5b\x28\x46\xf4\x7c\x87\xa1\x69\x8d\x4f\xa1\x6e\x30\xbb\x6c\xbd\xa8\xac\xe7\x1b\x04\xf5\x10\xb5\x77\x51\x28\x5d\xdd\xfc\xc8\x22\xbb\x2f\x67\xbd\x2c\xee\x0e\xce\x34\xd1\x82\x29\xe1\x30\x23\x9a\x60\xe1\x8d\xc0\x56\x41\xc4\xc6\x31\x65\xa3\x77\x92\x30\xfa\x25\x67\xe0\xea\x06\xd3\xdb\x38\x6b\xef\xfe\xb7\x39\xf3\x94\x12\x43\xb9\xbb\xcb\xce\xf6\x1d\x7e\x06\xb3\xee\x6a\xab\x2b\x98\x97\xab\xe8\x05\x5f\x07\x67\xb1\x80\x7b\x55\xcd\xdf\x8b\xab\x5e\x91\xfa\x0e\xae\xc2\xc5\xeb\x2e\xae\x2e\xa2\x07\xba\xe2\x6c\xd1\xf2\xaf\xe4\xae\x57\xd4\xfc\x82\xbb\xae\xb4\x28\xc2\x45\xba\x90\x4d\x96\x82\xf0\xe5\xad\xce\xeb\x28\x19\xb5\xff\x6e\x14\xef\x3d\xe4\xd9\x92\xfc\x8d\x9a\xb0\x87\x3c\x5f\x92\xe7\x6b\xc8\x8b\x25\xf9\x1b\xe5\x59\x0f\x79\xb9\x24\x7f\xa3\x90\xef\x21\xaf\x96\xe4\xd5\x1a\xf2\x7a\x49\xfe\xc6\xb6\x41\x0f\x79\xb3\x24\x6f\xd6\x90\xb7\x4b\xf2\x37\x8a\x9d\x3e\xf6\x43\x96\x0d\xe8\xc6\x1a\x75\x9f\x27\x5c\x33\xc1\x75\x6c\x90\x2e\x1b\x21\xbd\xd5\x0a\x0f\x97\x6b\xc4\xab\xba\xe5\xa2\xc6\xb8\x38\xf7\xd0\xe5\xbd\x8b\xeb\xc5\xc5\x7c\x1b\x69\xf1\xf1\xba\xfb\xf4\x0e\x7f\x7d\xd2\x89\x1f\xa8\xfc\x6a\xb1\xfb\xbb\x28\xcf\xd6\x56\xbe\x7f\x5d\xf8\x00\x99\xef\x5f\xff\x0d\x51\xbf\x8c\xea\x07\x2a\xdf\xbf\xce\xfb\x6e\xca\xaf\x6f\x36\xea\xe7\x2b\x4f\x97\x95\xe7\xab\x28\xaf\x7f\xbe\xf2\x62\x6d\xe6\xcd\x4a\x0e\xdb\x27\x23\xbe\x9f\xcd\xeb\x55\x94\xb7\x3f\x5f\xf9\x6b\x36\xcf\x56\x9a\xa4\x56\x5a\xe9\xf8\x3e\xda\xaf\x6f\xf4\x74\xb5\x39\xf6\xa1\x69\xbf\x5a\x31\xd9\xa7\xb8\xf9\x42\x7b\x17\x9a\x6c\x96\x35\x67\x0b\x8d\x17\x4a\x14\xe5\xe9\xe3\x27\xc8\x35\xa8\xc9\xc6\x80\xce\xcb\x02\xd0\x60\xda\x84\x01\xc2\xad\x24\x54\x33\x97\xa3\x01\x47\xc7\xe5\xb4\xba\xd8\x2b\x15\x2b\x2f\xba\xf6\x0d\x34\x7d\x2b\xe5\x6b\xb9\xd5\xb7\x45\xaa\x16\x48\x65\x37\x88\xff\x5d\xa4\x94\x2d\xa0\xf2\xf9\x1e\xf8\x7f\x17\xaa\x59\x40\x15\xff\x71\xfb\x65\x62\x01\x95\xcd\xd7\x19\x1e\x2e\xd4\x45\x48\xad\x1b\xd7\x4c\xeb\xc3\xe3\xac\x6e\xca\xea\x2b\xc8\x97\x47\xac\x17\x0b\x57\xe3\xfd\x13\x12\xd2\xbb\xd0\xc8\x35\xd1\xa0\xe5\x15\xa4\x07\x88\x4b\xad\x8a\xcb\x3e\xe4\x51\xd2\x6b\xa2\x41\xe2\x81\x0f\x13\xbb\x3f\x30\x44\x09\xaa\x21\x94\x45\x7c\xa0\x18\xc5\xd2\x66\x77\xbf\x04\x47\x3d\x64\x5b\x94\xeb\xc2\xf9\xb7\x84\x8c\xfe\xc0\xf4\x43\x1e\x27\xbd\x2e\x9c\x7f\x4d\xd0\xb8\x0f\xb2\x9f\x15\x35\x60\x06\x45\x83\x1e\x4f\x2a\x98\x65\xe5\xb4\x3e\x5c\x1c\x7e\x80\xaa\x2a\xab\xc3\x50\x46\x18\x5e\x31\x91\xc5\x9b\x3b\xd4\xdd\x13\x0e\x9b\xb3\xc9\x7c\x93\xba\x86\x1c\x42\x73\x75\x7a\x6a\xad\x32\x0e\x9a\x51\x16\x51\xaa\xca\xf1\xd2\xe3\x11\x34\xe8\xf4\x18\xaa\xf6\x62\xd4\x35\xfc\x8a\x78\xb7\x11\x05\xcd\xa8\x82\x7a\x9a\x37\xe8\x57\x44\x6e\x3d\x6a\xc5\xbe\xc1\x51\x2b\x6d\x48\x54\x56\x10\x6c\x9d\x30\xf3\x93\xd4\xc6\xc4\x84\xad\xf4\x4e\x71\xef\xc1\x06\x3f\xf8\xea\x51\x2b\xd4\xe1\xdf\x2a\xca\xe6\x18\x2a\x54\xdf\xb8\x3f\x44\x09\x20\x47\xa9\x02\x40\x4d\x89\x2a\x18\x97\x33\x40\xe3\xf9\xce\xd5\x4f\x3a\x66\x05\xc9\x53\xa3\x82\xc5\x51\x06\x8f\x45\x4c\x0c\x5b\x6e\x18\x0e\xc2\x30\x0a\x22\x86\x20\xfc\xd2\x39\x97\xcd\x8d\x8d\xbc\x0c\x2e\x3f\x2e\xeb\x66\xd3\x10\x32\xff\x79\x49\x84\x71\x79\x38\xa3\x97\x3f\x56\x59\x5c\xf4\xa2\xf2\x3b\x80\xf2\x8e\x19\x97\x84\xc1\x5e\x7a\x8b\x85\x22\x80\xad\x50\x0e\x83\x77\x96\xa8\x00\x3a\xba\xb4\x02\x28\x7a\x09\x8a\xae\x0b\xea\x9e\x87\x41\x9c\x0e\x26\x58\x27\x70\x64\x8e\x63\xa1\x65\xc4\x1e\x94\xc0\x96\xd2\x94\x4c\x54\x60\x6d\xb7\xea\xb9\x74\x78\xe7\xea\x87\x30\x7d\xed\xb9\x97\x25\xdc\x75\xe0\x9d\x3a\xce\x9c\xb3\x98\x4b\xc9\xb0\xb0\x29\x60\xc7\x4c\xc0\x4a\x0a\xee\x43\x48\x84\x28\x7b\xa5\x28\xc2\x28\xce\x77\x9d\xdf\x1d\x03\xca\x5d\x03\x75\x83\xea\x66\x9a\x12\x3a\xcd\xf2\x1c\x79\x40\x2e\x3f\x75\x67\x35\x6a\x43\xc2\x8f\xdc\x6f\xee\xcb\x59\xaf\x81\x79\xf2\xcb\xa3\xff\x0b\x00\x00\xff\xff\x80\x63\x64\x6a\xb5\x3c\x00\x00")

func dbSample_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbSample_dataSql,
		"db/sample_data.sql",
	)
}

func dbSample_dataSql() (*asset, error) {
	bytes, err := dbSample_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/sample_data.sql", size: 15541, mode: os.FileMode(436), modTime: time.Unix(1569837784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x41\x93\xe3\x26\x13\x3d\x5b\xbf\x82\xda\x8b\xed\xfa\x3c\x55\xf3\x6d\xed\xce\x65\x92\x3d\xe5\x9c\x5b\xce\x54\x1b\x5a\x36\x65\x04\x0a\x20\x67\x3c\xbf\x3e\x85\x06\x49\x48\x42\xb2\xd6\x76\x2a\x53\xb9\x5a\xaf\xa1\x79\xfd\x5e\xab\x91\x9f\x9e\xc8\xff\x0a\x71\x30\xe0\x90\xfc\x51\x66\xd9\xd3\x13\xf9\x1d\xf7\x06\xec\x09\x88\x65\x47\x2c\x20\xcb\x40\x3a\x34\x84\x83\x83\x3d\x58\x24\xaa\x7d\x8e\x8e\x38\x51\xe0\xbb\x56\x48\x7e\x25\xeb\xca\xb1\xf5\x6b\x96\x31\x83\x7e\x35\x7c\x73\xa8\xac\xd0\x8a\x88\x9c\x28\xed\x08\xbe\x09\xeb\x2c\xf9\x52\x55\x82\x3f\x69\x6b\xcb\x2f\x1d\xd8\xc1\x5e\x22\x71\x08\x05\xd9\x64\x2b\xc1\x89\x07\x91\xd2\x88\x02\xcc\x85\x9c\xf0\x42\x38\xe6\x50\x49\x57\x3f\xa0\x07\x54\xe8\x53\xa6\xe7\x6f\x9b\xed\x2e\x5b\x29\x28\x90\x9c\xc1\xb0\x23\x98\xcd\xd7\xef\xdb\x7a\x3f\x55\x49\x49\xd8\x11\xd9\x89\x6c\x6a\xc0\x2f\x3f\xc8\x7a\xbd\x25\x95\x12\x7f\x56\xb8\xcb\x56\x1f\x7b\x73\xea\x6c\x7d\x0c\xeb\xa0\x28\xdd\x7b\xbb\x13\xab\x8c\x41\xe5\x68\xfb\xac\x5d\x35\xdb\x0e\x33\xaf\x2c\x1a\x7b\x53\xea\x3e\xf2\x6a\xfa\x2d\x68\x78\x04\x8b\xcc\xa0\x6b\x63\xbf\x3f\x8f\x63\x03\xe4\x23\xf2\x9e\x53\xef\xb2\x95\x2f\x10\x6d\x8e\xd8\x6e\x64\x30\x47\x83\x8a\xa1\x0d\x15\x14\x7c\x4b\xb4\x22\x1c\x25\x3a\x24\x0c\x2c\x03\x8e\x31\x69\x42\x71\x7c\xf3\x90\xc0\x5b\x58\x77\x44\x2b\x94\xa5\x14\x0c\x9c\x57\xd1\xdd\xba\x48\x91\x13\x91\xba\xcb\x56\x1c\x2d\x33\xa2\xac\xb7\x73\xf8\xe6\xfe\x45\xb6\xbc\x32\xea\x22\xb7\xe4\xec\x88\x4f\x76\x3b\xd6\x5e\x09\xec\x04\x07\xbc\x89\x20\x77\x29\x7d\x35\xdc\x88\x98\xfa\xc1\x0f\xf2\xec\x41\x67\x34\xb5\x8f\x3b\x85\x26\x24\xda\x80\x5a\x32\x2b\x23\xa3\x88\x97\x84\xa8\x8d\xec\xd0\xb9\x90\xd8\xab\xd6\xff\x9f\x9f\x27\x4a\x62\xc5\x7b\xe4\x96\x1a\x75\x04\x7b\x6c\x7f\x7a\xf9\x76\xaf\xcc\x23\xd9\xcd\xd6\xaf\x27\xcf\xf9\x32\x6e\xfa\x6b\xee\x48\xe0\x2b\x51\x4f\xa6\x0d\x6a\x4b\x81\xdd\x2c\x7b\x3c\xa3\x72\x31\x45\x2d\x7c\x5d\x6a\xeb\x84\xb2\x0e\xa4\x5c\x7b\x96\x8e\x46\x17\x7e\xb7\x64\x8d\xdb\x28\x0f\xb5\x47\xf8\xfa\xfd\x65\xc0\xb2\x42\xe4\x96\x02\x2f\x84\x22\x7b\xad\x25\x82\x6a\xa3\x72\x90\xd6\x13\x20\x2c\xe5\x28\x1d\x4c\x02\xb8\xb0\xfe\xe0\xb4\x84\x8b\xd4\xc0\xe9\x1e\xd8\x49\xe7\xf9\x08\xef\x4c\xdd\xf3\x0a\x74\xe0\x5f\x46\xd4\x8a\x83\x02\x57\x19\xa4\xc6\x42\x5f\x6b\xbd\xcc\xa3\x80\xf7\xbe\xc0\xfa\x38\x8e\xc0\xa5\x50\x73\x90\x7b\x54\x15\x7c\x3a\xab\xa8\xd6\xcb\xcb\x5b\xe8\x40\x2e\xdd\x2e\x63\x61\x1d\x41\x29\x94\xff\xf8\x1b\xd6\xf3\xa4\xa5\x36\x49\xfc\x67\xb2\xe6\xb0\x22\xd7\x0b\xe1\x47\x9e\x90\x49\xd3\x9e\x87\xc6\x1e\x75\xe9\xae\x52\x0d\xff\x33\x35\x3a\x18\x5d\x95\xb7\x4d\x12\x77\xbe\xec\x62\x96\x8d\x96\x52\x57\x8e\x0a\x45\x4b\xa3\x0f\x06\xad\x4d\xbb\xb7\xa7\x6f\x2d\x05\xbb\xd0\xaa\xe4\xe0\xd0\x52\x54\xfe\x40\x3c\xe9\xe2\x44\x98\x85\x1c\x69\xa1\x39\x2e\x0d\xd0\x79\x2e\x18\xd2\xa3\xae\xcc\xf2\xe4\xda\x71\xb5\xe1\xe9\x5b\xfd\xfe\x08\x4f\x4b\x34\x42\x73\x2a\x94\x43\x73\x06\xd9\xeb\xa0\x43\x32\x27\x42\x5a\x7a\xc3\xf3\x02\xde\x5a\x46\x4a\x34\x01\xef\x5f\xb9\x78\x40\x33\xb5\xea\x44\x54\x78\x1f\xf7\x88\xae\x8f\xa4\x2b\xb7\x24\xd9\x41\xc4\x43\x46\xc2\x87\x1a\x32\x38\x24\x65\xc8\xd6\x3c\x0f\x34\x64\x63\xb6\x6e\xdb\x91\x1f\xeb\x77\xa5\x62\xcd\x74\x15\xdb\x2b\x36\x66\xe0\x59\xf0\x8e\x54\x51\x12\xa1\xd0\x3d\xa4\xf1\x8d\x87\x84\x26\x2f\x6a\x1d\xb8\xaa\x69\x18\x16\x8d\x00\x19\x67\x36\x6a\xdd\xcf\xfd\x56\x3c\xd7\xa7\x05\x8b\x07\x82\x28\x70\x26\x9d\xc1\xc4\x7e\xdb\xe8\x78\x8f\x1e\x03\x1f\xc1\x60\xbb\x6c\x25\xc1\x3a\x5a\xef\x44\x73\x6d\x1a\x5b\xfd\xfc\xc2\xf5\x3a\xc1\x41\x07\x03\x6a\x9c\xe0\x00\x94\x3c\x7b\x38\x72\x0a\xd7\x4d\xce\x1f\xbf\xff\x54\xf3\x6d\x0b\x30\x10\x69\xca\x8a\x9d\xa6\xa7\x7c\xf8\x50\x53\xd7\x2e\x4b\x59\xba\xb1\xdf\xa4\xa3\x63\x87\x6d\xa2\x13\xee\x48\x3f\xc1\xb4\xbb\xd3\x9a\x8c\x96\xd9\xbe\x2e\x8c\x19\xec\xb6\x34\xac\x39\xf8\x35\xf3\xd2\xa3\xb0\x4e\x9b\xcb\x9c\x89\x47\xb2\x9e\x53\xd7\x43\x0d\xf5\xdf\x51\xd6\xdc\x14\x3d\x59\x92\x85\x7a\x19\x86\x2d\x97\xcc\x30\x72\x52\x35\xf5\xad\x8e\xd6\x17\xf3\x19\xa1\x34\x37\xfa\xde\x78\xe1\x47\x3a\xb4\xbe\xd4\x89\x27\xf1\x20\xd8\xbb\xf9\x4c\xb7\xfb\x8f\x0b\xe6\x4c\x16\x77\xdd\x93\x0c\x9e\x85\xae\xd2\x77\x52\x7f\xbb\x35\x46\x1b\xca\xfc\xa8\x38\xf8\x58\xf0\x89\xa5\xda\x15\xcf\xaf\x35\x1a\xff\xa2\xe5\xe2\x32\xfb\xd5\x92\x72\x0d\x05\x98\x17\x67\x00\x5d\x95\x62\xc0\xf5\x52\x1c\x7f\x8a\x63\x4e\x9c\x85\x9b\x6d\x52\xf7\x54\x9d\x49\xb0\x36\x25\x4f\x8b\x67\x34\x7e\xe3\xc4\xb3\xdb\xc6\x8b\x4f\xd0\x83\x6e\x9a\x75\xbb\xd8\x29\xa1\x2f\xd7\x77\x52\x55\x5d\x8d\xaf\x6a\xa6\x83\x46\xfd\x6a\x1a\xd4\x9b\xb0\xa7\x61\x7d\x3d\x27\x3f\x73\xd2\x66\xa9\xbd\x04\x76\x92\xc2\xd6\x7d\xe8\xfe\x6f\x2b\x89\x8a\xa4\x16\xb9\x5a\x9a\xde\xcc\xd2\xa5\xb5\x23\x11\x05\x35\xf9\xf1\x3f\x2f\xbf\xe9\xbf\x54\x96\x71\xa3\xcb\x66\x42\xc8\x9b\xbf\x4b\xea\x6f\xc4\x61\xf9\xd7\x34\xe4\xe3\x23\xfa\x3c\x26\xd6\xf2\x3c\xb2\xa1\x69\x1e\xd5\xff\xea\x74\x05\x1b\x38\x9b\x47\x05\xbf\xcc\x83\x5a\x55\x2f\x83\x35\xb7\xa3\x85\xe8\xe5\x24\x4d\xbd\xbd\xe7\xa3\xa2\xd6\xbe\x00\x78\xad\xa2\x8d\x6b\x16\x95\x33\x61\x9b\x36\xee\xef\x00\x00\x00\xff\xff\x23\xe7\x35\x9a\x04\x1c\x00\x00")

func dbMigrations0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initialSql,
		"db/migrations/0001_initial.sql",
	)
}

func dbMigrations0001_initialSql() (*asset, error) {
	bytes, err := dbMigrations0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial.sql", size: 7172, mode: os.FileMode(436), modTime: time.Unix(1569834936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0002_event_dataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8b\x1a\x4f\x10\xc5\xef\xf3\x29\xde\x41\x50\xf9\x8f\xa2\xff\xe4\x10\xf0\x64\x58\x59\x16\x42\x72\x08\x9e\x43\x3b\x5d\x8e\x4d\x7a\xaa\x3b\x55\x35\x26\x7e\xfb\xd0\xad\xbb\x28\x49\x2e\x03\x3d\xf5\xde\x9b\xdf\x9b\xea\xc5\x02\xff\x0d\xa1\x17\x67\x84\x7d\x6e\x9a\xc5\x02\x2f\x1c\x2c\xb8\x08\xef\xcc\xd5\x17\xbb\x33\xb1\xc1\x2e\x99\xb4\x1c\xb7\xde\x23\xdc\x34\xf4\x36\xc2\xd9\xc5\x91\x14\xe1\x08\x3b\x11\xcc\x1d\x22\x21\x28\x68\xc8\x76\x69\xee\x3f\xf3\xd5\x9c\xd1\x40\x6c\x1f\xa9\x0f\xdc\x3c\x7d\xc1\xa7\xed\xe7\xe7\xfd\xf6\x79\x87\x1c\x73\xaf\x3f\x22\x26\x93\xe6\x50\x87\x00\x4a\x22\x27\x03\xfd\x0a\x6a\x8a\x99\x52\xa4\xce\x10\x3c\x8e\x92\x86\x2b\xc1\xb7\x4a\x10\xc3\x10\x0c\xeb\x79\x01\xb8\x5a\xab\x9d\x95\xc4\x10\xd8\xd2\xbd\x78\x56\x9e\x2d\x84\x74\x8c\xd6\xc2\x93\x76\x12\xb2\x85\xc4\xf3\x5b\x95\xb7\x84\xd9\xbb\x16\xab\x16\xd3\x17\x56\x73\xdc\x11\x84\x72\x12\x23\x0f\xc7\x20\x91\x24\xf0\xa3\x04\xee\xcb\x79\xcc\xbe\x94\x54\xa3\xbc\x9c\xce\xdb\x87\x90\x75\x8b\xe9\xbe\xce\x05\x27\xa7\xc8\x92\x3a\x52\xad\x41\x1e\x2e\xe7\x18\xc8\x23\xbb\xee\xbb\xeb\xe9\x0f\xf7\xff\x77\x08\x8a\x31\xf7\xe2\x3c\x79\x58\x42\x37\x8a\x94\x3d\x74\x27\xc7\x4c\x11\x67\x12\x0d\x89\x1f\x13\xd6\x37\x80\xa7\xf4\x93\x63\x72\xbe\xf0\x46\x67\xa4\xf6\x0f\xfd\xfb\x7b\xe0\x57\x2a\x38\x91\x70\x26\x0f\x1d\xbb\xc2\x7e\x1c\x63\xbc\x3c\x1a\x3f\xac\x56\x57\x67\x85\x8d\xf1\x55\xba\xc4\x2d\xaa\x4b\x43\x8e\x54\x7e\x35\xb2\xd4\x95\x90\xc7\xe1\x52\x36\x55\xcb\x2d\xa7\xf3\x4d\x8d\x23\xf6\x08\xc7\x4d\x43\xec\x37\xcd\x64\xb2\xf9\xfb\x35\xda\xb1\x6f\x1e\x26\xa5\x61\xf3\x3b\x00\x00\xff\xff\x2e\x82\xee\x9e\xd9\x02\x00\x00")

func dbMigrations0002_event_dataSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0002_event_dataSql,
		"db/migrations/0002_event_data.sql",
	)
}

func dbMigrations0002_event_dataSql() (*asset, error) {
	bytes, err := dbMigrations0002_event_dataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0002_event_data.sql", size: 729, mode: os.FileMode(436), modTime: time.Unix(1568801926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0003_longer_team_namesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x28\x49\x4d\xcc\x55\x80\x08\x24\xe7\xe7\x94\xe6\xe6\x29\xe4\x25\xe6\xa6\x2a\x94\x54\x16\xa4\x2a\x94\x25\x16\x25\x67\x24\x16\x69\x18\x1a\x18\x68\x5a\x73\x71\x21\x1b\xe3\x92\x5f\x9e\x47\xba\x41\x46\xa6\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\x92\xc6\xdf\x09\x8e\x00\x00\x00")

func dbMigrations0003_longer_team_namesSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0003_longer_team_namesSql,
		"db/migrations/0003_longer_team_names.sql",
	)
}

func dbMigrations0003_longer_team_namesSql() (*asset, error) {
	bytes, err := dbMigrations0003_longer_team_namesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0003_longer_team_names.sql", size: 142, mode: os.FileMode(436), modTime: time.Unix(1569582100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0004_rename_coreos_actionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x4a\xcc\x29\x49\x2d\x52\x28\x49\x4c\xca\x49\x55\x48\xce\x2f\x4a\xcd\x2f\x8e\x4f\x4c\x2e\xc9\xcc\xcf\x53\x28\x4a\xcd\x4b\xcc\x4d\x55\x28\xc9\x57\x48\xcb\x49\x2c\x49\x4e\x2c\x82\x4a\x58\x73\x71\x21\x1b\xe2\x92\x5f\x9e\x87\x6a\x0c\xaa\x72\x24\x73\x50\xcc\xb7\xe6\x02\x04\x00\x00\xff\xff\xcf\x20\x82\x03\x8b\x00\x00\x00")

func dbMigrations0004_rename_coreos_actionSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0004_rename_coreos_actionSql,
		"db/migrations/0004_rename_coreos_action.sql",
	)
}

func dbMigrations0004_rename_coreos_actionSql() (*asset, error) {
	bytes, err := dbMigrations0004_rename_coreos_actionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0004_rename_coreos_action.sql", size: 139, mode: os.FileMode(436), modTime: time.Unix(1569831352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/drop_all_tables.sql":                      dbDrop_all_tablesSql,
	"db/sample_data.sql":                          dbSample_dataSql,
	"db/migrations/0001_initial.sql":              dbMigrations0001_initialSql,
	"db/migrations/0002_event_data.sql":           dbMigrations0002_event_dataSql,
	"db/migrations/0003_longer_team_names.sql":    dbMigrations0003_longer_team_namesSql,
	"db/migrations/0004_rename_coreos_action.sql": dbMigrations0004_rename_coreos_actionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"drop_all_tables.sql": {dbDrop_all_tablesSql, map[string]*bintree{}},
		"migrations": {nil, map[string]*bintree{
			"0001_initial.sql":              {dbMigrations0001_initialSql, map[string]*bintree{}},
			"0002_event_data.sql":           {dbMigrations0002_event_dataSql, map[string]*bintree{}},
			"0003_longer_team_names.sql":    {dbMigrations0003_longer_team_namesSql, map[string]*bintree{}},
			"0004_rename_coreos_action.sql": {dbMigrations0004_rename_coreos_actionSql, map[string]*bintree{}},
		}},
		"sample_data.sql": {dbSample_dataSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
